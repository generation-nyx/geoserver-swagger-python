# coding: utf-8

"""
    GeoServer Importer Extension - Transforms

    The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The transforms endpoint manages data transforms applied to individual import jobs. The importer extension is an optional install and may not be available on all deployments of GeoServer  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ImporterTransformsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_transform(self, import_id, task_id, transform_id, **kwargs):  # noqa: E501
        """Removes the transformation  # noqa: E501

        Removes the transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transform(import_id, task_id, transform_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str transform_id: The ID of the transform (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_transform_with_http_info(import_id, task_id, transform_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_transform_with_http_info(import_id, task_id, transform_id, **kwargs)  # noqa: E501
            return data

    def delete_transform_with_http_info(self, import_id, task_id, transform_id, **kwargs):  # noqa: E501
        """Removes the transformation  # noqa: E501

        Removes the transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transform_with_http_info(import_id, task_id, transform_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str transform_id: The ID of the transform (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'transform_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_transform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `delete_transform`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `delete_transform`")  # noqa: E501
        # verify the required parameter 'transform_id' is set
        if self.api_client.client_side_validation and ('transform_id' not in params or
                                                       params['transform_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform_id` when calling `delete_transform`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'transform_id' in params:
            path_params['transformId'] = params['transform_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/transforms/{transformId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transform(self, import_id, task_id, transform_id, **kwargs):  # noqa: E501
        """Retrieve a transformation  # noqa: E501

        Retrieve a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transform(import_id, task_id, transform_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str transform_id: The ID of the transform (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \"self\" or \"none\", depending on the request.
        :return: Transform
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transform_with_http_info(import_id, task_id, transform_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transform_with_http_info(import_id, task_id, transform_id, **kwargs)  # noqa: E501
            return data

    def get_transform_with_http_info(self, import_id, task_id, transform_id, **kwargs):  # noqa: E501
        """Retrieve a transformation  # noqa: E501

        Retrieve a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transform_with_http_info(import_id, task_id, transform_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str transform_id: The ID of the transform (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \"self\" or \"none\", depending on the request.
        :return: Transform
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'transform_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `get_transform`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `get_transform`")  # noqa: E501
        # verify the required parameter 'transform_id' is set
        if self.api_client.client_side_validation and ('transform_id' not in params or
                                                       params['transform_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform_id` when calling `get_transform`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'transform_id' in params:
            path_params['transformId'] = params['transform_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/transforms/{transformId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transform',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transforms(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve transformation list  # noqa: E501

        Retrieve the list of transformations of a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transforms(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \"self\" or \"none\", depending on the request.
        :return: Transforms
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transforms_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transforms_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_transforms_with_http_info(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve transformation list  # noqa: E501

        Retrieve the list of transformations of a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transforms_with_http_info(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \"self\" or \"none\", depending on the request.
        :return: Transforms
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transforms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `get_transforms`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `get_transforms`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/transforms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transforms',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_transform(self, import_id, task_id, transform_body, **kwargs):  # noqa: E501
        """Create a new transformation  # noqa: E501

        Create a new transformation and append it inside a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_transform(import_id, task_id, transform_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param Transform transform_body: The transform to add. (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \"self\" or \"none\", depending on the request.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_transform_with_http_info(import_id, task_id, transform_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_transform_with_http_info(import_id, task_id, transform_body, **kwargs)  # noqa: E501
            return data

    def post_transform_with_http_info(self, import_id, task_id, transform_body, **kwargs):  # noqa: E501
        """Create a new transformation  # noqa: E501

        Create a new transformation and append it inside a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_transform_with_http_info(import_id, task_id, transform_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param Transform transform_body: The transform to add. (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \"self\" or \"none\", depending on the request.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'transform_body', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_transform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `post_transform`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `post_transform`")  # noqa: E501
        # verify the required parameter 'transform_body' is set
        if self.api_client.client_side_validation and ('transform_body' not in params or
                                                       params['transform_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform_body` when calling `post_transform`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transform_body' in params:
            body_params = params['transform_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/transforms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_transform(self, import_id, task_id, transform_id, transform_body, **kwargs):  # noqa: E501
        """Modifies a transformation  # noqa: E501

        Modifies the definition of a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_transform(import_id, task_id, transform_id, transform_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str transform_id: The ID of the transform (required)
        :param Transform transform_body: The transform to add. (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \"self\" or \"none\", depending on the request.
        :return: Transform
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_transform_with_http_info(import_id, task_id, transform_id, transform_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_transform_with_http_info(import_id, task_id, transform_id, transform_body, **kwargs)  # noqa: E501
            return data

    def put_transform_with_http_info(self, import_id, task_id, transform_id, transform_body, **kwargs):  # noqa: E501
        """Modifies a transformation  # noqa: E501

        Modifies the definition of a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_transform_with_http_info(import_id, task_id, transform_id, transform_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str transform_id: The ID of the transform (required)
        :param Transform transform_body: The transform to add. (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \"self\" or \"none\", depending on the request.
        :return: Transform
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'transform_id', 'transform_body', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_transform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `put_transform`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `put_transform`")  # noqa: E501
        # verify the required parameter 'transform_id' is set
        if self.api_client.client_side_validation and ('transform_id' not in params or
                                                       params['transform_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform_id` when calling `put_transform`")  # noqa: E501
        # verify the required parameter 'transform_body' is set
        if self.api_client.client_side_validation and ('transform_body' not in params or
                                                       params['transform_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform_body` when calling `put_transform`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'transform_id' in params:
            path_params['transformId'] = params['transform_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transform_body' in params:
            body_params = params['transform_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/transforms/{transformId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transform',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
