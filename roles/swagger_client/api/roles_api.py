# coding: utf-8

"""
    Roles

    Organisation of security roles  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RolesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def role_default_delete(self, role, **kwargs):  # noqa: E501
        """Delete a role  # noqa: E501

        Delete a role in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_delete(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_default_delete_with_http_info(role, **kwargs)  # noqa: E501
        else:
            (data) = self.role_default_delete_with_http_info(role, **kwargs)  # noqa: E501
            return data

    def role_default_delete_with_http_info(self, role, **kwargs):  # noqa: E501
        """Delete a role  # noqa: E501

        Delete a role in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_delete_with_http_info(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_default_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_default_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/role/{role}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_default_group_delete(self, role, group, **kwargs):  # noqa: E501
        """Disassociate a role from a group  # noqa: E501

        Disassociate a role in the default role service with a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_group_delete(role, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_default_group_delete_with_http_info(role, group, **kwargs)  # noqa: E501
        else:
            (data) = self.role_default_group_delete_with_http_info(role, group, **kwargs)  # noqa: E501
            return data

    def role_default_group_delete_with_http_info(self, role, group, **kwargs):  # noqa: E501
        """Disassociate a role from a group  # noqa: E501

        Disassociate a role in the default role service with a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_group_delete_with_http_info(role, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_default_group_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_default_group_delete`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `role_default_group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/role/{role}/group/{group}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_default_group_post(self, role, group, **kwargs):  # noqa: E501
        """Associate a role with a group  # noqa: E501

        Associate an existing role in the default role service with a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_group_post(role, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_default_group_post_with_http_info(role, group, **kwargs)  # noqa: E501
        else:
            (data) = self.role_default_group_post_with_http_info(role, group, **kwargs)  # noqa: E501
            return data

    def role_default_group_post_with_http_info(self, role, group, **kwargs):  # noqa: E501
        """Associate a role with a group  # noqa: E501

        Associate an existing role in the default role service with a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_group_post_with_http_info(role, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_default_group_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_default_group_post`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `role_default_group_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/role/{role}/group/{group}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_default_post(self, role, **kwargs):  # noqa: E501
        """Add a role  # noqa: E501

        Add a role in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_post(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_default_post_with_http_info(role, **kwargs)  # noqa: E501
        else:
            (data) = self.role_default_post_with_http_info(role, **kwargs)  # noqa: E501
            return data

    def role_default_post_with_http_info(self, role, **kwargs):  # noqa: E501
        """Add a role  # noqa: E501

        Add a role in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_post_with_http_info(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_default_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_default_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/role/{role}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_default_user_delete(self, role, user, **kwargs):  # noqa: E501
        """Disassociate a role from a user  # noqa: E501

        Disassociate a role in the default role service with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_user_delete(role, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_default_user_delete_with_http_info(role, user, **kwargs)  # noqa: E501
        else:
            (data) = self.role_default_user_delete_with_http_info(role, user, **kwargs)  # noqa: E501
            return data

    def role_default_user_delete_with_http_info(self, role, user, **kwargs):  # noqa: E501
        """Disassociate a role from a user  # noqa: E501

        Disassociate a role in the default role service with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_user_delete_with_http_info(role, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_default_user_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_default_user_delete`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `role_default_user_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/role/{role}/user/{user}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_default_user_post(self, role, user, **kwargs):  # noqa: E501
        """Associate a role with a user  # noqa: E501

        Associate an existing role in the default role service with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_user_post(role, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_default_user_post_with_http_info(role, user, **kwargs)  # noqa: E501
        else:
            (data) = self.role_default_user_post_with_http_info(role, user, **kwargs)  # noqa: E501
            return data

    def role_default_user_post_with_http_info(self, role, user, **kwargs):  # noqa: E501
        """Associate a role with a user  # noqa: E501

        Associate an existing role in the default role service with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_default_user_post_with_http_info(role, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: the name of the role (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_default_user_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_default_user_post`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `role_default_user_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/role/{role}/user/{user}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_delete(self, service_name, role, **kwargs):  # noqa: E501
        """Delete a role  # noqa: E501

        Delete a role in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_delete(service_name, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_delete_with_http_info(service_name, role, **kwargs)  # noqa: E501
        else:
            (data) = self.role_delete_with_http_info(service_name, role, **kwargs)  # noqa: E501
            return data

    def role_delete_with_http_info(self, service_name, role, **kwargs):  # noqa: E501
        """Delete a role  # noqa: E501

        Delete a role in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_delete_with_http_info(service_name, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `role_delete`")  # noqa: E501
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/{serviceName}/role/{role}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_group_delete(self, service_name, role, group, **kwargs):  # noqa: E501
        """Disassociate a role from a group  # noqa: E501

        Disassociate a role in a particular role service with a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_group_delete(service_name, role, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_group_delete_with_http_info(service_name, role, group, **kwargs)  # noqa: E501
        else:
            (data) = self.role_group_delete_with_http_info(service_name, role, group, **kwargs)  # noqa: E501
            return data

    def role_group_delete_with_http_info(self, service_name, role, group, **kwargs):  # noqa: E501
        """Disassociate a role from a group  # noqa: E501

        Disassociate a role in a particular role service with a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_group_delete_with_http_info(service_name, role, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'role', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_group_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `role_group_delete`")  # noqa: E501
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_group_delete`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `role_group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/{serviceName}/roles/role/{role}/group/{group}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_group_post(self, service_name, role, group, **kwargs):  # noqa: E501
        """Associate a role with a group  # noqa: E501

        Associate an existing role in a particular role service with a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_group_post(service_name, role, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_group_post_with_http_info(service_name, role, group, **kwargs)  # noqa: E501
        else:
            (data) = self.role_group_post_with_http_info(service_name, role, group, **kwargs)  # noqa: E501
            return data

    def role_group_post_with_http_info(self, service_name, role, group, **kwargs):  # noqa: E501
        """Associate a role with a group  # noqa: E501

        Associate an existing role in a particular role service with a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_group_post_with_http_info(service_name, role, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'role', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_group_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `role_group_post`")  # noqa: E501
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_group_post`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `role_group_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/{serviceName}/roles/role/{role}/group/{group}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_post(self, service_name, role, **kwargs):  # noqa: E501
        """Add a role  # noqa: E501

        Add a role in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_post(service_name, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_post_with_http_info(service_name, role, **kwargs)  # noqa: E501
        else:
            (data) = self.role_post_with_http_info(service_name, role, **kwargs)  # noqa: E501
            return data

    def role_post_with_http_info(self, service_name, role, **kwargs):  # noqa: E501
        """Add a role  # noqa: E501

        Add a role in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_post_with_http_info(service_name, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `role_post`")  # noqa: E501
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/{serviceName}/role/{role}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_user_delete(self, service_name, role, user, **kwargs):  # noqa: E501
        """Disassociate a role from a user  # noqa: E501

        Disassociate a role in a particular role service with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_user_delete(service_name, role, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_user_delete_with_http_info(service_name, role, user, **kwargs)  # noqa: E501
        else:
            (data) = self.role_user_delete_with_http_info(service_name, role, user, **kwargs)  # noqa: E501
            return data

    def role_user_delete_with_http_info(self, service_name, role, user, **kwargs):  # noqa: E501
        """Disassociate a role from a user  # noqa: E501

        Disassociate a role in a particular role service with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_user_delete_with_http_info(service_name, role, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'role', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_user_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `role_user_delete`")  # noqa: E501
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_user_delete`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `role_user_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/{serviceName}/roles/role/{role}/user/{user}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_user_post(self, service_name, role, user, **kwargs):  # noqa: E501
        """Associate a role with a user  # noqa: E501

        Associate an existing role in a particular role service with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_user_post(service_name, role, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.role_user_post_with_http_info(service_name, role, user, **kwargs)  # noqa: E501
        else:
            (data) = self.role_user_post_with_http_info(service_name, role, user, **kwargs)  # noqa: E501
            return data

    def role_user_post_with_http_info(self, service_name, role, user, **kwargs):  # noqa: E501
        """Associate a role with a user  # noqa: E501

        Associate an existing role in a particular role service with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.role_user_post_with_http_info(service_name, role, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role service (required)
        :param str role: the name of the role (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'role', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_user_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `role_user_post`")  # noqa: E501
        # verify the required parameter 'role' is set
        if self.api_client.client_side_validation and ('role' not in params or
                                                       params['role'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role` when calling `role_user_post`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `role_user_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/{serviceName}/roles/role/{role}/user/{user}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roles_default_get(self, **kwargs):  # noqa: E501
        """Query all roles  # noqa: E501

        Query all roles in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_default_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roles_default_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.roles_default_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def roles_default_get_with_http_info(self, **kwargs):  # noqa: E501
        """Query all roles  # noqa: E501

        Query all roles in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_default_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roles_default_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roles_default_group_get(self, group, **kwargs):  # noqa: E501
        """Query all roles for group  # noqa: E501

        Query all roles for the group in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_default_group_get(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: the name of the group (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roles_default_group_get_with_http_info(group, **kwargs)  # noqa: E501
        else:
            (data) = self.roles_default_group_get_with_http_info(group, **kwargs)  # noqa: E501
            return data

    def roles_default_group_get_with_http_info(self, group, **kwargs):  # noqa: E501
        """Query all roles for group  # noqa: E501

        Query all roles for the group in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_default_group_get_with_http_info(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: the name of the group (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roles_default_group_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `roles_default_group_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/group/{group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roles_default_user_get(self, user, **kwargs):  # noqa: E501
        """Query all roles for user  # noqa: E501

        Query all roles for the user in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_default_user_get(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roles_default_user_get_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.roles_default_user_get_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def roles_default_user_get_with_http_info(self, user, **kwargs):  # noqa: E501
        """Query all roles for user  # noqa: E501

        Query all roles for the user in the default role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_default_user_get_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roles_default_user_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `roles_default_user_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/user/{user}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roles_get(self, service_name, **kwargs):  # noqa: E501
        """Query all roles  # noqa: E501

        Query all roles in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_get(service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role role service (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roles_get_with_http_info(service_name, **kwargs)  # noqa: E501
        else:
            (data) = self.roles_get_with_http_info(service_name, **kwargs)  # noqa: E501
            return data

    def roles_get_with_http_info(self, service_name, **kwargs):  # noqa: E501
        """Query all roles  # noqa: E501

        Query all roles in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_get_with_http_info(service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role role service (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `roles_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/service/{serviceName}/roles/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roles_group_get(self, service_name, group, **kwargs):  # noqa: E501
        """Query all roles for group  # noqa: E501

        Query all roles for the group in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_group_get(service_name, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role role service (required)
        :param str group: the name of the group (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roles_group_get_with_http_info(service_name, group, **kwargs)  # noqa: E501
        else:
            (data) = self.roles_group_get_with_http_info(service_name, group, **kwargs)  # noqa: E501
            return data

    def roles_group_get_with_http_info(self, service_name, group, **kwargs):  # noqa: E501
        """Query all roles for group  # noqa: E501

        Query all roles for the group in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_group_get_with_http_info(service_name, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role role service (required)
        :param str group: the name of the group (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roles_group_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `roles_group_get`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `roles_group_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/service/{serviceName}/group/{group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roles_user_get(self, service_name, user, **kwargs):  # noqa: E501
        """Query all roles for user  # noqa: E501

        Query all roles for the user in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_user_get(service_name, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role role service (required)
        :param str user: the name of the user (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roles_user_get_with_http_info(service_name, user, **kwargs)  # noqa: E501
        else:
            (data) = self.roles_user_get_with_http_info(service_name, user, **kwargs)  # noqa: E501
            return data

    def roles_user_get_with_http_info(self, service_name, user, **kwargs):  # noqa: E501
        """Query all roles for user  # noqa: E501

        Query all roles for the user in a particular role service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roles_user_get_with_http_info(service_name, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the role role service (required)
        :param str user: the name of the user (required)
        :return: Roles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roles_user_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `roles_user_get`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `roles_user_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/roles/service/{serviceName}/user/{user}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Roles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
