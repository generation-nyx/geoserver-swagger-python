# coding: utf-8

"""
    GeoServer Resources

    A resource is any item in the data directory that does not represent configuration. Typical resources include styles and icons.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ResourceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_delete(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_delete  # noqa: E501

        Delete a resource (recursively if directory)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_delete(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_delete_with_http_info(path_to_resource, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_delete_with_http_info(path_to_resource, **kwargs)  # noqa: E501
            return data

    def resource_delete_with_http_info(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_delete  # noqa: E501

        Delete a resource (recursively if directory)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_delete_with_http_info(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_to_resource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_to_resource' is set
        if self.api_client.client_side_validation and ('path_to_resource' not in params or
                                                       params['path_to_resource'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_to_resource` when calling `resource_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_to_resource' in params:
            path_params['pathToResource'] = params['path_to_resource']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/{pathToResource}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_get(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_get  # noqa: E501

        Download a resource, list contents of directory, or show formatted resource metadata.  Response content depends upon parameters.  With `operation=default`, if the request is made against a non-directory resource, the content of the resource is returned.  For example, `/resource/styles/default_point.sld?operation=default`  ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> <StyledLayerDescriptor version=\"1.0.0\"   xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"   xmlns=\"http://www.opengis.net/sld\"   xmlns:ogc=\"http://www.opengis.net/ogc\"   xmlns:xlink=\"http://www.w3.org/1999/xlink\"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">   <!-- a Named Layer is the basic building block of an SLD document -->   <NamedLayer>     <Name>default_point</Name>     <UserStyle>     <!-- Styles can have names, titles and abstracts -->       <Title>Default Point</Title>       <Abstract>A sample style that draws a point</Abstract>       <!-- FeatureTypeStyles describe how to render different features -->       <!-- A FeatureTypeStyle for rendering points -->       <FeatureTypeStyle>         <Rule>           <Name>rule1</Name>           <Title>Red Square</Title>           <Abstract>A 6 pixel square with a red fill and no stroke</Abstract>             <PointSymbolizer>               <Graphic>                 <Mark>                   <WellKnownName>square</WellKnownName>                   <Fill>                     <CssParameter name=\"fill\">#FF0000</CssParameter>                   </Fill>                 </Mark>               <Size>6</Size>             </Graphic>           </PointSymbolizer>         </Rule>       </FeatureTypeStyle>     </UserStyle>   </NamedLayer> </StyledLayerDescriptor> ```  If the request is made against a directory resource, a \"ResourceDirectory\" response is returned, containing information about the directory and its children. Examples:  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=xml`   ```   <ResourceDirectory>     <name>logs</name>     <parent>       <path>/</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-09-15 18:50:54.0 UTC</lastModified>     <children>       <child>         <name>DEFAULT_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.1</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.2</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOSERVER_DEVELOPER_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOTOOLS_DEVELOPER_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>PRODUCTION_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>QUIET_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>TEST_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>VERBOSE_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>     </children>   </ResourceDirectory>   ```  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=json`   ```   {\"ResourceDirectory\":{\"name\":\"logs\",\"parent\":{\"path\":\"/\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-09-15 18:50:54.0 UTC\",\"children\":{\"child\":[{\"name\":\"DEFAULT_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.1\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.2\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOSERVER_DEVELOPER_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOTOOLS_DEVELOPER_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"PRODUCTION_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"QUIET_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"TEST_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"VERBOSE_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}}]}}}   ```  With `operation=metadata`, a \"ResourceMetadata\" object is returned. If the resource is a directory, this metadata object will not list the children of the directory. Examples:  - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=xml`   ```   <ResourceMetadata>     <name>default_point.sld</name>     <parent>       <path>/styles</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/styles\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-01-18 19:02:38.0 UTC</lastModified>     <type>resource</type>   </ResourceMetadata>   ``` - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=json`   ```   {\"ResourceMetadata\":{\"name\":\"default_point.sld\",\"parent\":{\"path\":\"/styles\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/styles\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-01-18 19:02:38.0 UTC\",\"type\":\"resource\"}}   ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_get(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :param str operation: The type of GET operation. `default` returns a list of the contained resources in the case of a directory resource, or the actual resource contents in the case of a resource resource.`metadata` requests a metadata summary of the resource.
        :param str format: The format of the response. Only applicable for the `metadata` operation, or for a directory resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_get_with_http_info(path_to_resource, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_get_with_http_info(path_to_resource, **kwargs)  # noqa: E501
            return data

    def resource_get_with_http_info(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_get  # noqa: E501

        Download a resource, list contents of directory, or show formatted resource metadata.  Response content depends upon parameters.  With `operation=default`, if the request is made against a non-directory resource, the content of the resource is returned.  For example, `/resource/styles/default_point.sld?operation=default`  ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> <StyledLayerDescriptor version=\"1.0.0\"   xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"   xmlns=\"http://www.opengis.net/sld\"   xmlns:ogc=\"http://www.opengis.net/ogc\"   xmlns:xlink=\"http://www.w3.org/1999/xlink\"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">   <!-- a Named Layer is the basic building block of an SLD document -->   <NamedLayer>     <Name>default_point</Name>     <UserStyle>     <!-- Styles can have names, titles and abstracts -->       <Title>Default Point</Title>       <Abstract>A sample style that draws a point</Abstract>       <!-- FeatureTypeStyles describe how to render different features -->       <!-- A FeatureTypeStyle for rendering points -->       <FeatureTypeStyle>         <Rule>           <Name>rule1</Name>           <Title>Red Square</Title>           <Abstract>A 6 pixel square with a red fill and no stroke</Abstract>             <PointSymbolizer>               <Graphic>                 <Mark>                   <WellKnownName>square</WellKnownName>                   <Fill>                     <CssParameter name=\"fill\">#FF0000</CssParameter>                   </Fill>                 </Mark>               <Size>6</Size>             </Graphic>           </PointSymbolizer>         </Rule>       </FeatureTypeStyle>     </UserStyle>   </NamedLayer> </StyledLayerDescriptor> ```  If the request is made against a directory resource, a \"ResourceDirectory\" response is returned, containing information about the directory and its children. Examples:  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=xml`   ```   <ResourceDirectory>     <name>logs</name>     <parent>       <path>/</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-09-15 18:50:54.0 UTC</lastModified>     <children>       <child>         <name>DEFAULT_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.1</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.2</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOSERVER_DEVELOPER_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOTOOLS_DEVELOPER_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>PRODUCTION_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>QUIET_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>TEST_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>VERBOSE_LOGGING.xml</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.xml\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>     </children>   </ResourceDirectory>   ```  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=json`   ```   {\"ResourceDirectory\":{\"name\":\"logs\",\"parent\":{\"path\":\"/\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-09-15 18:50:54.0 UTC\",\"children\":{\"child\":[{\"name\":\"DEFAULT_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.1\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.2\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOSERVER_DEVELOPER_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOTOOLS_DEVELOPER_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"PRODUCTION_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"QUIET_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"TEST_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"VERBOSE_LOGGING.xml\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.xml\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}}]}}}   ```  With `operation=metadata`, a \"ResourceMetadata\" object is returned. If the resource is a directory, this metadata object will not list the children of the directory. Examples:  - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=xml`   ```   <ResourceMetadata>     <name>default_point.sld</name>     <parent>       <path>/styles</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/styles\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-01-18 19:02:38.0 UTC</lastModified>     <type>resource</type>   </ResourceMetadata>   ``` - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=json`   ```   {\"ResourceMetadata\":{\"name\":\"default_point.sld\",\"parent\":{\"path\":\"/styles\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/styles\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-01-18 19:02:38.0 UTC\",\"type\":\"resource\"}}   ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_get_with_http_info(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :param str operation: The type of GET operation. `default` returns a list of the contained resources in the case of a directory resource, or the actual resource contents in the case of a resource resource.`metadata` requests a metadata summary of the resource.
        :param str format: The format of the response. Only applicable for the `metadata` operation, or for a directory resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_to_resource', 'operation', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_to_resource' is set
        if self.api_client.client_side_validation and ('path_to_resource' not in params or
                                                       params['path_to_resource'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_to_resource` when calling `resource_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_to_resource' in params:
            path_params['pathToResource'] = params['path_to_resource']  # noqa: E501

        query_params = []
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/plain', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/{pathToResource}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_head(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_head  # noqa: E501

        Show resource metadata in HTTP headers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_head(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_head_with_http_info(path_to_resource, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_head_with_http_info(path_to_resource, **kwargs)  # noqa: E501
            return data

    def resource_head_with_http_info(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_head  # noqa: E501

        Show resource metadata in HTTP headers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_head_with_http_info(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_to_resource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_to_resource' is set
        if self.api_client.client_side_validation and ('path_to_resource' not in params or
                                                       params['path_to_resource'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_to_resource` when calling `resource_head`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_to_resource' in params:
            path_params['pathToResource'] = params['path_to_resource']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/{pathToResource}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_post(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_post  # noqa: E501

        Invalid. Use PUT to create a resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_post(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_post_with_http_info(path_to_resource, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_post_with_http_info(path_to_resource, **kwargs)  # noqa: E501
            return data

    def resource_post_with_http_info(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_post  # noqa: E501

        Invalid. Use PUT to create a resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_post_with_http_info(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_to_resource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_to_resource' is set
        if self.api_client.client_side_validation and ('path_to_resource' not in params or
                                                       params['path_to_resource'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_to_resource` when calling `resource_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_to_resource' in params:
            path_params['pathToResource'] = params['path_to_resource']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/{pathToResource}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_put(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_put  # noqa: E501

        Upload/move/copy a resource, create directories on the fly (overwrite if exists). For move/copy operations, place source path in body. Copying is not supported for directories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_put(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :param str operation: The type of PUT operation. `default` creates a new resource or alters an existing resource. `move` moves the resource to a new location. `copy` duplicates the resource to a new location
        :param str resource_body: The content of the resource to upload. In the case of a `move` or `copy` operation, this is instead the path to the source resource to move/copy from.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_put_with_http_info(path_to_resource, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_put_with_http_info(path_to_resource, **kwargs)  # noqa: E501
            return data

    def resource_put_with_http_info(self, path_to_resource, **kwargs):  # noqa: E501
        """resource_put  # noqa: E501

        Upload/move/copy a resource, create directories on the fly (overwrite if exists). For move/copy operations, place source path in body. Copying is not supported for directories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_put_with_http_info(path_to_resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_to_resource: The full path to the resource. Required, but may be empty; a request to `/resource` references the top level resource directory. (required)
        :param str operation: The type of PUT operation. `default` creates a new resource or alters an existing resource. `move` moves the resource to a new location. `copy` duplicates the resource to a new location
        :param str resource_body: The content of the resource to upload. In the case of a `move` or `copy` operation, this is instead the path to the source resource to move/copy from.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_to_resource', 'operation', 'resource_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_to_resource' is set
        if self.api_client.client_side_validation and ('path_to_resource' not in params or
                                                       params['path_to_resource'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_to_resource` when calling `resource_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_to_resource' in params:
            path_params['pathToResource'] = params['path_to_resource']  # noqa: E501

        query_params = []
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resource_body' in params:
            body_params = params['resource_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/{pathToResource}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
