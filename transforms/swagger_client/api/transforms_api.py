# coding: utf-8

"""
    GeoServer XSLT transforms

    A transform contains a style sheet that can be used to generate a new textual output format of user choosing for WFS  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TransformsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_tranform(self, transform, **kwargs):  # noqa: E501
        """Delete transformation  # noqa: E501

        Deletes a transformation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tranform(transform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transform: Name of the transformation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tranform_with_http_info(transform, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tranform_with_http_info(transform, **kwargs)  # noqa: E501
            return data

    def delete_tranform_with_http_info(self, transform, **kwargs):  # noqa: E501
        """Delete transformation  # noqa: E501

        Deletes a transformation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tranform_with_http_info(transform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transform: Name of the transformation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tranform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transform' is set
        if self.api_client.client_side_validation and ('transform' not in params or
                                                       params['transform'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform` when calling `delete_tranform`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transform' in params:
            path_params['transform'] = params['transform']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/transforms/{transform}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_transform(self, **kwargs):  # noqa: E501
        """delete_transform  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transform(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_transform_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_transform_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_transform_with_http_info(self, **kwargs):  # noqa: E501
        """delete_transform  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transform_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_transform" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/transforms', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transform(self, transform, **kwargs):  # noqa: E501
        """Retrieve a transformation.  # noqa: E501

        Retrieves a single transformation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transform(transform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transform: Name of the transformation. (required)
        :return: Transform
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transform_with_http_info(transform, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transform_with_http_info(transform, **kwargs)  # noqa: E501
            return data

    def get_transform_with_http_info(self, transform, **kwargs):  # noqa: E501
        """Retrieve a transformation.  # noqa: E501

        Retrieves a single transformation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transform_with_http_info(transform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transform: Name of the transformation. (required)
        :return: Transform
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transform' is set
        if self.api_client.client_side_validation and ('transform' not in params or
                                                       params['transform'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform` when calling `get_transform`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transform' in params:
            path_params['transform'] = params['transform']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/xslt+xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/transforms/{transform}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transform',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transforms(self, **kwargs):  # noqa: E501
        """List available transformations.  # noqa: E501

        Displays a list of all the transforms information available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transforms(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TransformList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transforms_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_transforms_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_transforms_with_http_info(self, **kwargs):  # noqa: E501
        """List available transformations.  # noqa: E501

        Displays a list of all the transforms information available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transforms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TransformList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transforms" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/transforms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransformList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tranform(self, **kwargs):  # noqa: E501
        """post_tranform  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tranform(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tranform_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tranform_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tranform_with_http_info(self, **kwargs):  # noqa: E501
        """post_tranform  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tranform_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tranform" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/transforms/{transform}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_transform(self, transform_body, **kwargs):  # noqa: E501
        """Add a new transform  # noqa: E501

        Adds a new transform to the server. If the content type used is application/xml the server will assume a <transform> definition is being posted, and the XSLT will have to be uploaded separately using a PUT request with content type application/xslt+xml against the transformation resource. If the content type used is application/xslt+xml the server will assume the XSLT itself is being posted, and the name, sourceFormat, outputFormat, outputMimeType query parameters will be used to fill in the transform configuration instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_transform(transform_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Transform transform_body: Transform body to upload. (required)
        :param str name: Name of the transformation.
        :param str source_format: Source format of the transformation.
        :param str output_format: Output format of the transformation.
        :param str output_mime_type: Output mime type of the transformation.
        :param str file_extension: The extension of the file generated by the transformation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_transform_with_http_info(transform_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_transform_with_http_info(transform_body, **kwargs)  # noqa: E501
            return data

    def post_transform_with_http_info(self, transform_body, **kwargs):  # noqa: E501
        """Add a new transform  # noqa: E501

        Adds a new transform to the server. If the content type used is application/xml the server will assume a <transform> definition is being posted, and the XSLT will have to be uploaded separately using a PUT request with content type application/xslt+xml against the transformation resource. If the content type used is application/xslt+xml the server will assume the XSLT itself is being posted, and the name, sourceFormat, outputFormat, outputMimeType query parameters will be used to fill in the transform configuration instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_transform_with_http_info(transform_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Transform transform_body: Transform body to upload. (required)
        :param str name: Name of the transformation.
        :param str source_format: Source format of the transformation.
        :param str output_format: Output format of the transformation.
        :param str output_mime_type: Output mime type of the transformation.
        :param str file_extension: The extension of the file generated by the transformation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transform_body', 'name', 'source_format', 'output_format', 'output_mime_type', 'file_extension']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_transform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transform_body' is set
        if self.api_client.client_side_validation and ('transform_body' not in params or
                                                       params['transform_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform_body` when calling `post_transform`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'source_format' in params:
            query_params.append(('sourceFormat', params['source_format']))  # noqa: E501
        if 'output_format' in params:
            query_params.append(('outputFormat', params['output_format']))  # noqa: E501
        if 'output_mime_type' in params:
            query_params.append(('outputMimeType', params['output_mime_type']))  # noqa: E501
        if 'file_extension' in params:
            query_params.append(('fileExtension', params['file_extension']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transform_body' in params:
            body_params = params['transform_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/xslt+xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/transforms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_tranform(self, transform_body, transform, **kwargs):  # noqa: E501
        """Modify a single transform  # noqa: E501

        Modifies a single transform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_tranform(transform_body, transform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Transform transform_body: Transform body to upload. (required)
        :param str transform: Name of the transformation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_tranform_with_http_info(transform_body, transform, **kwargs)  # noqa: E501
        else:
            (data) = self.put_tranform_with_http_info(transform_body, transform, **kwargs)  # noqa: E501
            return data

    def put_tranform_with_http_info(self, transform_body, transform, **kwargs):  # noqa: E501
        """Modify a single transform  # noqa: E501

        Modifies a single transform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_tranform_with_http_info(transform_body, transform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Transform transform_body: Transform body to upload. (required)
        :param str transform: Name of the transformation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transform_body', 'transform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_tranform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transform_body' is set
        if self.api_client.client_side_validation and ('transform_body' not in params or
                                                       params['transform_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform_body` when calling `put_tranform`")  # noqa: E501
        # verify the required parameter 'transform' is set
        if self.api_client.client_side_validation and ('transform' not in params or
                                                       params['transform'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transform` when calling `put_tranform`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transform' in params:
            path_params['transform'] = params['transform']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transform_body' in params:
            body_params = params['transform_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json', 'application/xslt+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/transforms/{transform}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_transform(self, **kwargs):  # noqa: E501
        """put_transform  # noqa: E501

        Invalid. Use POST for adding a new transformation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_transform(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_transform_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_transform_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_transform_with_http_info(self, **kwargs):  # noqa: E501
        """put_transform  # noqa: E501

        Invalid. Use POST for adding a new transformation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_transform_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_transform" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/transforms', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
