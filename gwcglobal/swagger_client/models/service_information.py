# coding: utf-8

"""
    GeoWebCache Global

    Global configuration for the GeoWebCache server  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ServiceInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'keywords': 'list[str]',
        'service_provider': 'ServiceProvider',
        'fees': 'str',
        'access_constraints': 'str'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'keywords': 'keywords',
        'service_provider': 'serviceProvider',
        'fees': 'fees',
        'access_constraints': 'accessConstraints'
    }

    def __init__(self, title=None, description=None, keywords=None, service_provider=None, fees=None, access_constraints=None, _configuration=None):  # noqa: E501
        """ServiceInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._description = None
        self._keywords = None
        self._service_provider = None
        self._fees = None
        self._access_constraints = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if keywords is not None:
            self.keywords = keywords
        if service_provider is not None:
            self.service_provider = service_provider
        if fees is not None:
            self.fees = fees
        if access_constraints is not None:
            self.access_constraints = access_constraints

    @property
    def title(self):
        """Gets the title of this ServiceInformation.  # noqa: E501

        The title of the server.  # noqa: E501

        :return: The title of this ServiceInformation.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ServiceInformation.

        The title of the server.  # noqa: E501

        :param title: The title of this ServiceInformation.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this ServiceInformation.  # noqa: E501

        The description of the server.  # noqa: E501

        :return: The description of this ServiceInformation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceInformation.

        The description of the server.  # noqa: E501

        :param description: The description of this ServiceInformation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def keywords(self):
        """Gets the keywords of this ServiceInformation.  # noqa: E501

        List of keywords for the server  # noqa: E501

        :return: The keywords of this ServiceInformation.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ServiceInformation.

        List of keywords for the server  # noqa: E501

        :param keywords: The keywords of this ServiceInformation.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def service_provider(self):
        """Gets the service_provider of this ServiceInformation.  # noqa: E501


        :return: The service_provider of this ServiceInformation.  # noqa: E501
        :rtype: ServiceProvider
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider):
        """Sets the service_provider of this ServiceInformation.


        :param service_provider: The service_provider of this ServiceInformation.  # noqa: E501
        :type: ServiceProvider
        """

        self._service_provider = service_provider

    @property
    def fees(self):
        """Gets the fees of this ServiceInformation.  # noqa: E501

        Any fees associated with the server.  # noqa: E501

        :return: The fees of this ServiceInformation.  # noqa: E501
        :rtype: str
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this ServiceInformation.

        Any fees associated with the server.  # noqa: E501

        :param fees: The fees of this ServiceInformation.  # noqa: E501
        :type: str
        """

        self._fees = fees

    @property
    def access_constraints(self):
        """Gets the access_constraints of this ServiceInformation.  # noqa: E501

        Any access constraints associated with the server.  # noqa: E501

        :return: The access_constraints of this ServiceInformation.  # noqa: E501
        :rtype: str
        """
        return self._access_constraints

    @access_constraints.setter
    def access_constraints(self, access_constraints):
        """Sets the access_constraints of this ServiceInformation.

        Any access constraints associated with the server.  # noqa: E501

        :param access_constraints: The access_constraints of this ServiceInformation.  # noqa: E501
        :type: str
        """

        self._access_constraints = access_constraints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceInformation):
            return True

        return self.to_dict() != other.to_dict()
