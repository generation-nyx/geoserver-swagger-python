# coding: utf-8

"""
    GeoWebCache Global

    Global configuration for the GeoWebCache server  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ServiceContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'individual_name': 'str',
        'position_name': 'str',
        'address_type': 'str',
        'address_street': 'str',
        'address_city': 'str',
        'address_administrative_area': 'str',
        'address_postal_code': 'str',
        'address_country': 'str',
        'phone_number': 'str',
        'fax_number': 'str',
        'address_email': 'str'
    }

    attribute_map = {
        'individual_name': 'individualName',
        'position_name': 'positionName',
        'address_type': 'addressType',
        'address_street': 'addressStreet',
        'address_city': 'addressCity',
        'address_administrative_area': 'addressAdministrativeArea',
        'address_postal_code': 'addressPostalCode',
        'address_country': 'addressCountry',
        'phone_number': 'phoneNumber',
        'fax_number': 'faxNumber',
        'address_email': 'addressEmail'
    }

    def __init__(self, individual_name=None, position_name=None, address_type=None, address_street=None, address_city=None, address_administrative_area=None, address_postal_code=None, address_country=None, phone_number=None, fax_number=None, address_email=None, _configuration=None):  # noqa: E501
        """ServiceContact - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._individual_name = None
        self._position_name = None
        self._address_type = None
        self._address_street = None
        self._address_city = None
        self._address_administrative_area = None
        self._address_postal_code = None
        self._address_country = None
        self._phone_number = None
        self._fax_number = None
        self._address_email = None
        self.discriminator = None

        if individual_name is not None:
            self.individual_name = individual_name
        if position_name is not None:
            self.position_name = position_name
        if address_type is not None:
            self.address_type = address_type
        if address_street is not None:
            self.address_street = address_street
        if address_city is not None:
            self.address_city = address_city
        if address_administrative_area is not None:
            self.address_administrative_area = address_administrative_area
        if address_postal_code is not None:
            self.address_postal_code = address_postal_code
        if address_country is not None:
            self.address_country = address_country
        if phone_number is not None:
            self.phone_number = phone_number
        if fax_number is not None:
            self.fax_number = fax_number
        if address_email is not None:
            self.address_email = address_email

    @property
    def individual_name(self):
        """Gets the individual_name of this ServiceContact.  # noqa: E501

        The name of the contact.  # noqa: E501

        :return: The individual_name of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._individual_name

    @individual_name.setter
    def individual_name(self, individual_name):
        """Sets the individual_name of this ServiceContact.

        The name of the contact.  # noqa: E501

        :param individual_name: The individual_name of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._individual_name = individual_name

    @property
    def position_name(self):
        """Gets the position_name of this ServiceContact.  # noqa: E501

        The position of the contact.  # noqa: E501

        :return: The position_name of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._position_name

    @position_name.setter
    def position_name(self, position_name):
        """Sets the position_name of this ServiceContact.

        The position of the contact.  # noqa: E501

        :param position_name: The position_name of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._position_name = position_name

    @property
    def address_type(self):
        """Gets the address_type of this ServiceContact.  # noqa: E501

        The type of address, e.g. \"Work\" or \"Home\".  # noqa: E501

        :return: The address_type of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this ServiceContact.

        The type of address, e.g. \"Work\" or \"Home\".  # noqa: E501

        :param address_type: The address_type of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._address_type = address_type

    @property
    def address_street(self):
        """Gets the address_street of this ServiceContact.  # noqa: E501

        The street portion of the address.  # noqa: E501

        :return: The address_street of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._address_street

    @address_street.setter
    def address_street(self, address_street):
        """Sets the address_street of this ServiceContact.

        The street portion of the address.  # noqa: E501

        :param address_street: The address_street of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._address_street = address_street

    @property
    def address_city(self):
        """Gets the address_city of this ServiceContact.  # noqa: E501

        The city portion of the address.  # noqa: E501

        :return: The address_city of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this ServiceContact.

        The city portion of the address.  # noqa: E501

        :param address_city: The address_city of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._address_city = address_city

    @property
    def address_administrative_area(self):
        """Gets the address_administrative_area of this ServiceContact.  # noqa: E501

        The administrative area portion of the address.  # noqa: E501

        :return: The address_administrative_area of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._address_administrative_area

    @address_administrative_area.setter
    def address_administrative_area(self, address_administrative_area):
        """Sets the address_administrative_area of this ServiceContact.

        The administrative area portion of the address.  # noqa: E501

        :param address_administrative_area: The address_administrative_area of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._address_administrative_area = address_administrative_area

    @property
    def address_postal_code(self):
        """Gets the address_postal_code of this ServiceContact.  # noqa: E501

        The postal code portion of the address.  # noqa: E501

        :return: The address_postal_code of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._address_postal_code

    @address_postal_code.setter
    def address_postal_code(self, address_postal_code):
        """Sets the address_postal_code of this ServiceContact.

        The postal code portion of the address.  # noqa: E501

        :param address_postal_code: The address_postal_code of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._address_postal_code = address_postal_code

    @property
    def address_country(self):
        """Gets the address_country of this ServiceContact.  # noqa: E501

        The country portion of the address.  # noqa: E501

        :return: The address_country of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this ServiceContact.

        The country portion of the address.  # noqa: E501

        :param address_country: The address_country of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._address_country = address_country

    @property
    def phone_number(self):
        """Gets the phone_number of this ServiceContact.  # noqa: E501

        The phone number of the contact.  # noqa: E501

        :return: The phone_number of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ServiceContact.

        The phone number of the contact.  # noqa: E501

        :param phone_number: The phone_number of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def fax_number(self):
        """Gets the fax_number of this ServiceContact.  # noqa: E501

        The fax number of the contact.  # noqa: E501

        :return: The fax_number of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._fax_number

    @fax_number.setter
    def fax_number(self, fax_number):
        """Sets the fax_number of this ServiceContact.

        The fax number of the contact.  # noqa: E501

        :param fax_number: The fax_number of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._fax_number = fax_number

    @property
    def address_email(self):
        """Gets the address_email of this ServiceContact.  # noqa: E501

        The email of the contact.  # noqa: E501

        :return: The address_email of this ServiceContact.  # noqa: E501
        :rtype: str
        """
        return self._address_email

    @address_email.setter
    def address_email(self, address_email):
        """Sets the address_email of this ServiceContact.

        The email of the contact.  # noqa: E501

        :param address_email: The address_email of this ServiceContact.  # noqa: E501
        :type: str
        """

        self._address_email = address_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceContact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceContact):
            return True

        return self.to_dict() != other.to_dict()
