# coding: utf-8

"""
    GeoServer Importer Extension - Main

    The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The main endpoint manages individual import jobs. The importer extension is an optional install and may not be available on all deployments of GeoServer  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'format': 'str',
        'href': 'str',
        'location': 'str',
        'charset': 'str',
        'file': 'str',
        'prj': 'str',
        'other': 'list[str]',
        'message': 'Message'
    }

    attribute_map = {
        'type': 'type',
        'format': 'format',
        'href': 'href',
        'location': 'location',
        'charset': 'charset',
        'file': 'file',
        'prj': 'prj',
        'other': 'other',
        'message': 'message'
    }

    def __init__(self, type=None, format=None, href=None, location=None, charset=None, file=None, prj=None, other=None, message=None, _configuration=None):  # noqa: E501
        """File - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._format = None
        self._href = None
        self._location = None
        self._charset = None
        self._file = None
        self._prj = None
        self._other = None
        self._message = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if format is not None:
            self.format = format
        if href is not None:
            self.href = href
        if location is not None:
            self.location = location
        if charset is not None:
            self.charset = charset
        if file is not None:
            self.file = file
        if prj is not None:
            self.prj = prj
        if other is not None:
            self.other = other
        if message is not None:
            self.message = message

    @property
    def type(self):
        """Gets the type of this File.  # noqa: E501

        \"file\"  # noqa: E501

        :return: The type of this File.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this File.

        \"file\"  # noqa: E501

        :param type: The type of this File.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def format(self):
        """Gets the format of this File.  # noqa: E501

        Format of the file  # noqa: E501

        :return: The format of this File.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this File.

        Format of the file  # noqa: E501

        :param format: The format of this File.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def href(self):
        """Gets the href of this File.  # noqa: E501

        URL to the file endpoint  # noqa: E501

        :return: The href of this File.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this File.

        URL to the file endpoint  # noqa: E501

        :param href: The href of this File.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def location(self):
        """Gets the location of this File.  # noqa: E501

        Absolute system path to the file  # noqa: E501

        :return: The location of this File.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this File.

        Absolute system path to the file  # noqa: E501

        :param location: The location of this File.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def charset(self):
        """Gets the charset of this File.  # noqa: E501

        The charset encoding of the data  # noqa: E501

        :return: The charset of this File.  # noqa: E501
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this File.

        The charset encoding of the data  # noqa: E501

        :param charset: The charset of this File.  # noqa: E501
        :type: str
        """

        self._charset = charset

    @property
    def file(self):
        """Gets the file of this File.  # noqa: E501

        Name of the file  # noqa: E501

        :return: The file of this File.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this File.

        Name of the file  # noqa: E501

        :param file: The file of this File.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def prj(self):
        """Gets the prj of this File.  # noqa: E501

        Name of the .prj file, if applicable  # noqa: E501

        :return: The prj of this File.  # noqa: E501
        :rtype: str
        """
        return self._prj

    @prj.setter
    def prj(self, prj):
        """Sets the prj of this File.

        Name of the .prj file, if applicable  # noqa: E501

        :param prj: The prj of this File.  # noqa: E501
        :type: str
        """

        self._prj = prj

    @property
    def other(self):
        """Gets the other of this File.  # noqa: E501

        List of other files that comprise this spatial file.  # noqa: E501

        :return: The other of this File.  # noqa: E501
        :rtype: list[str]
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this File.

        List of other files that comprise this spatial file.  # noqa: E501

        :param other: The other of this File.  # noqa: E501
        :type: list[str]
        """

        self._other = other

    @property
    def message(self):
        """Gets the message of this File.  # noqa: E501


        :return: The message of this File.  # noqa: E501
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this File.


        :param message: The message of this File.  # noqa: E501
        :type: Message
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(File, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, File):
            return True

        return self.to_dict() != other.to_dict()
