# coding: utf-8

"""
    GeoServer Importer Extension - Main

    The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The main endpoint manages individual import jobs. The importer extension is an optional install and may not be available on all deployments of GeoServer  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AttributesToPointGeometryTransform(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'href': 'str',
        'lat_field': 'str',
        'lon_field': 'str'
    }

    attribute_map = {
        'type': 'type',
        'href': 'href',
        'lat_field': 'latField',
        'lon_field': 'lonField'
    }

    def __init__(self, type=None, href=None, lat_field=None, lon_field=None, _configuration=None):  # noqa: E501
        """AttributesToPointGeometryTransform - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._href = None
        self._lat_field = None
        self._lon_field = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if href is not None:
            self.href = href
        if lat_field is not None:
            self.lat_field = lat_field
        if lon_field is not None:
            self.lon_field = lon_field

    @property
    def type(self):
        """Gets the type of this AttributesToPointGeometryTransform.  # noqa: E501

        \"AttributesToPointGeometryTransform\"  # noqa: E501

        :return: The type of this AttributesToPointGeometryTransform.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttributesToPointGeometryTransform.

        \"AttributesToPointGeometryTransform\"  # noqa: E501

        :param type: The type of this AttributesToPointGeometryTransform.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def href(self):
        """Gets the href of this AttributesToPointGeometryTransform.  # noqa: E501

        URL to the transform endpoint  # noqa: E501

        :return: The href of this AttributesToPointGeometryTransform.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AttributesToPointGeometryTransform.

        URL to the transform endpoint  # noqa: E501

        :param href: The href of this AttributesToPointGeometryTransform.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def lat_field(self):
        """Gets the lat_field of this AttributesToPointGeometryTransform.  # noqa: E501

        The field used for the lattitude  # noqa: E501

        :return: The lat_field of this AttributesToPointGeometryTransform.  # noqa: E501
        :rtype: str
        """
        return self._lat_field

    @lat_field.setter
    def lat_field(self, lat_field):
        """Sets the lat_field of this AttributesToPointGeometryTransform.

        The field used for the lattitude  # noqa: E501

        :param lat_field: The lat_field of this AttributesToPointGeometryTransform.  # noqa: E501
        :type: str
        """

        self._lat_field = lat_field

    @property
    def lon_field(self):
        """Gets the lon_field of this AttributesToPointGeometryTransform.  # noqa: E501

        The field used for the longitude  # noqa: E501

        :return: The lon_field of this AttributesToPointGeometryTransform.  # noqa: E501
        :rtype: str
        """
        return self._lon_field

    @lon_field.setter
    def lon_field(self, lon_field):
        """Sets the lon_field of this AttributesToPointGeometryTransform.

        The field used for the longitude  # noqa: E501

        :param lon_field: The lon_field of this AttributesToPointGeometryTransform.  # noqa: E501
        :type: str
        """

        self._lon_field = lon_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttributesToPointGeometryTransform, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributesToPointGeometryTransform):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttributesToPointGeometryTransform):
            return True

        return self.to_dict() != other.to_dict()
