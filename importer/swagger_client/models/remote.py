# coding: utf-8

"""
    GeoServer Importer Extension - Main

    The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The main endpoint manages individual import jobs. The importer extension is an optional install and may not be available on all deployments of GeoServer  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Remote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'location': 'str',
        'username': 'str',
        'password': 'str',
        'domain': 'str'
    }

    attribute_map = {
        'type': 'type',
        'location': 'location',
        'username': 'username',
        'password': 'password',
        'domain': 'domain'
    }

    def __init__(self, type=None, location=None, username=None, password=None, domain=None, _configuration=None):  # noqa: E501
        """Remote - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._location = None
        self._username = None
        self._password = None
        self._domain = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if location is not None:
            self.location = location
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if domain is not None:
            self.domain = domain

    @property
    def type(self):
        """Gets the type of this Remote.  # noqa: E501

        \"remote\"  # noqa: E501

        :return: The type of this Remote.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Remote.

        \"remote\"  # noqa: E501

        :param type: The type of this Remote.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def location(self):
        """Gets the location of this Remote.  # noqa: E501

        The location from which to fetch the data.  # noqa: E501

        :return: The location of this Remote.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Remote.

        The location from which to fetch the data.  # noqa: E501

        :param location: The location of this Remote.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def username(self):
        """Gets the username of this Remote.  # noqa: E501

        Username required to access the data (optional).  # noqa: E501

        :return: The username of this Remote.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Remote.

        Username required to access the data (optional).  # noqa: E501

        :param username: The username of this Remote.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this Remote.  # noqa: E501

        Password required to access the data (optional).  # noqa: E501

        :return: The password of this Remote.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Remote.

        Password required to access the data (optional).  # noqa: E501

        :param password: The password of this Remote.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def domain(self):
        """Gets the domain of this Remote.  # noqa: E501

        domain of the data.  # noqa: E501

        :return: The domain of this Remote.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Remote.

        domain of the data.  # noqa: E501

        :param domain: The domain of this Remote.  # noqa: E501
        :type: str
        """

        self._domain = domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Remote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Remote):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Remote):
            return True

        return self.to_dict() != other.to_dict()
