# coding: utf-8

"""
    GeoServer Styles

    A style describes how a resource is symbolized or rendered by the Web Map Service.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StylesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_layer_styles(self, layer, **kwargs):  # noqa: E501
        """delete_layer_styles  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layer_styles(layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_layer_styles_with_http_info(layer, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_layer_styles_with_http_info(layer, **kwargs)  # noqa: E501
            return data

    def delete_layer_styles_with_http_info(self, layer, **kwargs):  # noqa: E501
        """delete_layer_styles  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layer_styles_with_http_info(layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_layer_styles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer' is set
        if self.api_client.client_side_validation and ('layer' not in params or
                                                       params['layer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer` when calling `delete_layer_styles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer' in params:
            path_params['layer'] = params['layer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/layers/{layer}/styles', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_style(self, style, **kwargs):  # noqa: E501
        """Delete style  # noqa: E501

        Deletes a style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_style(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to delete. (required)
        :param bool purge: Specifies whether the underlying file containing the style should be deleted on disk.
        :param bool recurse: Removes references to the specified style in existing layers.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_style_with_http_info(style, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_style_with_http_info(style, **kwargs)  # noqa: E501
            return data

    def delete_style_with_http_info(self, style, **kwargs):  # noqa: E501
        """Delete style  # noqa: E501

        Deletes a style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_style_with_http_info(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to delete. (required)
        :param bool purge: Specifies whether the underlying file containing the style should be deleted on disk.
        :param bool recurse: Removes references to the specified style in existing layers.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['style', 'purge', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'style' is set
        if self.api_client.client_side_validation and ('style' not in params or
                                                       params['style'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style` when calling `delete_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []
        if 'purge' in params:
            query_params.append(('purge', params['purge']))  # noqa: E501
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/styles/{style}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_styles(self, **kwargs):  # noqa: E501
        """delete_styles  # noqa: E501

        Invalid. Use /styles/{style} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_styles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_styles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_styles_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_styles_with_http_info(self, **kwargs):  # noqa: E501
        """delete_styles  # noqa: E501

        Invalid. Use /styles/{style} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_styles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_styles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/styles', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workspace_style(self, workspace, style, **kwargs):  # noqa: E501
        """Delete style in a given workspace  # noqa: E501

        Deletes a style in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_style(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to delete. (required)
        :param bool purge: Specifies whether the underlying file containing the style should be deleted on disk.
        :param bool recurse: Removes references to the specified style in existing layers.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workspace_style_with_http_info(workspace, style, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_style_with_http_info(workspace, style, **kwargs)  # noqa: E501
            return data

    def delete_workspace_style_with_http_info(self, workspace, style, **kwargs):  # noqa: E501
        """Delete style in a given workspace  # noqa: E501

        Deletes a style in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_style_with_http_info(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to delete. (required)
        :param bool purge: Specifies whether the underlying file containing the style should be deleted on disk.
        :param bool recurse: Removes references to the specified style in existing layers.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'style', 'purge', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workspace_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_workspace_style`")  # noqa: E501
        # verify the required parameter 'style' is set
        if self.api_client.client_side_validation and ('style' not in params or
                                                       params['style'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style` when calling `delete_workspace_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []
        if 'purge' in params:
            query_params.append(('purge', params['purge']))  # noqa: E501
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/workspaces/{workspace}/styles/{style}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workspace_styles(self, workspace, **kwargs):  # noqa: E501
        """delete_workspace_styles  # noqa: E501

        Invalid. Use /workspaces/{workspace}/styles/{style} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_styles(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workspace_styles_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_styles_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def delete_workspace_styles_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """delete_workspace_styles  # noqa: E501

        Invalid. Use /workspaces/{workspace}/styles/{style} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_styles_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workspace_styles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_workspace_styles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layer_styles(self, layer, **kwargs):  # noqa: E501
        """Get a list of layer alternate styles  # noqa: E501

        Displays a list of all alternate styles for a given layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layer_styles(layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :return: StyleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layer_styles_with_http_info(layer, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layer_styles_with_http_info(layer, **kwargs)  # noqa: E501
            return data

    def get_layer_styles_with_http_info(self, layer, **kwargs):  # noqa: E501
        """Get a list of layer alternate styles  # noqa: E501

        Displays a list of all alternate styles for a given layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layer_styles_with_http_info(layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :return: StyleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layer_styles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer' is set
        if self.api_client.client_side_validation and ('layer' not in params or
                                                       params['layer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer` when calling `get_layer_styles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer' in params:
            path_params['layer'] = params['layer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/layers/{layer}/styles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StyleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_style(self, style, **kwargs):  # noqa: E501
        """Retrieve a style  # noqa: E501

        Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Be aware that by default, if extension is specified, it will override media type. For example if you use SLD 1.1.0 style and specify .sld extension (which provides SLD 1.0.0 result), but use application/vnd.ogc.se+xml media type (which provides SLD 1.1.0 result), response still will be presented in sld version 1.0.0 Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_style(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to retrieve. (required)
        :return: Style
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_style_with_http_info(style, **kwargs)  # noqa: E501
        else:
            (data) = self.get_style_with_http_info(style, **kwargs)  # noqa: E501
            return data

    def get_style_with_http_info(self, style, **kwargs):  # noqa: E501
        """Retrieve a style  # noqa: E501

        Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Be aware that by default, if extension is specified, it will override media type. For example if you use SLD 1.1.0 style and specify .sld extension (which provides SLD 1.0.0 result), but use application/vnd.ogc.se+xml media type (which provides SLD 1.1.0 result), response still will be presented in sld version 1.0.0 Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_style_with_http_info(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to retrieve. (required)
        :return: Style
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'style' is set
        if self.api_client.client_side_validation and ('style' not in params or
                                                       params['style'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style` when calling `get_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/styles/{style}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Style',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_styles(self, **kwargs):  # noqa: E501
        """Get a list of styles  # noqa: E501

        Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_styles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: StyleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_styles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_styles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_styles_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of styles  # noqa: E501

        Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_styles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: StyleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_styles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/styles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StyleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspace_style(self, workspace, style, **kwargs):  # noqa: E501
        """Retrieve a style from a given workspace  # noqa: E501

        Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Be aware that by default, if extension is specified, it will override media type. For example if you use SLD 1.1.0 style and specify .sld extension (which provides SLD 1.0.0 result), but use application/vnd.ogc.se+xml media type (which provides SLD 1.1.0 result), response still will be presented in sld version 1.0.0 Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_style(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :return: StyleWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspace_style_with_http_info(workspace, style, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_style_with_http_info(workspace, style, **kwargs)  # noqa: E501
            return data

    def get_workspace_style_with_http_info(self, workspace, style, **kwargs):  # noqa: E501
        """Retrieve a style from a given workspace  # noqa: E501

        Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Be aware that by default, if extension is specified, it will override media type. For example if you use SLD 1.1.0 style and specify .sld extension (which provides SLD 1.0.0 result), but use application/vnd.ogc.se+xml media type (which provides SLD 1.1.0 result), response still will be presented in sld version 1.0.0 Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_style_with_http_info(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :return: StyleWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_workspace_style`")  # noqa: E501
        # verify the required parameter 'style' is set
        if self.api_client.client_side_validation and ('style' not in params or
                                                       params['style'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style` when calling `get_workspace_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/workspaces/{workspace}/styles/{style}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StyleWorkspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspace_styles(self, workspace, **kwargs):  # noqa: E501
        """Get a list of styles in a given workspace  # noqa: E501

        Displays a list of all styles in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_styles(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :return: StyleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspace_styles_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_styles_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_workspace_styles_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """Get a list of styles in a given workspace  # noqa: E501

        Displays a list of all styles in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_styles_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :return: StyleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_styles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_workspace_styles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StyleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_layer_styles(self, layer, style_body, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the layer. The style named in styleBody must already exist, and will not be altered by this request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_layer_styles(layer, style_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :param StyleInfoPost style_body: Style body information naming an existing style to add to the layer (required)
        :param bool default: Whether to make this the default style for the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_layer_styles_with_http_info(layer, style_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_layer_styles_with_http_info(layer, style_body, **kwargs)  # noqa: E501
            return data

    def post_layer_styles_with_http_info(self, layer, style_body, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the layer. The style named in styleBody must already exist, and will not be altered by this request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_layer_styles_with_http_info(layer, style_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :param StyleInfoPost style_body: Style body information naming an existing style to add to the layer (required)
        :param bool default: Whether to make this the default style for the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer', 'style_body', 'default']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_layer_styles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer' is set
        if self.api_client.client_side_validation and ('layer' not in params or
                                                       params['layer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer` when calling `post_layer_styles`")  # noqa: E501
        # verify the required parameter 'style_body' is set
        if self.api_client.client_side_validation and ('style_body' not in params or
                                                       params['style_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style_body` when calling `post_layer_styles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer' in params:
            path_params['layer'] = params['layer']  # noqa: E501

        query_params = []
        if 'default' in params:
            query_params.append(('default', params['default']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style_body' in params:
            body_params = params['style_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/layers/{layer}/styles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_style(self, style, **kwargs):  # noqa: E501
        """post_style  # noqa: E501

        Invalid. Use PUT to edit a style, or POST with /styles to add a new style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_style(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_style_with_http_info(style, **kwargs)  # noqa: E501
        else:
            (data) = self.post_style_with_http_info(style, **kwargs)  # noqa: E501
            return data

    def post_style_with_http_info(self, style, **kwargs):  # noqa: E501
        """post_style  # noqa: E501

        Invalid. Use PUT to edit a style, or POST with /styles to add a new style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_style_with_http_info(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'style' is set
        if self.api_client.client_side_validation and ('style' not in params or
                                                       params['style'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style` when calling `post_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/styles/{style}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_styles(self, style_body, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.se+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_styles(style_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoPost style_body:  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           ```     <style>       <name>roads_style</name>       <filename>roads.sld</filename>     </style>     ```    - application/json:         ```     {       \"style\": {          \"name\": \"roads_style\",          \"filename\": \"roads.sld\"       }     }     ```  Otherwise, the style body is an actual style:    - application/zip:         ```     <ZIP file containing SLD and icons>     ```          - application/vnd.ogc.sld+xml:      ```     <?xml version=\"1.0\" encoding=\"UTF-8\"?>     <StyledLayerDescriptor version=\"1.0.0\"       xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"       xmlns=\"http://www.opengis.net/sld\"       xmlns:ogc=\"http://www.opengis.net/ogc\"       xmlns:xlink=\"http://www.w3.org/1999/xlink\"       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">       <!-- a Named Layer is the basic building block of an SLD document -->       <NamedLayer>         <Name>default_line</Name>         <UserStyle>         <!-- Styles can have names, titles and abstracts -->           <Title>Default Line</Title>           <Abstract>A sample style that draws a line</Abstract>           <!-- FeatureTypeStyles describe how to render different features -->           <!-- A FeatureTypeStyle for rendering lines -->           <FeatureTypeStyle>             <Rule>               <Name>rule1</Name>               <Title>Blue Line</Title>               <Abstract>A solid blue line with a 1 pixel width</Abstract>               <LineSymbolizer>                 <Stroke>                   <CssParameter name=\"stroke\">#0000FF</CssParameter>                 </Stroke>               </LineSymbolizer>             </Rule>           </FeatureTypeStyle>         </UserStyle>       </NamedLayer>     </StyledLayerDescriptor>     ```  (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :param str content_type: Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_styles_with_http_info(style_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_styles_with_http_info(style_body, **kwargs)  # noqa: E501
            return data

    def post_styles_with_http_info(self, style_body, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.se+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_styles_with_http_info(style_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoPost style_body:  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           ```     <style>       <name>roads_style</name>       <filename>roads.sld</filename>     </style>     ```    - application/json:         ```     {       \"style\": {          \"name\": \"roads_style\",          \"filename\": \"roads.sld\"       }     }     ```  Otherwise, the style body is an actual style:    - application/zip:         ```     <ZIP file containing SLD and icons>     ```          - application/vnd.ogc.sld+xml:      ```     <?xml version=\"1.0\" encoding=\"UTF-8\"?>     <StyledLayerDescriptor version=\"1.0.0\"       xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"       xmlns=\"http://www.opengis.net/sld\"       xmlns:ogc=\"http://www.opengis.net/ogc\"       xmlns:xlink=\"http://www.w3.org/1999/xlink\"       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">       <!-- a Named Layer is the basic building block of an SLD document -->       <NamedLayer>         <Name>default_line</Name>         <UserStyle>         <!-- Styles can have names, titles and abstracts -->           <Title>Default Line</Title>           <Abstract>A sample style that draws a line</Abstract>           <!-- FeatureTypeStyles describe how to render different features -->           <!-- A FeatureTypeStyle for rendering lines -->           <FeatureTypeStyle>             <Rule>               <Name>rule1</Name>               <Title>Blue Line</Title>               <Abstract>A solid blue line with a 1 pixel width</Abstract>               <LineSymbolizer>                 <Stroke>                   <CssParameter name=\"stroke\">#0000FF</CssParameter>                 </Stroke>               </LineSymbolizer>             </Rule>           </FeatureTypeStyle>         </UserStyle>       </NamedLayer>     </StyledLayerDescriptor>     ```  (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :param str content_type: Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['style_body', 'name', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_styles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'style_body' is set
        if self.api_client.client_side_validation and ('style_body' not in params or
                                                       params['style_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style_body` when calling `post_styles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style_body' in params:
            body_params = params['style_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json', 'application/zip', 'text/xml', 'text/json', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml', 'application/vnd.geoserver.geocss+css', 'application/vnd.geoserver.ysld+yaml', 'application/vnd.geoserver.mbstyle+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/styles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workspace_style(self, workspace, style, **kwargs):  # noqa: E501
        """post_workspace_style  # noqa: E501

        Invalid. Use PUT to edit a style, or POST with /workspaces/{workspace}/styles to add a new style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_style(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workspace_style_with_http_info(workspace, style, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_style_with_http_info(workspace, style, **kwargs)  # noqa: E501
            return data

    def post_workspace_style_with_http_info(self, workspace, style, **kwargs):  # noqa: E501
        """post_workspace_style  # noqa: E501

        Invalid. Use PUT to edit a style, or POST with /workspaces/{workspace}/styles to add a new style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_style_with_http_info(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workspace_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_workspace_style`")  # noqa: E501
        # verify the required parameter 'style' is set
        if self.api_client.client_side_validation and ('style' not in params or
                                                       params['style'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style` when calling `post_workspace_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/workspaces/{workspace}/styles/{style}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workspace_styles(self, workspace, style_body, **kwargs):  # noqa: E501
        """Add a new style to a given workspace  # noqa: E501

        Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_styles(workspace, style_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :param StyleInfoPost style_body:  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           ```     <style>       <name>roads_style</name>       <filename>roads.sld</filename>     </style>     ```    - application/json:         ```     {       \"style\": {          \"name\": \"roads_style\",          \"filename\": \"roads.sld\"       }     }     ```  Otherwise, the style body is an actual style:    - application/zip:         ```     <ZIP file containing SLD and icons>     ```          - application/vnd.ogc.sld+xml:      ```     <?xml version=\"1.0\" encoding=\"UTF-8\"?>     <StyledLayerDescriptor version=\"1.0.0\"       xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"       xmlns=\"http://www.opengis.net/sld\"       xmlns:ogc=\"http://www.opengis.net/ogc\"       xmlns:xlink=\"http://www.w3.org/1999/xlink\"       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">       <!-- a Named Layer is the basic building block of an SLD document -->       <NamedLayer>         <Name>default_line</Name>         <UserStyle>         <!-- Styles can have names, titles and abstracts -->           <Title>Default Line</Title>           <Abstract>A sample style that draws a line</Abstract>           <!-- FeatureTypeStyles describe how to render different features -->           <!-- A FeatureTypeStyle for rendering lines -->           <FeatureTypeStyle>             <Rule>               <Name>rule1</Name>               <Title>Blue Line</Title>               <Abstract>A solid blue line with a 1 pixel width</Abstract>               <LineSymbolizer>                 <Stroke>                   <CssParameter name=\"stroke\">#0000FF</CssParameter>                 </Stroke>               </LineSymbolizer>             </Rule>           </FeatureTypeStyle>         </UserStyle>       </NamedLayer>     </StyledLayerDescriptor>     ```  (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :param str content_type: Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workspace_styles_with_http_info(workspace, style_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_styles_with_http_info(workspace, style_body, **kwargs)  # noqa: E501
            return data

    def post_workspace_styles_with_http_info(self, workspace, style_body, **kwargs):  # noqa: E501
        """Add a new style to a given workspace  # noqa: E501

        Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_styles_with_http_info(workspace, style_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :param StyleInfoPost style_body:  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           ```     <style>       <name>roads_style</name>       <filename>roads.sld</filename>     </style>     ```    - application/json:         ```     {       \"style\": {          \"name\": \"roads_style\",          \"filename\": \"roads.sld\"       }     }     ```  Otherwise, the style body is an actual style:    - application/zip:         ```     <ZIP file containing SLD and icons>     ```          - application/vnd.ogc.sld+xml:      ```     <?xml version=\"1.0\" encoding=\"UTF-8\"?>     <StyledLayerDescriptor version=\"1.0.0\"       xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"       xmlns=\"http://www.opengis.net/sld\"       xmlns:ogc=\"http://www.opengis.net/ogc\"       xmlns:xlink=\"http://www.w3.org/1999/xlink\"       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">       <!-- a Named Layer is the basic building block of an SLD document -->       <NamedLayer>         <Name>default_line</Name>         <UserStyle>         <!-- Styles can have names, titles and abstracts -->           <Title>Default Line</Title>           <Abstract>A sample style that draws a line</Abstract>           <!-- FeatureTypeStyles describe how to render different features -->           <!-- A FeatureTypeStyle for rendering lines -->           <FeatureTypeStyle>             <Rule>               <Name>rule1</Name>               <Title>Blue Line</Title>               <Abstract>A solid blue line with a 1 pixel width</Abstract>               <LineSymbolizer>                 <Stroke>                   <CssParameter name=\"stroke\">#0000FF</CssParameter>                 </Stroke>               </LineSymbolizer>             </Rule>           </FeatureTypeStyle>         </UserStyle>       </NamedLayer>     </StyledLayerDescriptor>     ```  (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :param str content_type: Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'style_body', 'name', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workspace_styles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_workspace_styles`")  # noqa: E501
        # verify the required parameter 'style_body' is set
        if self.api_client.client_side_validation and ('style_body' not in params or
                                                       params['style_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style_body` when calling `post_workspace_styles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style_body' in params:
            body_params = params['style_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json', 'application/zip', 'text/html', 'text/json', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml', 'application/vnd.geoserver.geocss+css', 'application/vnd.geoserver.ysld+yaml', 'application/vnd.geoserver.mbstyle+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_layer_styles(self, layer, **kwargs):  # noqa: E501
        """put_layer_styles  # noqa: E501

        Invalid. Use POST to modify the styles for a layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_layer_styles(layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_layer_styles_with_http_info(layer, **kwargs)  # noqa: E501
        else:
            (data) = self.put_layer_styles_with_http_info(layer, **kwargs)  # noqa: E501
            return data

    def put_layer_styles_with_http_info(self, layer, **kwargs):  # noqa: E501
        """put_layer_styles  # noqa: E501

        Invalid. Use POST to modify the styles for a layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_layer_styles_with_http_info(layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_layer_styles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer' is set
        if self.api_client.client_side_validation and ('layer' not in params or
                                                       params['layer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer` when calling `put_layer_styles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer' in params:
            path_params['layer'] = params['layer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/layers/{layer}/styles', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_style(self, style_body, style, **kwargs):  # noqa: E501
        """Modify a single style  # noqa: E501

        Modifies a single style.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_style(style_body, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoPost style_body:  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           ```     <style>       <name>roads_style</name>       <languageVersion>         <version>1.0.0</version>       </languageVersion>       <filename>roads.sld</filename>       <legend>         <width>32</width>         <height>32</height>         <format>image/png; charset=UTF-8</format>         <onlineResource>legend.png</onlineResource>       </legend>     </style>     ```    - application/json:         ```     {       \"style\": {          \"name\": \"roads_style\",          \"languageVersion\": {           \"version\": \"1.0.0\"         },         \"filename\": \"roads.sld\",         \"legend\": {           \"format\": \"image/png; charset=UTF-8\",           \"height\": 32,           \"width\": 32,           \"onlineResource\": \"grass_fill.png\"         }       }     }     ```  Otherwise, the style body is an actual style:    - application/zip:           ```       <ZIP file containing SLD and icons>       ```          - application/vnd.ogc.sld+xml:      ```     <?xml version=\"1.0\" encoding=\"UTF-8\"?>     <StyledLayerDescriptor version=\"1.0.0\"       xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"       xmlns=\"http://www.opengis.net/sld\"       xmlns:ogc=\"http://www.opengis.net/ogc\"       xmlns:xlink=\"http://www.w3.org/1999/xlink\"       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">       <!-- a Named Layer is the basic building block of an SLD document -->       <NamedLayer>         <Name>default_line</Name>         <UserStyle>         <!-- Styles can have names, titles and abstracts -->           <Title>Default Line</Title>           <Abstract>A sample style that draws a line</Abstract>           <!-- FeatureTypeStyles describe how to render different features -->           <!-- A FeatureTypeStyle for rendering lines -->           <FeatureTypeStyle>             <Rule>               <Name>rule1</Name>               <Title>Blue Line</Title>               <Abstract>A solid blue line with a 1 pixel width</Abstract>               <LineSymbolizer>                 <Stroke>                   <CssParameter name=\"stroke\">#0000FF</CssParameter>                 </Stroke>               </LineSymbolizer>             </Rule>           </FeatureTypeStyle>         </UserStyle>       </NamedLayer>     </StyledLayerDescriptor>     ```  (required)
        :param str style: Name of the style to edit. (required)
        :param bool raw: When set to \"true\", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \"true\" or \"false\" (default). Only used when uploading a style file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_style_with_http_info(style_body, style, **kwargs)  # noqa: E501
        else:
            (data) = self.put_style_with_http_info(style_body, style, **kwargs)  # noqa: E501
            return data

    def put_style_with_http_info(self, style_body, style, **kwargs):  # noqa: E501
        """Modify a single style  # noqa: E501

        Modifies a single style.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_style_with_http_info(style_body, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoPost style_body:  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           ```     <style>       <name>roads_style</name>       <languageVersion>         <version>1.0.0</version>       </languageVersion>       <filename>roads.sld</filename>       <legend>         <width>32</width>         <height>32</height>         <format>image/png; charset=UTF-8</format>         <onlineResource>legend.png</onlineResource>       </legend>     </style>     ```    - application/json:         ```     {       \"style\": {          \"name\": \"roads_style\",          \"languageVersion\": {           \"version\": \"1.0.0\"         },         \"filename\": \"roads.sld\",         \"legend\": {           \"format\": \"image/png; charset=UTF-8\",           \"height\": 32,           \"width\": 32,           \"onlineResource\": \"grass_fill.png\"         }       }     }     ```  Otherwise, the style body is an actual style:    - application/zip:           ```       <ZIP file containing SLD and icons>       ```          - application/vnd.ogc.sld+xml:      ```     <?xml version=\"1.0\" encoding=\"UTF-8\"?>     <StyledLayerDescriptor version=\"1.0.0\"       xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"       xmlns=\"http://www.opengis.net/sld\"       xmlns:ogc=\"http://www.opengis.net/ogc\"       xmlns:xlink=\"http://www.w3.org/1999/xlink\"       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">       <!-- a Named Layer is the basic building block of an SLD document -->       <NamedLayer>         <Name>default_line</Name>         <UserStyle>         <!-- Styles can have names, titles and abstracts -->           <Title>Default Line</Title>           <Abstract>A sample style that draws a line</Abstract>           <!-- FeatureTypeStyles describe how to render different features -->           <!-- A FeatureTypeStyle for rendering lines -->           <FeatureTypeStyle>             <Rule>               <Name>rule1</Name>               <Title>Blue Line</Title>               <Abstract>A solid blue line with a 1 pixel width</Abstract>               <LineSymbolizer>                 <Stroke>                   <CssParameter name=\"stroke\">#0000FF</CssParameter>                 </Stroke>               </LineSymbolizer>             </Rule>           </FeatureTypeStyle>         </UserStyle>       </NamedLayer>     </StyledLayerDescriptor>     ```  (required)
        :param str style: Name of the style to edit. (required)
        :param bool raw: When set to \"true\", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \"true\" or \"false\" (default). Only used when uploading a style file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['style_body', 'style', 'raw']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'style_body' is set
        if self.api_client.client_side_validation and ('style_body' not in params or
                                                       params['style_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style_body` when calling `put_style`")  # noqa: E501
        # verify the required parameter 'style' is set
        if self.api_client.client_side_validation and ('style' not in params or
                                                       params['style'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style` when calling `put_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []
        if 'raw' in params:
            query_params.append(('raw', params['raw']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style_body' in params:
            body_params = params['style_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/zip', 'text/xml', 'application/xml', 'text/json', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml', 'application/vnd.geoserver.geocss+css', 'application/vnd.geoserver.mbstyle+json', 'application/vnd.geoserver.ysld+yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/styles/{style}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_styles(self, **kwargs):  # noqa: E501
        """put_styles  # noqa: E501

        Invalid. Use POST for adding a new style, or use PUT with /styles/{style} to edit/upload an existing style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_styles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_styles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_styles_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_styles_with_http_info(self, **kwargs):  # noqa: E501
        """put_styles  # noqa: E501

        Invalid. Use POST for adding a new style, or use PUT with /styles/{style} to edit/upload an existing style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_styles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_styles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/styles', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workspace_style(self, style_body, workspace, style, **kwargs):  # noqa: E501
        """Modify a single style in a given workspace  # noqa: E501

        Modifies a single style in a given workspace.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_style(style_body, workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoPost style_body:  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           ```     <style>       <name>roads_style</name>       <languageVersion>         <version>1.0.0</version>       </languageVersion>       <filename>roads.sld</filename>       <legend>         <width>32</width>         <height>32</height>         <format>image/png; charset=UTF-8</format>         <onlineResource>legend.png</onlineResource>       </legend>     </style>     ```    - application/json:         ```     {       \"style\": {          \"name\": \"roads_style\",          \"languageVersion\": {           \"version\": \"1.0.0\"         },         \"filename\": \"roads.sld\",         \"legend\": {           \"format\": \"image/png; charset=UTF-8\",           \"height\": 32,           \"width\": 32,           \"onlineResource\": \"grass_fill.png\"         }       }     }     ```  Otherwise, the style body is an actual style:    - application/zip:           ```       <ZIP file containing SLD and icons>       ```          - application/vnd.ogc.sld+xml:      ```     <?xml version=\"1.0\" encoding=\"UTF-8\"?>     <StyledLayerDescriptor version=\"1.0.0\"       xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"       xmlns=\"http://www.opengis.net/sld\"       xmlns:ogc=\"http://www.opengis.net/ogc\"       xmlns:xlink=\"http://www.w3.org/1999/xlink\"       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">       <!-- a Named Layer is the basic building block of an SLD document -->       <NamedLayer>         <Name>default_line</Name>         <UserStyle>         <!-- Styles can have names, titles and abstracts -->           <Title>Default Line</Title>           <Abstract>A sample style that draws a line</Abstract>           <!-- FeatureTypeStyles describe how to render different features -->           <!-- A FeatureTypeStyle for rendering lines -->           <FeatureTypeStyle>             <Rule>               <Name>rule1</Name>               <Title>Blue Line</Title>               <Abstract>A solid blue line with a 1 pixel width</Abstract>               <LineSymbolizer>                 <Stroke>                   <CssParameter name=\"stroke\">#0000FF</CssParameter>                 </Stroke>               </LineSymbolizer>             </Rule>           </FeatureTypeStyle>         </UserStyle>       </NamedLayer>     </StyledLayerDescriptor>     ```  (required)
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool raw: When set to \"true\", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \"true\" or \"false\" (default). Only used when uploading a style file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workspace_style_with_http_info(style_body, workspace, style, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_style_with_http_info(style_body, workspace, style, **kwargs)  # noqa: E501
            return data

    def put_workspace_style_with_http_info(self, style_body, workspace, style, **kwargs):  # noqa: E501
        """Modify a single style in a given workspace  # noqa: E501

        Modifies a single style in a given workspace.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_style_with_http_info(style_body, workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoPost style_body:  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           ```     <style>       <name>roads_style</name>       <languageVersion>         <version>1.0.0</version>       </languageVersion>       <filename>roads.sld</filename>       <legend>         <width>32</width>         <height>32</height>         <format>image/png; charset=UTF-8</format>         <onlineResource>legend.png</onlineResource>       </legend>     </style>     ```    - application/json:         ```     {       \"style\": {          \"name\": \"roads_style\",          \"languageVersion\": {           \"version\": \"1.0.0\"         },         \"filename\": \"roads.sld\",         \"legend\": {           \"format\": \"image/png; charset=UTF-8\",           \"height\": 32,           \"width\": 32,           \"onlineResource\": \"grass_fill.png\"         }       }     }     ```  Otherwise, the style body is an actual style:    - application/zip:           ```       <ZIP file containing SLD and icons>       ```          - application/vnd.ogc.sld+xml:      ```     <?xml version=\"1.0\" encoding=\"UTF-8\"?>     <StyledLayerDescriptor version=\"1.0.0\"       xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"       xmlns=\"http://www.opengis.net/sld\"       xmlns:ogc=\"http://www.opengis.net/ogc\"       xmlns:xlink=\"http://www.w3.org/1999/xlink\"       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">       <!-- a Named Layer is the basic building block of an SLD document -->       <NamedLayer>         <Name>default_line</Name>         <UserStyle>         <!-- Styles can have names, titles and abstracts -->           <Title>Default Line</Title>           <Abstract>A sample style that draws a line</Abstract>           <!-- FeatureTypeStyles describe how to render different features -->           <!-- A FeatureTypeStyle for rendering lines -->           <FeatureTypeStyle>             <Rule>               <Name>rule1</Name>               <Title>Blue Line</Title>               <Abstract>A solid blue line with a 1 pixel width</Abstract>               <LineSymbolizer>                 <Stroke>                   <CssParameter name=\"stroke\">#0000FF</CssParameter>                 </Stroke>               </LineSymbolizer>             </Rule>           </FeatureTypeStyle>         </UserStyle>       </NamedLayer>     </StyledLayerDescriptor>     ```  (required)
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool raw: When set to \"true\", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \"true\" or \"false\" (default). Only used when uploading a style file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['style_body', 'workspace', 'style', 'raw']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workspace_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'style_body' is set
        if self.api_client.client_side_validation and ('style_body' not in params or
                                                       params['style_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style_body` when calling `put_workspace_style`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_workspace_style`")  # noqa: E501
        # verify the required parameter 'style' is set
        if self.api_client.client_side_validation and ('style' not in params or
                                                       params['style'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `style` when calling `put_workspace_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []
        if 'raw' in params:
            query_params.append(('raw', params['raw']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style_body' in params:
            body_params = params['style_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/zip', 'text/xml', 'application/xml', 'text/json', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml', 'application/vnd.geoserver.geocss+css', 'application/vnd.geoserver.ysld+yaml', 'application/vnd.geoserver.mbstyle+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/workspaces/{workspace}/styles/{style}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workspace_styles(self, workspace, **kwargs):  # noqa: E501
        """put_workspace_styles  # noqa: E501

        Invalid. Use POST for adding a new style, or use PUT with /workspaces/{workspace}/styles/{style} to edit/upload an existing style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_styles(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workspace_styles_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_styles_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def put_workspace_styles_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """put_workspace_styles  # noqa: E501

        Invalid. Use POST for adding a new style, or use PUT with /workspaces/{workspace}/styles/{style} to edit/upload an existing style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_styles_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workspace_styles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_workspace_styles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
