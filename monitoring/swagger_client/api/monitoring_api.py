# coding: utf-8

"""
    GeoServer monitoring requests

    Request provides details about OWS and REST requests that GeoServer has handled  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MonitoringApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_monitor_request(self, **kwargs):  # noqa: E501
        """delete_monitor_request  # noqa: E501

        Invalid. Cannot delete a specific request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_monitor_request(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_monitor_request_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_monitor_request_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_monitor_request_with_http_info(self, **kwargs):  # noqa: E501
        """delete_monitor_request  # noqa: E501

        Invalid. Cannot delete a specific request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_monitor_request_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_monitor_request" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/monitor/requests/{request}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_monitor_requests(self, **kwargs):  # noqa: E501
        """delete_monitor_requests  # noqa: E501

        Clears all reqests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_monitor_requests(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_monitor_requests_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_monitor_requests_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_monitor_requests_with_http_info(self, **kwargs):  # noqa: E501
        """delete_monitor_requests  # noqa: E501

        Clears all reqests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_monitor_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_monitor_requests" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/monitor/requests', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_monitor_request(self, request, **kwargs):  # noqa: E501
        """Get a list of requests  # noqa: E501

        Returns a specific request, by identifier The HTML format returns all details of the request. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/request/1.xls\" for Excel).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_monitor_request(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request: The request identifier (required)
        :param str fields: Comma separated list of fields to be returned
        :return: Request
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_monitor_request_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_monitor_request_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def get_monitor_request_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get a list of requests  # noqa: E501

        Returns a specific request, by identifier The HTML format returns all details of the request. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/request/1.xls\" for Excel).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_monitor_request_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request: The request identifier (required)
        :param str fields: Comma separated list of fields to be returned
        :return: Request
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_monitor_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `get_monitor_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'request' in params:
            path_params['request'] = params['request']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/csv', 'application/zip', 'application/vnd.ms-excel', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/monitor/requests/{request}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Request',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_monitor_requests(self, **kwargs):  # noqa: E501
        """Get a list of requests  # noqa: E501

        Returns a list of all requests known to the monitoring system. If no list of fields is specified, the full list will be returned, with the exception of Class, Body and Error fields. The HTML format return a summary of the requests, and links to the single request to gather details. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/requests.xls\" for Excel).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_monitor_requests(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _from: Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \"2010-07-23\", \"2010-07-23T16:16:44\")   
        :param str to: Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \"2010-07-23\", \"2010-07-23T16:16:44\")   
        :param str filter: Specifies generic filter against the available fields, in the form \"attributeName:OP:value\" where OP can be: - EQ: equals - NEQ: not equals - LT: less than - LTE: less than or equals - GT: greater than - GTE: greater than or equals - IN: in list (\"value\" must be a comma separated list of values 
        :param str order: Specifies which request attribute to sort by, and optionally specifies the sort direction. The syntax is \"attribute[;ASC|DESC]\", where the sorting direction is optional 
        :param int offset: Specifies where in the result set records should be returned from
        :param int count: Specifies how many records should be returned.
        :param bool live: Specifies which requests to return based on status. If true, only returns live (RUNNING, WAITING, CANCELLING) requests. If false, only returns completed (FINISHED, FAILED) requests. If not specified, all requests are returned regardless of status. 
        :param str fields: Comma separated list of fields to be returned
        :return: RequestList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_monitor_requests_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_monitor_requests_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_monitor_requests_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of requests  # noqa: E501

        Returns a list of all requests known to the monitoring system. If no list of fields is specified, the full list will be returned, with the exception of Class, Body and Error fields. The HTML format return a summary of the requests, and links to the single request to gather details. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/requests.xls\" for Excel).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_monitor_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _from: Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \"2010-07-23\", \"2010-07-23T16:16:44\")   
        :param str to: Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \"2010-07-23\", \"2010-07-23T16:16:44\")   
        :param str filter: Specifies generic filter against the available fields, in the form \"attributeName:OP:value\" where OP can be: - EQ: equals - NEQ: not equals - LT: less than - LTE: less than or equals - GT: greater than - GTE: greater than or equals - IN: in list (\"value\" must be a comma separated list of values 
        :param str order: Specifies which request attribute to sort by, and optionally specifies the sort direction. The syntax is \"attribute[;ASC|DESC]\", where the sorting direction is optional 
        :param int offset: Specifies where in the result set records should be returned from
        :param int count: Specifies how many records should be returned.
        :param bool live: Specifies which requests to return based on status. If true, only returns live (RUNNING, WAITING, CANCELLING) requests. If false, only returns completed (FINISHED, FAILED) requests. If not specified, all requests are returned regardless of status. 
        :param str fields: Comma separated list of fields to be returned
        :return: RequestList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'filter', 'order', 'offset', 'count', 'live', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_monitor_requests" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'live' in params:
            query_params.append(('live', params['live']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/csv', 'application/zip', 'application/vnd.ms-excel', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/monitor/requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_monitor_request(self, **kwargs):  # noqa: E501
        """post_monitor_request  # noqa: E501

        This resource cannot be modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_monitor_request(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_monitor_request_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_monitor_request_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_monitor_request_with_http_info(self, **kwargs):  # noqa: E501
        """post_monitor_request  # noqa: E501

        This resource cannot be modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_monitor_request_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_monitor_request" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/monitor/requests/{request}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_monitor_requests(self, **kwargs):  # noqa: E501
        """post_monitor_requests  # noqa: E501

        Invalid. This resource cannot be modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_monitor_requests(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_monitor_requests_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_monitor_requests_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_monitor_requests_with_http_info(self, **kwargs):  # noqa: E501
        """post_monitor_requests  # noqa: E501

        Invalid. This resource cannot be modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_monitor_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_monitor_requests" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/monitor/requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_monitor_request(self, **kwargs):  # noqa: E501
        """put_monitor_request  # noqa: E501

        This resource cannot be modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_monitor_request(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_monitor_request_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_monitor_request_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_monitor_request_with_http_info(self, **kwargs):  # noqa: E501
        """put_monitor_request  # noqa: E501

        This resource cannot be modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_monitor_request_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_monitor_request" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/monitor/requests/{request}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_monitor_requests(self, **kwargs):  # noqa: E501
        """put_monitor_requests  # noqa: E501

        Invalid. This resource cannot be modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_monitor_requests(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_monitor_requests_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_monitor_requests_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_monitor_requests_with_http_info(self, **kwargs):  # noqa: E501
        """put_monitor_requests  # noqa: E501

        Invalid. This resource cannot be modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_monitor_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_monitor_requests" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/monitor/requests', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
