# coding: utf-8

"""
    GeoServer monitoring requests

    Request provides details about OWS and REST requests that GeoServer has handled  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bbox': 'str',
        'body_as_string': 'str',
        'body_content_length': 'int',
        'body_content_type': 'str',
        'category': 'str',
        'end_time': 'str',
        'error_message': 'str',
        'host': 'str',
        'http_method': 'str',
        'http_referer': 'str',
        'id': 'str',
        'internal_host': 'str',
        'operation': 'str',
        'ows_version': 'str',
        'path': 'str',
        'query_string': 'str',
        'remote_addr': 'str',
        'remote_city': 'str',
        'remote_country': 'str',
        'remote_host': 'str',
        'remote_lat': 'str',
        'remote_lon': 'str',
        'remote_user': 'str',
        'remote_user_agent': 'str',
        'resources': 'str',
        'resources_list': 'str',
        'response_content_type': 'str',
        'response_length': 'int',
        'response_status': 'str',
        'service': 'str',
        'start_time': 'str',
        'status': 'str',
        'sub_operation': 'str',
        'total_time': 'int'
    }

    attribute_map = {
        'bbox': 'Bbox',
        'body_as_string': 'BodyAsString',
        'body_content_length': 'BodyContentLength',
        'body_content_type': 'BodyContentType',
        'category': 'Category',
        'end_time': 'EndTime',
        'error_message': 'ErrorMessage',
        'host': 'Host',
        'http_method': 'HttpMethod',
        'http_referer': 'HttpReferer',
        'id': 'Id',
        'internal_host': 'InternalHost',
        'operation': 'Operation',
        'ows_version': 'OwsVersion',
        'path': 'Path',
        'query_string': 'QueryString',
        'remote_addr': 'RemoteAddr',
        'remote_city': 'RemoteCity',
        'remote_country': 'RemoteCountry',
        'remote_host': 'RemoteHost',
        'remote_lat': 'RemoteLat',
        'remote_lon': 'RemoteLon',
        'remote_user': 'RemoteUser',
        'remote_user_agent': 'RemoteUserAgent',
        'resources': 'Resources',
        'resources_list': 'ResourcesList',
        'response_content_type': 'ResponseContentType',
        'response_length': 'ResponseLength',
        'response_status': 'ResponseStatus',
        'service': 'Service',
        'start_time': 'StartTime',
        'status': 'Status',
        'sub_operation': 'SubOperation',
        'total_time': 'TotalTime'
    }

    def __init__(self, bbox=None, body_as_string=None, body_content_length=None, body_content_type=None, category=None, end_time=None, error_message=None, host=None, http_method=None, http_referer=None, id=None, internal_host=None, operation=None, ows_version=None, path=None, query_string=None, remote_addr=None, remote_city=None, remote_country=None, remote_host=None, remote_lat=None, remote_lon=None, remote_user=None, remote_user_agent=None, resources=None, resources_list=None, response_content_type=None, response_length=None, response_status=None, service=None, start_time=None, status=None, sub_operation=None, total_time=None, _configuration=None):  # noqa: E501
        """Request - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bbox = None
        self._body_as_string = None
        self._body_content_length = None
        self._body_content_type = None
        self._category = None
        self._end_time = None
        self._error_message = None
        self._host = None
        self._http_method = None
        self._http_referer = None
        self._id = None
        self._internal_host = None
        self._operation = None
        self._ows_version = None
        self._path = None
        self._query_string = None
        self._remote_addr = None
        self._remote_city = None
        self._remote_country = None
        self._remote_host = None
        self._remote_lat = None
        self._remote_lon = None
        self._remote_user = None
        self._remote_user_agent = None
        self._resources = None
        self._resources_list = None
        self._response_content_type = None
        self._response_length = None
        self._response_status = None
        self._service = None
        self._start_time = None
        self._status = None
        self._sub_operation = None
        self._total_time = None
        self.discriminator = None

        if bbox is not None:
            self.bbox = bbox
        if body_as_string is not None:
            self.body_as_string = body_as_string
        if body_content_length is not None:
            self.body_content_length = body_content_length
        if body_content_type is not None:
            self.body_content_type = body_content_type
        if category is not None:
            self.category = category
        if end_time is not None:
            self.end_time = end_time
        if error_message is not None:
            self.error_message = error_message
        if host is not None:
            self.host = host
        if http_method is not None:
            self.http_method = http_method
        if http_referer is not None:
            self.http_referer = http_referer
        if id is not None:
            self.id = id
        if internal_host is not None:
            self.internal_host = internal_host
        if operation is not None:
            self.operation = operation
        if ows_version is not None:
            self.ows_version = ows_version
        if path is not None:
            self.path = path
        if query_string is not None:
            self.query_string = query_string
        if remote_addr is not None:
            self.remote_addr = remote_addr
        if remote_city is not None:
            self.remote_city = remote_city
        if remote_country is not None:
            self.remote_country = remote_country
        if remote_host is not None:
            self.remote_host = remote_host
        if remote_lat is not None:
            self.remote_lat = remote_lat
        if remote_lon is not None:
            self.remote_lon = remote_lon
        if remote_user is not None:
            self.remote_user = remote_user
        if remote_user_agent is not None:
            self.remote_user_agent = remote_user_agent
        if resources is not None:
            self.resources = resources
        if resources_list is not None:
            self.resources_list = resources_list
        if response_content_type is not None:
            self.response_content_type = response_content_type
        if response_length is not None:
            self.response_length = response_length
        if response_status is not None:
            self.response_status = response_status
        if service is not None:
            self.service = service
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if sub_operation is not None:
            self.sub_operation = sub_operation
        if total_time is not None:
            self.total_time = total_time

    @property
    def bbox(self):
        """Gets the bbox of this Request.  # noqa: E501

        Requested bounding box  # noqa: E501

        :return: The bbox of this Request.  # noqa: E501
        :rtype: str
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this Request.

        Requested bounding box  # noqa: E501

        :param bbox: The bbox of this Request.  # noqa: E501
        :type: str
        """

        self._bbox = bbox

    @property
    def body_as_string(self):
        """Gets the body_as_string of this Request.  # noqa: E501

        Body of the request (for POST/PUT)  # noqa: E501

        :return: The body_as_string of this Request.  # noqa: E501
        :rtype: str
        """
        return self._body_as_string

    @body_as_string.setter
    def body_as_string(self, body_as_string):
        """Sets the body_as_string of this Request.

        Body of the request (for POST/PUT)  # noqa: E501

        :param body_as_string: The body_as_string of this Request.  # noqa: E501
        :type: str
        """

        self._body_as_string = body_as_string

    @property
    def body_content_length(self):
        """Gets the body_content_length of this Request.  # noqa: E501

        Request body content lenght  # noqa: E501

        :return: The body_content_length of this Request.  # noqa: E501
        :rtype: int
        """
        return self._body_content_length

    @body_content_length.setter
    def body_content_length(self, body_content_length):
        """Sets the body_content_length of this Request.

        Request body content lenght  # noqa: E501

        :param body_content_length: The body_content_length of this Request.  # noqa: E501
        :type: int
        """

        self._body_content_length = body_content_length

    @property
    def body_content_type(self):
        """Gets the body_content_type of this Request.  # noqa: E501

        Request body content type  # noqa: E501

        :return: The body_content_type of this Request.  # noqa: E501
        :rtype: str
        """
        return self._body_content_type

    @body_content_type.setter
    def body_content_type(self, body_content_type):
        """Sets the body_content_type of this Request.

        Request body content type  # noqa: E501

        :param body_content_type: The body_content_type of this Request.  # noqa: E501
        :type: str
        """

        self._body_content_type = body_content_type

    @property
    def category(self):
        """Gets the category of this Request.  # noqa: E501

        Can be OWS or REST  # noqa: E501

        :return: The category of this Request.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Request.

        Can be OWS or REST  # noqa: E501

        :param category: The category of this Request.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def end_time(self):
        """Gets the end_time of this Request.  # noqa: E501

        Request completion time  # noqa: E501

        :return: The end_time of this Request.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Request.

        Request completion time  # noqa: E501

        :param end_time: The end_time of this Request.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def error_message(self):
        """Gets the error_message of this Request.  # noqa: E501

        The error message, in case the request failed, empt otherwise  # noqa: E501

        :return: The error_message of this Request.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Request.

        The error message, in case the request failed, empt otherwise  # noqa: E501

        :param error_message: The error_message of this Request.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def host(self):
        """Gets the host of this Request.  # noqa: E501

        Host GeoServer is running on  # noqa: E501

        :return: The host of this Request.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Request.

        Host GeoServer is running on  # noqa: E501

        :param host: The host of this Request.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def http_method(self):
        """Gets the http_method of this Request.  # noqa: E501

        HTTP method of the request (e.g., GET, POST, ...)  # noqa: E501

        :return: The http_method of this Request.  # noqa: E501
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this Request.

        HTTP method of the request (e.g., GET, POST, ...)  # noqa: E501

        :param http_method: The http_method of this Request.  # noqa: E501
        :type: str
        """

        self._http_method = http_method

    @property
    def http_referer(self):
        """Gets the http_referer of this Request.  # noqa: E501

        HTTP referrer, if any  # noqa: E501

        :return: The http_referer of this Request.  # noqa: E501
        :rtype: str
        """
        return self._http_referer

    @http_referer.setter
    def http_referer(self, http_referer):
        """Sets the http_referer of this Request.

        HTTP referrer, if any  # noqa: E501

        :param http_referer: The http_referer of this Request.  # noqa: E501
        :type: str
        """

        self._http_referer = http_referer

    @property
    def id(self):
        """Gets the id of this Request.  # noqa: E501

        Request identifier  # noqa: E501

        :return: The id of this Request.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Request.

        Request identifier  # noqa: E501

        :param id: The id of this Request.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def internal_host(self):
        """Gets the internal_host of this Request.  # noqa: E501

        Name of the host GeoServer is running on  # noqa: E501

        :return: The internal_host of this Request.  # noqa: E501
        :rtype: str
        """
        return self._internal_host

    @internal_host.setter
    def internal_host(self, internal_host):
        """Sets the internal_host of this Request.

        Name of the host GeoServer is running on  # noqa: E501

        :param internal_host: The internal_host of this Request.  # noqa: E501
        :type: str
        """

        self._internal_host = internal_host

    @property
    def operation(self):
        """Gets the operation of this Request.  # noqa: E501

        OGC operation, e.g. GetMap, GetFeature (available only for OWS requests)  # noqa: E501

        :return: The operation of this Request.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Request.

        OGC operation, e.g. GetMap, GetFeature (available only for OWS requests)  # noqa: E501

        :param operation: The operation of this Request.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def ows_version(self):
        """Gets the ows_version of this Request.  # noqa: E501

        OGC protocol version (e.g., 1.1.0, 1.1.3)  # noqa: E501

        :return: The ows_version of this Request.  # noqa: E501
        :rtype: str
        """
        return self._ows_version

    @ows_version.setter
    def ows_version(self, ows_version):
        """Sets the ows_version of this Request.

        OGC protocol version (e.g., 1.1.0, 1.1.3)  # noqa: E501

        :param ows_version: The ows_version of this Request.  # noqa: E501
        :type: str
        """

        self._ows_version = ows_version

    @property
    def path(self):
        """Gets the path of this Request.  # noqa: E501

        HTTP request path (e.g. \"/topp/wms\")  # noqa: E501

        :return: The path of this Request.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Request.

        HTTP request path (e.g. \"/topp/wms\")  # noqa: E501

        :param path: The path of this Request.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def query_string(self):
        """Gets the query_string of this Request.  # noqa: E501

        The HTTP request query string  # noqa: E501

        :return: The query_string of this Request.  # noqa: E501
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this Request.

        The HTTP request query string  # noqa: E501

        :param query_string: The query_string of this Request.  # noqa: E501
        :type: str
        """

        self._query_string = query_string

    @property
    def remote_addr(self):
        """Gets the remote_addr of this Request.  # noqa: E501

        Remote request IP address  # noqa: E501

        :return: The remote_addr of this Request.  # noqa: E501
        :rtype: str
        """
        return self._remote_addr

    @remote_addr.setter
    def remote_addr(self, remote_addr):
        """Sets the remote_addr of this Request.

        Remote request IP address  # noqa: E501

        :param remote_addr: The remote_addr of this Request.  # noqa: E501
        :type: str
        """

        self._remote_addr = remote_addr

    @property
    def remote_city(self):
        """Gets the remote_city of this Request.  # noqa: E501

        Remote client city (available only if GeoIP lookup is enabled)  # noqa: E501

        :return: The remote_city of this Request.  # noqa: E501
        :rtype: str
        """
        return self._remote_city

    @remote_city.setter
    def remote_city(self, remote_city):
        """Sets the remote_city of this Request.

        Remote client city (available only if GeoIP lookup is enabled)  # noqa: E501

        :param remote_city: The remote_city of this Request.  # noqa: E501
        :type: str
        """

        self._remote_city = remote_city

    @property
    def remote_country(self):
        """Gets the remote_country of this Request.  # noqa: E501

        Remote client country (available only if GeoIP lookup is enabled)  # noqa: E501

        :return: The remote_country of this Request.  # noqa: E501
        :rtype: str
        """
        return self._remote_country

    @remote_country.setter
    def remote_country(self, remote_country):
        """Sets the remote_country of this Request.

        Remote client country (available only if GeoIP lookup is enabled)  # noqa: E501

        :param remote_country: The remote_country of this Request.  # noqa: E501
        :type: str
        """

        self._remote_country = remote_country

    @property
    def remote_host(self):
        """Gets the remote_host of this Request.  # noqa: E501

        Remote client  host  # noqa: E501

        :return: The remote_host of this Request.  # noqa: E501
        :rtype: str
        """
        return self._remote_host

    @remote_host.setter
    def remote_host(self, remote_host):
        """Sets the remote_host of this Request.

        Remote client  host  # noqa: E501

        :param remote_host: The remote_host of this Request.  # noqa: E501
        :type: str
        """

        self._remote_host = remote_host

    @property
    def remote_lat(self):
        """Gets the remote_lat of this Request.  # noqa: E501

        Remote client latitude (available only if GeoIP lookup is enabled)  # noqa: E501

        :return: The remote_lat of this Request.  # noqa: E501
        :rtype: str
        """
        return self._remote_lat

    @remote_lat.setter
    def remote_lat(self, remote_lat):
        """Sets the remote_lat of this Request.

        Remote client latitude (available only if GeoIP lookup is enabled)  # noqa: E501

        :param remote_lat: The remote_lat of this Request.  # noqa: E501
        :type: str
        """

        self._remote_lat = remote_lat

    @property
    def remote_lon(self):
        """Gets the remote_lon of this Request.  # noqa: E501

        Remote client longitude (available only if GeoIP lookup is enabled)  # noqa: E501

        :return: The remote_lon of this Request.  # noqa: E501
        :rtype: str
        """
        return self._remote_lon

    @remote_lon.setter
    def remote_lon(self, remote_lon):
        """Sets the remote_lon of this Request.

        Remote client longitude (available only if GeoIP lookup is enabled)  # noqa: E501

        :param remote_lon: The remote_lon of this Request.  # noqa: E501
        :type: str
        """

        self._remote_lon = remote_lon

    @property
    def remote_user(self):
        """Gets the remote_user of this Request.  # noqa: E501

        User issuing the request  # noqa: E501

        :return: The remote_user of this Request.  # noqa: E501
        :rtype: str
        """
        return self._remote_user

    @remote_user.setter
    def remote_user(self, remote_user):
        """Sets the remote_user of this Request.

        User issuing the request  # noqa: E501

        :param remote_user: The remote_user of this Request.  # noqa: E501
        :type: str
        """

        self._remote_user = remote_user

    @property
    def remote_user_agent(self):
        """Gets the remote_user_agent of this Request.  # noqa: E501

        Remote client user agent  # noqa: E501

        :return: The remote_user_agent of this Request.  # noqa: E501
        :rtype: str
        """
        return self._remote_user_agent

    @remote_user_agent.setter
    def remote_user_agent(self, remote_user_agent):
        """Sets the remote_user_agent of this Request.

        Remote client user agent  # noqa: E501

        :param remote_user_agent: The remote_user_agent of this Request.  # noqa: E501
        :type: str
        """

        self._remote_user_agent = remote_user_agent

    @property
    def resources(self):
        """Gets the resources of this Request.  # noqa: E501

        Name of the resources (layers, processes, ...) specified as part of the request  # noqa: E501

        :return: The resources of this Request.  # noqa: E501
        :rtype: str
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Request.

        Name of the resources (layers, processes, ...) specified as part of the request  # noqa: E501

        :param resources: The resources of this Request.  # noqa: E501
        :type: str
        """

        self._resources = resources

    @property
    def resources_list(self):
        """Gets the resources_list of this Request.  # noqa: E501

        Name of the resources (layers, processes, ...) specified as part of the request  # noqa: E501

        :return: The resources_list of this Request.  # noqa: E501
        :rtype: str
        """
        return self._resources_list

    @resources_list.setter
    def resources_list(self, resources_list):
        """Sets the resources_list of this Request.

        Name of the resources (layers, processes, ...) specified as part of the request  # noqa: E501

        :param resources_list: The resources_list of this Request.  # noqa: E501
        :type: str
        """

        self._resources_list = resources_list

    @property
    def response_content_type(self):
        """Gets the response_content_type of this Request.  # noqa: E501

        Content type of the response  # noqa: E501

        :return: The response_content_type of this Request.  # noqa: E501
        :rtype: str
        """
        return self._response_content_type

    @response_content_type.setter
    def response_content_type(self, response_content_type):
        """Sets the response_content_type of this Request.

        Content type of the response  # noqa: E501

        :param response_content_type: The response_content_type of this Request.  # noqa: E501
        :type: str
        """

        self._response_content_type = response_content_type

    @property
    def response_length(self):
        """Gets the response_length of this Request.  # noqa: E501

        Size of the response in bytes  # noqa: E501

        :return: The response_length of this Request.  # noqa: E501
        :rtype: int
        """
        return self._response_length

    @response_length.setter
    def response_length(self, response_length):
        """Sets the response_length of this Request.

        Size of the response in bytes  # noqa: E501

        :param response_length: The response_length of this Request.  # noqa: E501
        :type: int
        """

        self._response_length = response_length

    @property
    def response_status(self):
        """Gets the response_status of this Request.  # noqa: E501

        HTTP status of the response  # noqa: E501

        :return: The response_status of this Request.  # noqa: E501
        :rtype: str
        """
        return self._response_status

    @response_status.setter
    def response_status(self, response_status):
        """Sets the response_status of this Request.

        HTTP status of the response  # noqa: E501

        :param response_status: The response_status of this Request.  # noqa: E501
        :type: str
        """

        self._response_status = response_status

    @property
    def service(self):
        """Gets the service of this Request.  # noqa: E501

        OGC service in use (available only for OGC requests)  # noqa: E501

        :return: The service of this Request.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Request.

        OGC service in use (available only for OGC requests)  # noqa: E501

        :param service: The service of this Request.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def start_time(self):
        """Gets the start_time of this Request.  # noqa: E501

        Request start time  # noqa: E501

        :return: The start_time of this Request.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Request.

        Request start time  # noqa: E501

        :param start_time: The start_time of this Request.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Request.  # noqa: E501

        Status of the request (WAITING, RUNNING, CANCELLING, FAILED, FINISHED, CANCELLED, INTERRUPTED)  # noqa: E501

        :return: The status of this Request.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Request.

        Status of the request (WAITING, RUNNING, CANCELLING, FAILED, FINISHED, CANCELLED, INTERRUPTED)  # noqa: E501

        :param status: The status of this Request.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sub_operation(self):
        """Gets the sub_operation of this Request.  # noqa: E501

        The OGC sub operations, for the cases in which it applies (e.g., for WFS-T it can be Insert/Delete/Update)  # noqa: E501

        :return: The sub_operation of this Request.  # noqa: E501
        :rtype: str
        """
        return self._sub_operation

    @sub_operation.setter
    def sub_operation(self, sub_operation):
        """Sets the sub_operation of this Request.

        The OGC sub operations, for the cases in which it applies (e.g., for WFS-T it can be Insert/Delete/Update)  # noqa: E501

        :param sub_operation: The sub_operation of this Request.  # noqa: E501
        :type: str
        """

        self._sub_operation = sub_operation

    @property
    def total_time(self):
        """Gets the total_time of this Request.  # noqa: E501

        Total request time in milliseconds  # noqa: E501

        :return: The total_time of this Request.  # noqa: E501
        :rtype: int
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this Request.

        Total request time in milliseconds  # noqa: E501

        :param total_time: The total_time of this Request.  # noqa: E501
        :type: int
        """

        self._total_time = total_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Request):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Request):
            return True

        return self.to_dict() != other.to_dict()
