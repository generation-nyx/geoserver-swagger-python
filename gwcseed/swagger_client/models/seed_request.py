# coding: utf-8

"""
    GeoWebCache Seeding and Truncating

    A layer is a published resource (feature type or coverage).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SeedRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'bounds': 'SeedRequestBounds',
        'grid_set_id': 'str',
        'zoom_start': 'int',
        'zoom_stop': 'int',
        'type': 'str',
        'thread_count': 'int',
        'parameters': 'SeedRequestParameters'
    }

    attribute_map = {
        'name': 'name',
        'bounds': 'bounds',
        'grid_set_id': 'gridSetId',
        'zoom_start': 'zoomStart',
        'zoom_stop': 'zoomStop',
        'type': 'type',
        'thread_count': 'threadCount',
        'parameters': 'parameters'
    }

    def __init__(self, name=None, bounds=None, grid_set_id=None, zoom_start=None, zoom_stop=None, type=None, thread_count=None, parameters=None, _configuration=None):  # noqa: E501
        """SeedRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._bounds = None
        self._grid_set_id = None
        self._zoom_start = None
        self._zoom_stop = None
        self._type = None
        self._thread_count = None
        self._parameters = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if bounds is not None:
            self.bounds = bounds
        if grid_set_id is not None:
            self.grid_set_id = grid_set_id
        if zoom_start is not None:
            self.zoom_start = zoom_start
        if zoom_stop is not None:
            self.zoom_stop = zoom_stop
        if type is not None:
            self.type = type
        if thread_count is not None:
            self.thread_count = thread_count
        if parameters is not None:
            self.parameters = parameters

    @property
    def name(self):
        """Gets the name of this SeedRequest.  # noqa: E501

        name of the layer to seed, reseed, or truncate.  # noqa: E501

        :return: The name of this SeedRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SeedRequest.

        name of the layer to seed, reseed, or truncate.  # noqa: E501

        :param name: The name of this SeedRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def bounds(self):
        """Gets the bounds of this SeedRequest.  # noqa: E501


        :return: The bounds of this SeedRequest.  # noqa: E501
        :rtype: SeedRequestBounds
        """
        return self._bounds

    @bounds.setter
    def bounds(self, bounds):
        """Sets the bounds of this SeedRequest.


        :param bounds: The bounds of this SeedRequest.  # noqa: E501
        :type: SeedRequestBounds
        """

        self._bounds = bounds

    @property
    def grid_set_id(self):
        """Gets the grid_set_id of this SeedRequest.  # noqa: E501

        The projection used for the layer.  # noqa: E501

        :return: The grid_set_id of this SeedRequest.  # noqa: E501
        :rtype: str
        """
        return self._grid_set_id

    @grid_set_id.setter
    def grid_set_id(self, grid_set_id):
        """Sets the grid_set_id of this SeedRequest.

        The projection used for the layer.  # noqa: E501

        :param grid_set_id: The grid_set_id of this SeedRequest.  # noqa: E501
        :type: str
        """

        self._grid_set_id = grid_set_id

    @property
    def zoom_start(self):
        """Gets the zoom_start of this SeedRequest.  # noqa: E501

        The zoom level to start seeding.  # noqa: E501

        :return: The zoom_start of this SeedRequest.  # noqa: E501
        :rtype: int
        """
        return self._zoom_start

    @zoom_start.setter
    def zoom_start(self, zoom_start):
        """Sets the zoom_start of this SeedRequest.

        The zoom level to start seeding.  # noqa: E501

        :param zoom_start: The zoom_start of this SeedRequest.  # noqa: E501
        :type: int
        """

        self._zoom_start = zoom_start

    @property
    def zoom_stop(self):
        """Gets the zoom_stop of this SeedRequest.  # noqa: E501

        The zoom level to stop seeding.  # noqa: E501

        :return: The zoom_stop of this SeedRequest.  # noqa: E501
        :rtype: int
        """
        return self._zoom_stop

    @zoom_stop.setter
    def zoom_stop(self, zoom_stop):
        """Sets the zoom_stop of this SeedRequest.

        The zoom level to stop seeding.  # noqa: E501

        :param zoom_stop: The zoom_stop of this SeedRequest.  # noqa: E501
        :type: int
        """

        self._zoom_stop = zoom_stop

    @property
    def type(self):
        """Gets the type of this SeedRequest.  # noqa: E501

        Type can be seed (add tiles), reseed (replace tiles), or truncate (remove tiles).  # noqa: E501

        :return: The type of this SeedRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SeedRequest.

        Type can be seed (add tiles), reseed (replace tiles), or truncate (remove tiles).  # noqa: E501

        :param type: The type of this SeedRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["seed", "reseed", "truncate"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def thread_count(self):
        """Gets the thread_count of this SeedRequest.  # noqa: E501

        Number of seeding threads to run in parallel. If type is truncate only one thread will be used regardless of this parameter.  # noqa: E501

        :return: The thread_count of this SeedRequest.  # noqa: E501
        :rtype: int
        """
        return self._thread_count

    @thread_count.setter
    def thread_count(self, thread_count):
        """Sets the thread_count of this SeedRequest.

        Number of seeding threads to run in parallel. If type is truncate only one thread will be used regardless of this parameter.  # noqa: E501

        :param thread_count: The thread_count of this SeedRequest.  # noqa: E501
        :type: int
        """

        self._thread_count = thread_count

    @property
    def parameters(self):
        """Gets the parameters of this SeedRequest.  # noqa: E501


        :return: The parameters of this SeedRequest.  # noqa: E501
        :rtype: SeedRequestParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SeedRequest.


        :param parameters: The parameters of this SeedRequest.  # noqa: E501
        :type: SeedRequestParameters
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SeedRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeedRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SeedRequest):
            return True

        return self.to_dict() != other.to_dict()
