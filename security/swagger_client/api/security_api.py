# coding: utf-8

"""
    GeoServer Security

    The Security area shows access rules and other configuration for the security subsystem  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SecurityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_acl_layer(self, rule, **kwargs):  # noqa: E501
        """Delete layer rule.  # noqa: E501

        Deletes specific layer-based rule(s). The {rule} must specified in the last part of the URL and of the form \\<workspace\\>.\\<layer\\>.[r|w|a]   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_acl_layer(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_acl_layer_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_acl_layer_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def delete_acl_layer_with_http_info(self, rule, **kwargs):  # noqa: E501
        """Delete layer rule.  # noqa: E501

        Deletes specific layer-based rule(s). The {rule} must specified in the last part of the URL and of the form \\<workspace\\>.\\<layer\\>.[r|w|a]   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_acl_layer_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_acl_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `delete_acl_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/layers/{rule}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_acl_layers(self, **kwargs):  # noqa: E501
        """Delete layer rule(s)  # noqa: E501

        Deletes one or more layer-based rules in the list of security rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_acl_layers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_acl_layers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_acl_layers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_acl_layers_with_http_info(self, **kwargs):  # noqa: E501
        """Delete layer rule(s)  # noqa: E501

        Deletes one or more layer-based rules in the list of security rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_acl_layers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_acl_layers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/layers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_acl_service(self, rule, **kwargs):  # noqa: E501
        """Delete service rule.  # noqa: E501

        Deletes specific service-based rule(s). The {rule} must be specified as the last part of the URL and must be of the form \\<service\\>.\\<operation\\>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_acl_service(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_acl_service_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_acl_service_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def delete_acl_service_with_http_info(self, rule, **kwargs):  # noqa: E501
        """Delete service rule.  # noqa: E501

        Deletes specific service-based rule(s). The {rule} must be specified as the last part of the URL and must be of the form \\<service\\>.\\<operation\\>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_acl_service_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_acl_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `delete_acl_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/services/{rule}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_acl_services(self, **kwargs):  # noqa: E501
        """Delete service rule(s)  # noqa: E501

        Deletes one or more service-based rules in the list of security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_acl_services(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_acl_services_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_acl_services_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_acl_services_with_http_info(self, **kwargs):  # noqa: E501
        """Delete service rule(s)  # noqa: E501

        Deletes one or more service-based rules in the list of security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_acl_services_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_acl_services" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/services', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aclrest_rule(self, rule, **kwargs):  # noqa: E501
        """Delete REST access rule  # noqa: E501

        Deletes specific REST access rule(s). The {rule} must specified as the last part of the URL and must be of the form \\<URL Ant pattern\\>:\\<comma separated list of HTTP methods\\>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aclrest_rule(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The REST rule, specified as \\<URL Ant pattern\\>;\\<comma separated list of HTTP methods\\>. Examples are  - /**;GET - /**;POST,DELETE,PUT  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_aclrest_rule_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_aclrest_rule_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def delete_aclrest_rule_with_http_info(self, rule, **kwargs):  # noqa: E501
        """Delete REST access rule  # noqa: E501

        Deletes specific REST access rule(s). The {rule} must specified as the last part of the URL and must be of the form \\<URL Ant pattern\\>:\\<comma separated list of HTTP methods\\>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aclrest_rule_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The REST rule, specified as \\<URL Ant pattern\\>;\\<comma separated list of HTTP methods\\>. Examples are  - /**;GET - /**;POST,DELETE,PUT  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aclrest_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `delete_aclrest_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/rest/{rule}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aclrest_rules(self, **kwargs):  # noqa: E501
        """Delete REST access rule(s)  # noqa: E501

        Deletes one or more service-based rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aclrest_rules(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_aclrest_rules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_aclrest_rules_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_aclrest_rules_with_http_info(self, **kwargs):  # noqa: E501
        """Delete REST access rule(s)  # noqa: E501

        Deletes one or more service-based rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aclrest_rules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aclrest_rules" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/rest', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_catalog_mode(self, **kwargs):  # noqa: E501
        """delete_catalog_mode  # noqa: E501

        Invalid. Use PUT to change catalog mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_catalog_mode(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_catalog_mode_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_catalog_mode_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_catalog_mode_with_http_info(self, **kwargs):  # noqa: E501
        """delete_catalog_mode  # noqa: E501

        Invalid. Use PUT to change catalog mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_catalog_mode_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_catalog_mode" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/catalog', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_master_pw(self, **kwargs):  # noqa: E501
        """delete_master_pw  # noqa: E501

        Invalid. Use PUT to change keystore password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_master_pw(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_master_pw_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_master_pw_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_master_pw_with_http_info(self, **kwargs):  # noqa: E501
        """delete_master_pw  # noqa: E501

        Invalid. Use PUT to change keystore password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_master_pw_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_master_pw" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/masterpw', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_self_password(self, **kwargs):  # noqa: E501
        """delete_self_password  # noqa: E501

        Invalid. Use PUT to change password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_self_password(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_self_password_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_self_password_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_self_password_with_http_info(self, **kwargs):  # noqa: E501
        """delete_self_password  # noqa: E501

        Invalid. Use PUT to change password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_self_password_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_self_password" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/self/password', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_acl_layer(self, rule, **kwargs):  # noqa: E501
        """get_acl_layer  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_acl_layer(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_acl_layer_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.get_acl_layer_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def get_acl_layer_with_http_info(self, rule, **kwargs):  # noqa: E501
        """get_acl_layer  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_acl_layer_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_acl_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `get_acl_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/layers/{rule}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_acl_layers(self, **kwargs):  # noqa: E501
        """Get layer rules  # noqa: E501

        Displays the current layer-based security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_acl_layers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ACLLayers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_acl_layers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_acl_layers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_acl_layers_with_http_info(self, **kwargs):  # noqa: E501
        """Get layer rules  # noqa: E501

        Displays the current layer-based security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_acl_layers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ACLLayers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_acl_layers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/layers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ACLLayers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_acl_service(self, rule, **kwargs):  # noqa: E501
        """get_acl_service  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_acl_service(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_acl_service_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.get_acl_service_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def get_acl_service_with_http_info(self, rule, **kwargs):  # noqa: E501
        """get_acl_service  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_acl_service_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_acl_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `get_acl_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/services/{rule}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_acl_services(self, **kwargs):  # noqa: E501
        """Get service rules  # noqa: E501

        Displays the current service-based security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_acl_services(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ACLServices
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_acl_services_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_acl_services_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_acl_services_with_http_info(self, **kwargs):  # noqa: E501
        """Get service rules  # noqa: E501

        Displays the current service-based security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_acl_services_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ACLServices
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_acl_services" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ACLServices',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aclrest_rule(self, rule, **kwargs):  # noqa: E501
        """get_aclrest_rule  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aclrest_rule(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The REST rule, specified as \\<URL Ant pattern\\>;\\<comma separated list of HTTP methods\\>. Examples are  - /**;GET - /**;POST,DELETE,PUT  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aclrest_rule_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aclrest_rule_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def get_aclrest_rule_with_http_info(self, rule, **kwargs):  # noqa: E501
        """get_aclrest_rule  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aclrest_rule_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The REST rule, specified as \\<URL Ant pattern\\>;\\<comma separated list of HTTP methods\\>. Examples are  - /**;GET - /**;POST,DELETE,PUT  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aclrest_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `get_aclrest_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/rest/{rule}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aclrest_rules(self, **kwargs):  # noqa: E501
        """Get REST rules  # noqa: E501

        Displays the current REST access rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aclrest_rules(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ACLREST
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aclrest_rules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aclrest_rules_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aclrest_rules_with_http_info(self, **kwargs):  # noqa: E501
        """Get REST rules  # noqa: E501

        Displays the current REST access rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aclrest_rules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ACLREST
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aclrest_rules" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/rest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ACLREST',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_catalog_mode(self, **kwargs):  # noqa: E501
        """get_catalog_mode  # noqa: E501

        Gets the catalog mode, which specifies how GeoServer will advertise secured layers and behave when a secured layer is accessed without the necessary privileges.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_catalog_mode(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CatalogMode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_catalog_mode_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_catalog_mode_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_catalog_mode_with_http_info(self, **kwargs):  # noqa: E501
        """get_catalog_mode  # noqa: E501

        Gets the catalog mode, which specifies how GeoServer will advertise secured layers and behave when a secured layer is accessed without the necessary privileges.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_catalog_mode_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CatalogMode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_catalog_mode" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/catalog', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CatalogMode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_master_pw(self, **kwargs):  # noqa: E501
        """Get keystore password  # noqa: E501

        Displays the keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_master_pw(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MasterPW
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_master_pw_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_master_pw_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_master_pw_with_http_info(self, **kwargs):  # noqa: E501
        """Get keystore password  # noqa: E501

        Displays the keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_master_pw_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MasterPW
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_master_pw" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/masterpw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MasterPW',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_self_password(self, **kwargs):  # noqa: E501
        """get_self_password  # noqa: E501

        Invalid. Use PUT to change password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_self_password(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_self_password_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_self_password_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_self_password_with_http_info(self, **kwargs):  # noqa: E501
        """get_self_password  # noqa: E501

        Invalid. Use PUT to change password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_self_password_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_self_password" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/self/password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_acl_layer(self, rule, **kwargs):  # noqa: E501
        """post_acl_layer  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_acl_layer(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_acl_layer_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.post_acl_layer_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def post_acl_layer_with_http_info(self, rule, **kwargs):  # noqa: E501
        """post_acl_layer  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_acl_layer_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_acl_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `post_acl_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/layers/{rule}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_acl_layers(self, acl_layers_body, **kwargs):  # noqa: E501
        """Add layer rule(s)  # noqa: E501

        Adds one or more new layer-based rules to the list of security rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_acl_layers(acl_layers_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLLayers acl_layers_body: The new rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_acl_layers_with_http_info(acl_layers_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_acl_layers_with_http_info(acl_layers_body, **kwargs)  # noqa: E501
            return data

    def post_acl_layers_with_http_info(self, acl_layers_body, **kwargs):  # noqa: E501
        """Add layer rule(s)  # noqa: E501

        Adds one or more new layer-based rules to the list of security rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_acl_layers_with_http_info(acl_layers_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLLayers acl_layers_body: The new rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acl_layers_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_acl_layers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acl_layers_body' is set
        if self.api_client.client_side_validation and ('acl_layers_body' not in params or
                                                       params['acl_layers_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `acl_layers_body` when calling `post_acl_layers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'acl_layers_body' in params:
            body_params = params['acl_layers_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/layers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_acl_service(self, rule, **kwargs):  # noqa: E501
        """post_acl_service  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_acl_service(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_acl_service_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.post_acl_service_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def post_acl_service_with_http_info(self, rule, **kwargs):  # noqa: E501
        """post_acl_service  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_acl_service_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_acl_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `post_acl_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/services/{rule}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_acl_services(self, acl_services_body, **kwargs):  # noqa: E501
        """Add service rule(s)  # noqa: E501

        Adds one or more new service-based rules to the list of security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_acl_services(acl_services_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLServices acl_services_body: The new rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_acl_services_with_http_info(acl_services_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_acl_services_with_http_info(acl_services_body, **kwargs)  # noqa: E501
            return data

    def post_acl_services_with_http_info(self, acl_services_body, **kwargs):  # noqa: E501
        """Add service rule(s)  # noqa: E501

        Adds one or more new service-based rules to the list of security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_acl_services_with_http_info(acl_services_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLServices acl_services_body: The new rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acl_services_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_acl_services" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acl_services_body' is set
        if self.api_client.client_side_validation and ('acl_services_body' not in params or
                                                       params['acl_services_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `acl_services_body` when calling `post_acl_services`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'acl_services_body' in params:
            body_params = params['acl_services_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/services', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_aclrest_rule(self, rule, **kwargs):  # noqa: E501
        """post_aclrest_rule  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_aclrest_rule(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The REST rule, specified as \\<URL Ant pattern\\>;\\<comma separated list of HTTP methods\\>. Examples are  - /**;GET - /**;POST,DELETE,PUT  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_aclrest_rule_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.post_aclrest_rule_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def post_aclrest_rule_with_http_info(self, rule, **kwargs):  # noqa: E501
        """post_aclrest_rule  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_aclrest_rule_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The REST rule, specified as \\<URL Ant pattern\\>;\\<comma separated list of HTTP methods\\>. Examples are  - /**;GET - /**;POST,DELETE,PUT  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_aclrest_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `post_aclrest_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/rest/{rule}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_aclrest_rules(self, aclrest_body, **kwargs):  # noqa: E501
        """Add REST access rule(s)  # noqa: E501

        Adds one or more new REST access rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_aclrest_rules(aclrest_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLREST aclrest_body: The new rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_aclrest_rules_with_http_info(aclrest_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_aclrest_rules_with_http_info(aclrest_body, **kwargs)  # noqa: E501
            return data

    def post_aclrest_rules_with_http_info(self, aclrest_body, **kwargs):  # noqa: E501
        """Add REST access rule(s)  # noqa: E501

        Adds one or more new REST access rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_aclrest_rules_with_http_info(aclrest_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLREST aclrest_body: The new rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclrest_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_aclrest_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclrest_body' is set
        if self.api_client.client_side_validation and ('aclrest_body' not in params or
                                                       params['aclrest_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aclrest_body` when calling `post_aclrest_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aclrest_body' in params:
            body_params = params['aclrest_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/rest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_catalog_mode(self, **kwargs):  # noqa: E501
        """post_catalog_mode  # noqa: E501

        Invalid. Use PUT to change catalog mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_catalog_mode(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_catalog_mode_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_catalog_mode_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_catalog_mode_with_http_info(self, **kwargs):  # noqa: E501
        """post_catalog_mode  # noqa: E501

        Invalid. Use PUT to change catalog mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_catalog_mode_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_catalog_mode" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/catalog', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_master_pw(self, **kwargs):  # noqa: E501
        """post_master_pw  # noqa: E501

        Invalid. Use PUT to change keystore password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_master_pw(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_master_pw_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_master_pw_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_master_pw_with_http_info(self, **kwargs):  # noqa: E501
        """post_master_pw  # noqa: E501

        Invalid. Use PUT to change keystore password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_master_pw_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_master_pw" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/masterpw', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_self_password(self, **kwargs):  # noqa: E501
        """post_self_password  # noqa: E501

        Invalid. Use PUT to change password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_self_password(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_self_password_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_self_password_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_self_password_with_http_info(self, **kwargs):  # noqa: E501
        """post_self_password  # noqa: E501

        Invalid. Use PUT to change password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_self_password_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_self_password" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/self/password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_acl_layer(self, rule, **kwargs):  # noqa: E501
        """put_acl_layer  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_acl_layer(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_acl_layer_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.put_acl_layer_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def put_acl_layer_with_http_info(self, rule, **kwargs):  # noqa: E501
        """put_acl_layer  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_acl_layer_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_acl_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `put_acl_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/layers/{rule}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_acl_layers(self, acl_layers_body, **kwargs):  # noqa: E501
        """Edit layer rule(s)  # noqa: E501

        Edits one or more layer-based rules in the list of security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_acl_layers(acl_layers_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLLayers acl_layers_body: The altered rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_acl_layers_with_http_info(acl_layers_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_acl_layers_with_http_info(acl_layers_body, **kwargs)  # noqa: E501
            return data

    def put_acl_layers_with_http_info(self, acl_layers_body, **kwargs):  # noqa: E501
        """Edit layer rule(s)  # noqa: E501

        Edits one or more layer-based rules in the list of security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_acl_layers_with_http_info(acl_layers_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLLayers acl_layers_body: The altered rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acl_layers_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_acl_layers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acl_layers_body' is set
        if self.api_client.client_side_validation and ('acl_layers_body' not in params or
                                                       params['acl_layers_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `acl_layers_body` when calling `put_acl_layers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'acl_layers_body' in params:
            body_params = params['acl_layers_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/layers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_acl_service(self, rule, **kwargs):  # noqa: E501
        """put_acl_service  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_acl_service(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_acl_service_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.put_acl_service_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def put_acl_service_with_http_info(self, rule, **kwargs):  # noqa: E501
        """put_acl_service  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_acl_service_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_acl_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `put_acl_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/services/{rule}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_acl_services(self, acl_services_body, **kwargs):  # noqa: E501
        """Edit service rule(s)  # noqa: E501

        Edits one or more service-based rules in the list of security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_acl_services(acl_services_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLServices acl_services_body: The altered rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_acl_services_with_http_info(acl_services_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_acl_services_with_http_info(acl_services_body, **kwargs)  # noqa: E501
            return data

    def put_acl_services_with_http_info(self, acl_services_body, **kwargs):  # noqa: E501
        """Edit service rule(s)  # noqa: E501

        Edits one or more service-based rules in the list of security rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_acl_services_with_http_info(acl_services_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLServices acl_services_body: The altered rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acl_services_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_acl_services" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acl_services_body' is set
        if self.api_client.client_side_validation and ('acl_services_body' not in params or
                                                       params['acl_services_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `acl_services_body` when calling `put_acl_services`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'acl_services_body' in params:
            body_params = params['acl_services_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/services', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_aclrest_rule(self, rule, **kwargs):  # noqa: E501
        """put_aclrest_rule  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_aclrest_rule(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The REST rule, specified as \\<URL Ant pattern\\>;\\<comma separated list of HTTP methods\\>. Examples are  - /**;GET - /**;POST,DELETE,PUT  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_aclrest_rule_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.put_aclrest_rule_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def put_aclrest_rule_with_http_info(self, rule, **kwargs):  # noqa: E501
        """put_aclrest_rule  # noqa: E501

        Has no effect. Endpoint that includes a specific rule is only used with DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_aclrest_rule_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule: The REST rule, specified as \\<URL Ant pattern\\>;\\<comma separated list of HTTP methods\\>. Examples are  - /**;GET - /**;POST,DELETE,PUT  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_aclrest_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ('rule' not in params or
                                                       params['rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rule` when calling `put_aclrest_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/rest/{rule}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_aclrest_rules(self, aclrest_body, **kwargs):  # noqa: E501
        """Edit REST access rule(s)  # noqa: E501

        Edits one or more REST access rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_aclrest_rules(aclrest_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLREST aclrest_body: The altered rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_aclrest_rules_with_http_info(aclrest_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_aclrest_rules_with_http_info(aclrest_body, **kwargs)  # noqa: E501
            return data

    def put_aclrest_rules_with_http_info(self, aclrest_body, **kwargs):  # noqa: E501
        """Edit REST access rule(s)  # noqa: E501

        Edits one or more REST access rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_aclrest_rules_with_http_info(aclrest_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ACLREST aclrest_body: The altered rules to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclrest_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_aclrest_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclrest_body' is set
        if self.api_client.client_side_validation and ('aclrest_body' not in params or
                                                       params['aclrest_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aclrest_body` when calling `put_aclrest_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aclrest_body' in params:
            body_params = params['aclrest_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/rest', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_master_pw(self, master_pw_body, **kwargs):  # noqa: E501
        """Update keystore password  # noqa: E501

        Changes keystore password. Must supply current keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_master_pw(master_pw_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateMasterPW master_pw_body: The old and new keystore password information to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_master_pw_with_http_info(master_pw_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_master_pw_with_http_info(master_pw_body, **kwargs)  # noqa: E501
            return data

    def put_master_pw_with_http_info(self, master_pw_body, **kwargs):  # noqa: E501
        """Update keystore password  # noqa: E501

        Changes keystore password. Must supply current keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_master_pw_with_http_info(master_pw_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateMasterPW master_pw_body: The old and new keystore password information to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['master_pw_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_master_pw" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'master_pw_body' is set
        if self.api_client.client_side_validation and ('master_pw_body' not in params or
                                                       params['master_pw_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `master_pw_body` when calling `put_master_pw`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'master_pw_body' in params:
            body_params = params['master_pw_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/masterpw', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_self_password(self, self_password_body, **kwargs):  # noqa: E501
        """Update password  # noqa: E501

        Updates the password for the account used to issue the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_self_password(self_password_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SelfPassword self_password_body: The catalog mode information to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_self_password_with_http_info(self_password_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_self_password_with_http_info(self_password_body, **kwargs)  # noqa: E501
            return data

    def put_self_password_with_http_info(self, self_password_body, **kwargs):  # noqa: E501
        """Update password  # noqa: E501

        Updates the password for the account used to issue the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_self_password_with_http_info(self_password_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SelfPassword self_password_body: The catalog mode information to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['self_password_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_self_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'self_password_body' is set
        if self.api_client.client_side_validation and ('self_password_body' not in params or
                                                       params['self_password_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `self_password_body` when calling `put_self_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'self_password_body' in params:
            body_params = params['self_password_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/self/password', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_security_acl_catalog_put(self, catalog_mode_body, **kwargs):  # noqa: E501
        """Update catalog mode  # noqa: E501

        Changes catalog mode. The mode must be one of HIDE, MIXED, or CHALLENGE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_security_acl_catalog_put(catalog_mode_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogMode catalog_mode_body: The catalog mode information to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_security_acl_catalog_put_with_http_info(catalog_mode_body, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_security_acl_catalog_put_with_http_info(catalog_mode_body, **kwargs)  # noqa: E501
            return data

    def rest_security_acl_catalog_put_with_http_info(self, catalog_mode_body, **kwargs):  # noqa: E501
        """Update catalog mode  # noqa: E501

        Changes catalog mode. The mode must be one of HIDE, MIXED, or CHALLENGE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_security_acl_catalog_put_with_http_info(catalog_mode_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogMode catalog_mode_body: The catalog mode information to upload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_mode_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_security_acl_catalog_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_mode_body' is set
        if self.api_client.client_side_validation and ('catalog_mode_body' not in params or
                                                       params['catalog_mode_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `catalog_mode_body` when calling `rest_security_acl_catalog_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'catalog_mode_body' in params:
            body_params = params['catalog_mode_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/security/acl/catalog', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
