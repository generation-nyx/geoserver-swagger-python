# coding: utf-8

"""
    GeoServer Coverages

    A coverage is a raster data set which originates from a coverage store.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CoverageInfoGridTransform(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scale_x': 'float',
        'scale_y': 'float',
        'shear_x': 'float',
        'shear_y': 'float',
        'translate_x': 'float',
        'translatex_y': 'float'
    }

    attribute_map = {
        'scale_x': 'scaleX',
        'scale_y': 'scaleY',
        'shear_x': 'shearX',
        'shear_y': 'shearY',
        'translate_x': 'translateX',
        'translatex_y': 'translatexY'
    }

    def __init__(self, scale_x=None, scale_y=None, shear_x=None, shear_y=None, translate_x=None, translatex_y=None, _configuration=None):  # noqa: E501
        """CoverageInfoGridTransform - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._scale_x = None
        self._scale_y = None
        self._shear_x = None
        self._shear_y = None
        self._translate_x = None
        self._translatex_y = None
        self.discriminator = None

        if scale_x is not None:
            self.scale_x = scale_x
        if scale_y is not None:
            self.scale_y = scale_y
        if shear_x is not None:
            self.shear_x = shear_x
        if shear_y is not None:
            self.shear_y = shear_y
        if translate_x is not None:
            self.translate_x = translate_x
        if translatex_y is not None:
            self.translatex_y = translatex_y

    @property
    def scale_x(self):
        """Gets the scale_x of this CoverageInfoGridTransform.  # noqa: E501

        scale value to apply in X  # noqa: E501

        :return: The scale_x of this CoverageInfoGridTransform.  # noqa: E501
        :rtype: float
        """
        return self._scale_x

    @scale_x.setter
    def scale_x(self, scale_x):
        """Sets the scale_x of this CoverageInfoGridTransform.

        scale value to apply in X  # noqa: E501

        :param scale_x: The scale_x of this CoverageInfoGridTransform.  # noqa: E501
        :type: float
        """

        self._scale_x = scale_x

    @property
    def scale_y(self):
        """Gets the scale_y of this CoverageInfoGridTransform.  # noqa: E501

        scale value to apply in Y  # noqa: E501

        :return: The scale_y of this CoverageInfoGridTransform.  # noqa: E501
        :rtype: float
        """
        return self._scale_y

    @scale_y.setter
    def scale_y(self, scale_y):
        """Sets the scale_y of this CoverageInfoGridTransform.

        scale value to apply in Y  # noqa: E501

        :param scale_y: The scale_y of this CoverageInfoGridTransform.  # noqa: E501
        :type: float
        """

        self._scale_y = scale_y

    @property
    def shear_x(self):
        """Gets the shear_x of this CoverageInfoGridTransform.  # noqa: E501

        shear value to apply in X  # noqa: E501

        :return: The shear_x of this CoverageInfoGridTransform.  # noqa: E501
        :rtype: float
        """
        return self._shear_x

    @shear_x.setter
    def shear_x(self, shear_x):
        """Sets the shear_x of this CoverageInfoGridTransform.

        shear value to apply in X  # noqa: E501

        :param shear_x: The shear_x of this CoverageInfoGridTransform.  # noqa: E501
        :type: float
        """

        self._shear_x = shear_x

    @property
    def shear_y(self):
        """Gets the shear_y of this CoverageInfoGridTransform.  # noqa: E501

        shear value to apply in Y  # noqa: E501

        :return: The shear_y of this CoverageInfoGridTransform.  # noqa: E501
        :rtype: float
        """
        return self._shear_y

    @shear_y.setter
    def shear_y(self, shear_y):
        """Sets the shear_y of this CoverageInfoGridTransform.

        shear value to apply in Y  # noqa: E501

        :param shear_y: The shear_y of this CoverageInfoGridTransform.  # noqa: E501
        :type: float
        """

        self._shear_y = shear_y

    @property
    def translate_x(self):
        """Gets the translate_x of this CoverageInfoGridTransform.  # noqa: E501

        translation to apply in X  # noqa: E501

        :return: The translate_x of this CoverageInfoGridTransform.  # noqa: E501
        :rtype: float
        """
        return self._translate_x

    @translate_x.setter
    def translate_x(self, translate_x):
        """Sets the translate_x of this CoverageInfoGridTransform.

        translation to apply in X  # noqa: E501

        :param translate_x: The translate_x of this CoverageInfoGridTransform.  # noqa: E501
        :type: float
        """

        self._translate_x = translate_x

    @property
    def translatex_y(self):
        """Gets the translatex_y of this CoverageInfoGridTransform.  # noqa: E501

        translation to apply in Y  # noqa: E501

        :return: The translatex_y of this CoverageInfoGridTransform.  # noqa: E501
        :rtype: float
        """
        return self._translatex_y

    @translatex_y.setter
    def translatex_y(self, translatex_y):
        """Sets the translatex_y of this CoverageInfoGridTransform.

        translation to apply in Y  # noqa: E501

        :param translatex_y: The translatex_y of this CoverageInfoGridTransform.  # noqa: E501
        :type: float
        """

        self._translatex_y = translatex_y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoverageInfoGridTransform, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoverageInfoGridTransform):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoverageInfoGridTransform):
            return True

        return self.to_dict() != other.to_dict()
