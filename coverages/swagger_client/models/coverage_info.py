# coding: utf-8

"""
    GeoServer Coverages

    A coverage is a raster data set which originates from a coverage store.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CoverageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'native_name': 'str',
        'namespace': 'CoverageInfoNamespace',
        'title': 'str',
        'abstract': 'str',
        'default_interpolation_method': 'str',
        'keywords': 'CoverageInfoKeywords',
        'metadatalinks': 'CoverageInfoMetadatalinks',
        'data_links': 'CoverageInfoDataLinks',
        'native_crs': 'str',
        'srs': 'str',
        'native_bounding_box': 'CoverageInfoNativeBoundingBox',
        'lat_lon_bounding_box': 'CoverageInfoLatLonBoundingBox',
        'metadata': 'list[MetadataEntry]',
        'store': 'CoverageInfoStore',
        'cql_filter': 'str',
        'max_features': 'int',
        'num_decimals': 'float',
        'response_srs': 'CoverageInfoResponseSRS',
        'overriding_service_srs': 'bool',
        'skip_number_matched': 'bool',
        'circular_arc_present': 'bool',
        'linearization_tolerance': 'float',
        'attributes': 'CoverageInfoAttributes',
        'dimensions': 'CoverageInfoDimensions',
        'grid': 'CoverageInfoGrid'
    }

    attribute_map = {
        'name': 'name',
        'native_name': 'nativeName',
        'namespace': 'namespace',
        'title': 'title',
        'abstract': 'abstract',
        'default_interpolation_method': 'defaultInterpolationMethod',
        'keywords': 'keywords',
        'metadatalinks': 'metadatalinks',
        'data_links': 'dataLinks',
        'native_crs': 'nativeCRS',
        'srs': 'srs',
        'native_bounding_box': 'nativeBoundingBox',
        'lat_lon_bounding_box': 'latLonBoundingBox',
        'metadata': 'metadata',
        'store': 'store',
        'cql_filter': 'cqlFilter',
        'max_features': 'maxFeatures',
        'num_decimals': 'numDecimals',
        'response_srs': 'responseSRS',
        'overriding_service_srs': 'overridingServiceSRS',
        'skip_number_matched': 'skipNumberMatched',
        'circular_arc_present': 'circularArcPresent',
        'linearization_tolerance': 'linearizationTolerance',
        'attributes': 'attributes',
        'dimensions': 'dimensions',
        'grid': 'grid'
    }

    def __init__(self, name=None, native_name=None, namespace=None, title=None, abstract=None, default_interpolation_method=None, keywords=None, metadatalinks=None, data_links=None, native_crs=None, srs=None, native_bounding_box=None, lat_lon_bounding_box=None, metadata=None, store=None, cql_filter=None, max_features=None, num_decimals=None, response_srs=None, overriding_service_srs=None, skip_number_matched=None, circular_arc_present=None, linearization_tolerance=None, attributes=None, dimensions=None, grid=None, _configuration=None):  # noqa: E501
        """CoverageInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._native_name = None
        self._namespace = None
        self._title = None
        self._abstract = None
        self._default_interpolation_method = None
        self._keywords = None
        self._metadatalinks = None
        self._data_links = None
        self._native_crs = None
        self._srs = None
        self._native_bounding_box = None
        self._lat_lon_bounding_box = None
        self._metadata = None
        self._store = None
        self._cql_filter = None
        self._max_features = None
        self._num_decimals = None
        self._response_srs = None
        self._overriding_service_srs = None
        self._skip_number_matched = None
        self._circular_arc_present = None
        self._linearization_tolerance = None
        self._attributes = None
        self._dimensions = None
        self._grid = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if native_name is not None:
            self.native_name = native_name
        if namespace is not None:
            self.namespace = namespace
        if title is not None:
            self.title = title
        if abstract is not None:
            self.abstract = abstract
        if default_interpolation_method is not None:
            self.default_interpolation_method = default_interpolation_method
        if keywords is not None:
            self.keywords = keywords
        if metadatalinks is not None:
            self.metadatalinks = metadatalinks
        if data_links is not None:
            self.data_links = data_links
        if native_crs is not None:
            self.native_crs = native_crs
        if srs is not None:
            self.srs = srs
        if native_bounding_box is not None:
            self.native_bounding_box = native_bounding_box
        if lat_lon_bounding_box is not None:
            self.lat_lon_bounding_box = lat_lon_bounding_box
        if metadata is not None:
            self.metadata = metadata
        if store is not None:
            self.store = store
        if cql_filter is not None:
            self.cql_filter = cql_filter
        if max_features is not None:
            self.max_features = max_features
        if num_decimals is not None:
            self.num_decimals = num_decimals
        if response_srs is not None:
            self.response_srs = response_srs
        if overriding_service_srs is not None:
            self.overriding_service_srs = overriding_service_srs
        if skip_number_matched is not None:
            self.skip_number_matched = skip_number_matched
        if circular_arc_present is not None:
            self.circular_arc_present = circular_arc_present
        if linearization_tolerance is not None:
            self.linearization_tolerance = linearization_tolerance
        if attributes is not None:
            self.attributes = attributes
        if dimensions is not None:
            self.dimensions = dimensions
        if grid is not None:
            self.grid = grid

    @property
    def name(self):
        """Gets the name of this CoverageInfo.  # noqa: E501

        The name of the resource. This name corresponds to the \"published\" name of the resource.  # noqa: E501

        :return: The name of this CoverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CoverageInfo.

        The name of the resource. This name corresponds to the \"published\" name of the resource.  # noqa: E501

        :param name: The name of this CoverageInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def native_name(self):
        """Gets the native_name of this CoverageInfo.  # noqa: E501

        The native name of the resource. This name corresponds to the physical resource that feature type is derived from -- a shapefile name, a database table, etc...  # noqa: E501

        :return: The native_name of this CoverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._native_name

    @native_name.setter
    def native_name(self, native_name):
        """Sets the native_name of this CoverageInfo.

        The native name of the resource. This name corresponds to the physical resource that feature type is derived from -- a shapefile name, a database table, etc...  # noqa: E501

        :param native_name: The native_name of this CoverageInfo.  # noqa: E501
        :type: str
        """

        self._native_name = native_name

    @property
    def namespace(self):
        """Gets the namespace of this CoverageInfo.  # noqa: E501


        :return: The namespace of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoNamespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CoverageInfo.


        :param namespace: The namespace of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoNamespace
        """

        self._namespace = namespace

    @property
    def title(self):
        """Gets the title of this CoverageInfo.  # noqa: E501

        The title of the resource. This is usually something that is meant to be displayed in a user interface.  # noqa: E501

        :return: The title of this CoverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CoverageInfo.

        The title of the resource. This is usually something that is meant to be displayed in a user interface.  # noqa: E501

        :param title: The title of this CoverageInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def abstract(self):
        """Gets the abstract of this CoverageInfo.  # noqa: E501

        A description of the resource. This is usually something that is meant to be displayed in a user interface.  # noqa: E501

        :return: The abstract of this CoverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this CoverageInfo.

        A description of the resource. This is usually something that is meant to be displayed in a user interface.  # noqa: E501

        :param abstract: The abstract of this CoverageInfo.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def default_interpolation_method(self):
        """Gets the default_interpolation_method of this CoverageInfo.  # noqa: E501

        Default resampling (interpolation) method that will be used for this coverage.  # noqa: E501

        :return: The default_interpolation_method of this CoverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._default_interpolation_method

    @default_interpolation_method.setter
    def default_interpolation_method(self, default_interpolation_method):
        """Sets the default_interpolation_method of this CoverageInfo.

        Default resampling (interpolation) method that will be used for this coverage.  # noqa: E501

        :param default_interpolation_method: The default_interpolation_method of this CoverageInfo.  # noqa: E501
        :type: str
        """

        self._default_interpolation_method = default_interpolation_method

    @property
    def keywords(self):
        """Gets the keywords of this CoverageInfo.  # noqa: E501


        :return: The keywords of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoKeywords
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this CoverageInfo.


        :param keywords: The keywords of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoKeywords
        """

        self._keywords = keywords

    @property
    def metadatalinks(self):
        """Gets the metadatalinks of this CoverageInfo.  # noqa: E501


        :return: The metadatalinks of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoMetadatalinks
        """
        return self._metadatalinks

    @metadatalinks.setter
    def metadatalinks(self, metadatalinks):
        """Sets the metadatalinks of this CoverageInfo.


        :param metadatalinks: The metadatalinks of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoMetadatalinks
        """

        self._metadatalinks = metadatalinks

    @property
    def data_links(self):
        """Gets the data_links of this CoverageInfo.  # noqa: E501


        :return: The data_links of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoDataLinks
        """
        return self._data_links

    @data_links.setter
    def data_links(self, data_links):
        """Sets the data_links of this CoverageInfo.


        :param data_links: The data_links of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoDataLinks
        """

        self._data_links = data_links

    @property
    def native_crs(self):
        """Gets the native_crs of this CoverageInfo.  # noqa: E501

        The native coordinate reference system object of the resource.  # noqa: E501

        :return: The native_crs of this CoverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._native_crs

    @native_crs.setter
    def native_crs(self, native_crs):
        """Sets the native_crs of this CoverageInfo.

        The native coordinate reference system object of the resource.  # noqa: E501

        :param native_crs: The native_crs of this CoverageInfo.  # noqa: E501
        :type: str
        """

        self._native_crs = native_crs

    @property
    def srs(self):
        """Gets the srs of this CoverageInfo.  # noqa: E501

        Returns the identifier of coordinate reference system of the resource.  # noqa: E501

        :return: The srs of this CoverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._srs

    @srs.setter
    def srs(self, srs):
        """Sets the srs of this CoverageInfo.

        Returns the identifier of coordinate reference system of the resource.  # noqa: E501

        :param srs: The srs of this CoverageInfo.  # noqa: E501
        :type: str
        """

        self._srs = srs

    @property
    def native_bounding_box(self):
        """Gets the native_bounding_box of this CoverageInfo.  # noqa: E501


        :return: The native_bounding_box of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoNativeBoundingBox
        """
        return self._native_bounding_box

    @native_bounding_box.setter
    def native_bounding_box(self, native_bounding_box):
        """Sets the native_bounding_box of this CoverageInfo.


        :param native_bounding_box: The native_bounding_box of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoNativeBoundingBox
        """

        self._native_bounding_box = native_bounding_box

    @property
    def lat_lon_bounding_box(self):
        """Gets the lat_lon_bounding_box of this CoverageInfo.  # noqa: E501


        :return: The lat_lon_bounding_box of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoLatLonBoundingBox
        """
        return self._lat_lon_bounding_box

    @lat_lon_bounding_box.setter
    def lat_lon_bounding_box(self, lat_lon_bounding_box):
        """Sets the lat_lon_bounding_box of this CoverageInfo.


        :param lat_lon_bounding_box: The lat_lon_bounding_box of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoLatLonBoundingBox
        """

        self._lat_lon_bounding_box = lat_lon_bounding_box

    @property
    def metadata(self):
        """Gets the metadata of this CoverageInfo.  # noqa: E501

        A list of key/value metadata pairs.  # noqa: E501

        :return: The metadata of this CoverageInfo.  # noqa: E501
        :rtype: list[MetadataEntry]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CoverageInfo.

        A list of key/value metadata pairs.  # noqa: E501

        :param metadata: The metadata of this CoverageInfo.  # noqa: E501
        :type: list[MetadataEntry]
        """

        self._metadata = metadata

    @property
    def store(self):
        """Gets the store of this CoverageInfo.  # noqa: E501


        :return: The store of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoStore
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this CoverageInfo.


        :param store: The store of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoStore
        """

        self._store = store

    @property
    def cql_filter(self):
        """Gets the cql_filter of this CoverageInfo.  # noqa: E501

        The ECQL string used as default feature type filter  # noqa: E501

        :return: The cql_filter of this CoverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._cql_filter

    @cql_filter.setter
    def cql_filter(self, cql_filter):
        """Sets the cql_filter of this CoverageInfo.

        The ECQL string used as default feature type filter  # noqa: E501

        :param cql_filter: The cql_filter of this CoverageInfo.  # noqa: E501
        :type: str
        """

        self._cql_filter = cql_filter

    @property
    def max_features(self):
        """Gets the max_features of this CoverageInfo.  # noqa: E501

        A cap on the number of features that a query against this type can return.  # noqa: E501

        :return: The max_features of this CoverageInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_features

    @max_features.setter
    def max_features(self, max_features):
        """Sets the max_features of this CoverageInfo.

        A cap on the number of features that a query against this type can return.  # noqa: E501

        :param max_features: The max_features of this CoverageInfo.  # noqa: E501
        :type: int
        """

        self._max_features = max_features

    @property
    def num_decimals(self):
        """Gets the num_decimals of this CoverageInfo.  # noqa: E501

        The number of decimal places to use when encoding floating point numbers from data of this feature type.  # noqa: E501

        :return: The num_decimals of this CoverageInfo.  # noqa: E501
        :rtype: float
        """
        return self._num_decimals

    @num_decimals.setter
    def num_decimals(self, num_decimals):
        """Sets the num_decimals of this CoverageInfo.

        The number of decimal places to use when encoding floating point numbers from data of this feature type.  # noqa: E501

        :param num_decimals: The num_decimals of this CoverageInfo.  # noqa: E501
        :type: float
        """

        self._num_decimals = num_decimals

    @property
    def response_srs(self):
        """Gets the response_srs of this CoverageInfo.  # noqa: E501


        :return: The response_srs of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoResponseSRS
        """
        return self._response_srs

    @response_srs.setter
    def response_srs(self, response_srs):
        """Sets the response_srs of this CoverageInfo.


        :param response_srs: The response_srs of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoResponseSRS
        """

        self._response_srs = response_srs

    @property
    def overriding_service_srs(self):
        """Gets the overriding_service_srs of this CoverageInfo.  # noqa: E501

        True if this feature type info is overriding the WFS global SRS list  # noqa: E501

        :return: The overriding_service_srs of this CoverageInfo.  # noqa: E501
        :rtype: bool
        """
        return self._overriding_service_srs

    @overriding_service_srs.setter
    def overriding_service_srs(self, overriding_service_srs):
        """Sets the overriding_service_srs of this CoverageInfo.

        True if this feature type info is overriding the WFS global SRS list  # noqa: E501

        :param overriding_service_srs: The overriding_service_srs of this CoverageInfo.  # noqa: E501
        :type: bool
        """

        self._overriding_service_srs = overriding_service_srs

    @property
    def skip_number_matched(self):
        """Gets the skip_number_matched of this CoverageInfo.  # noqa: E501

        True if this feature type info is overriding the counting of numberMatched.  # noqa: E501

        :return: The skip_number_matched of this CoverageInfo.  # noqa: E501
        :rtype: bool
        """
        return self._skip_number_matched

    @skip_number_matched.setter
    def skip_number_matched(self, skip_number_matched):
        """Sets the skip_number_matched of this CoverageInfo.

        True if this feature type info is overriding the counting of numberMatched.  # noqa: E501

        :param skip_number_matched: The skip_number_matched of this CoverageInfo.  # noqa: E501
        :type: bool
        """

        self._skip_number_matched = skip_number_matched

    @property
    def circular_arc_present(self):
        """Gets the circular_arc_present of this CoverageInfo.  # noqa: E501


        :return: The circular_arc_present of this CoverageInfo.  # noqa: E501
        :rtype: bool
        """
        return self._circular_arc_present

    @circular_arc_present.setter
    def circular_arc_present(self, circular_arc_present):
        """Sets the circular_arc_present of this CoverageInfo.


        :param circular_arc_present: The circular_arc_present of this CoverageInfo.  # noqa: E501
        :type: bool
        """

        self._circular_arc_present = circular_arc_present

    @property
    def linearization_tolerance(self):
        """Gets the linearization_tolerance of this CoverageInfo.  # noqa: E501

        Tolerance used to linearize this feature type, as an absolute value expressed in the geometries own CRS  # noqa: E501

        :return: The linearization_tolerance of this CoverageInfo.  # noqa: E501
        :rtype: float
        """
        return self._linearization_tolerance

    @linearization_tolerance.setter
    def linearization_tolerance(self, linearization_tolerance):
        """Sets the linearization_tolerance of this CoverageInfo.

        Tolerance used to linearize this feature type, as an absolute value expressed in the geometries own CRS  # noqa: E501

        :param linearization_tolerance: The linearization_tolerance of this CoverageInfo.  # noqa: E501
        :type: float
        """

        self._linearization_tolerance = linearization_tolerance

    @property
    def attributes(self):
        """Gets the attributes of this CoverageInfo.  # noqa: E501


        :return: The attributes of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CoverageInfo.


        :param attributes: The attributes of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoAttributes
        """

        self._attributes = attributes

    @property
    def dimensions(self):
        """Gets the dimensions of this CoverageInfo.  # noqa: E501


        :return: The dimensions of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CoverageInfo.


        :param dimensions: The dimensions of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoDimensions
        """

        self._dimensions = dimensions

    @property
    def grid(self):
        """Gets the grid of this CoverageInfo.  # noqa: E501


        :return: The grid of this CoverageInfo.  # noqa: E501
        :rtype: CoverageInfoGrid
        """
        return self._grid

    @grid.setter
    def grid(self, grid):
        """Sets the grid of this CoverageInfo.


        :param grid: The grid of this CoverageInfo.  # noqa: E501
        :type: CoverageInfoGrid
        """

        self._grid = grid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoverageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoverageInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoverageInfo):
            return True

        return self.to_dict() != other.to_dict()
