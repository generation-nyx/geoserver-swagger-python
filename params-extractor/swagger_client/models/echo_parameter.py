# coding: utf-8

"""
    GeoServer Parameter Extractor

    A parameter extractor rule allows specific request parameters as URL path fragments instead of using the query string. A echo parameter makes sure that certain URL paratemers are added to the capabilities documents backlinks.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EchoParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'parameter': 'str',
        'activated': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'parameter': 'parameter',
        'activated': 'activated'
    }

    def __init__(self, id=None, parameter=None, activated=None, _configuration=None):  # noqa: E501
        """EchoParameter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._parameter = None
        self._activated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if parameter is not None:
            self.parameter = parameter
        if activated is not None:
            self.activated = activated

    @property
    def id(self):
        """Gets the id of this EchoParameter.  # noqa: E501

        identifier of the echo parameter  # noqa: E501

        :return: The id of this EchoParameter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EchoParameter.

        identifier of the echo parameter  # noqa: E501

        :param id: The id of this EchoParameter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parameter(self):
        """Gets the parameter of this EchoParameter.  # noqa: E501

        The parameter name  # noqa: E501

        :return: The parameter of this EchoParameter.  # noqa: E501
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this EchoParameter.

        The parameter name  # noqa: E501

        :param parameter: The parameter of this EchoParameter.  # noqa: E501
        :type: str
        """

        self._parameter = parameter

    @property
    def activated(self):
        """Gets the activated of this EchoParameter.  # noqa: E501

        Whether or not the parameter echoing is active  # noqa: E501

        :return: The activated of this EchoParameter.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this EchoParameter.

        Whether or not the parameter echoing is active  # noqa: E501

        :param activated: The activated of this EchoParameter.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EchoParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EchoParameter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EchoParameter):
            return True

        return self.to_dict() != other.to_dict()
