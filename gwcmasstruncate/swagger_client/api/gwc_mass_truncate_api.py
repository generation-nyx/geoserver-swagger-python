# coding: utf-8

"""
    GeoWebCache Mass Truncate

    The REST API for mass truncation provides a mechanism for completely clearing caches more conveniently than with the seeding system  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GwcMassTruncateApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def masstruncate_get(self, **kwargs):  # noqa: E501
        """Returns available request types for truncation  # noqa: E501

        Returns xml containing the request type capabilities for mass truncation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.masstruncate_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.masstruncate_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.masstruncate_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def masstruncate_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns available request types for truncation  # noqa: E501

        Returns xml containing the request type capabilities for mass truncation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.masstruncate_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method masstruncate_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/masstruncate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def masstruncate_post(self, request_type, **kwargs):  # noqa: E501
        """Issue a mass truncate request  # noqa: E501

        Issues a mass truncate request based on the request type parameter. truncateLayer, will clear all caches associated with a named layer, including all permutations of gridset, parameter filter values, and image formats.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.masstruncate_post(request_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request_type: The requestType parameter is used to control which cached tiles to truncate. (required)
        :param str layer: The layername to truncate
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.masstruncate_post_with_http_info(request_type, **kwargs)  # noqa: E501
        else:
            (data) = self.masstruncate_post_with_http_info(request_type, **kwargs)  # noqa: E501
            return data

    def masstruncate_post_with_http_info(self, request_type, **kwargs):  # noqa: E501
        """Issue a mass truncate request  # noqa: E501

        Issues a mass truncate request based on the request type parameter. truncateLayer, will clear all caches associated with a named layer, including all permutations of gridset, parameter filter values, and image formats.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.masstruncate_post_with_http_info(request_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request_type: The requestType parameter is used to control which cached tiles to truncate. (required)
        :param str layer: The layername to truncate
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_type', 'layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method masstruncate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_type' is set
        if self.api_client.client_side_validation and ('request_type' not in params or
                                                       params['request_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request_type` when calling `masstruncate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_type' in params:
            query_params.append(('requestType', params['request_type']))  # noqa: E501
        if 'layer' in params:
            query_params.append(('layer', params['layer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/masstruncate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
