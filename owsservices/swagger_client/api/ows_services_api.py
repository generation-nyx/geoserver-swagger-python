# coding: utf-8

"""
    OWS Services

    An OWS service refers to any of the OGC services that GeoServer supports, such as WFS, WMS, and WCS. These endpoints controls the settings of these services.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OWSServicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_oseo_settings(self, **kwargs):  # noqa: E501
        """delete_oseo_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_oseo_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_oseo_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_oseo_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_oseo_settings_with_http_info(self, **kwargs):  # noqa: E501
        """delete_oseo_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_oseo_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_oseo_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/oseo/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wcs_settings(self, **kwargs):  # noqa: E501
        """delete_wcs_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wcs_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wcs_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_wcs_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_wcs_settings_with_http_info(self, **kwargs):  # noqa: E501
        """delete_wcs_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wcs_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wcs_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wcs/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wcs_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """delete_wcs_workspace_settings  # noqa: E501

        Deletes a workspace-specific WCS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wcs_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wcs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_wcs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def delete_wcs_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """delete_wcs_workspace_settings  # noqa: E501

        Deletes a workspace-specific WCS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wcs_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wcs_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_wcs_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wcs/workspaces/{workspace}/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wfs_settings(self, **kwargs):  # noqa: E501
        """delete_wfs_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wfs_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wfs_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_wfs_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_wfs_settings_with_http_info(self, **kwargs):  # noqa: E501
        """delete_wfs_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wfs_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wfs_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wfs_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """delete_wfs_workspace_settings  # noqa: E501

        Deletes a workspace-specific WFS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wfs_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wfs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_wfs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def delete_wfs_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """delete_wfs_workspace_settings  # noqa: E501

        Deletes a workspace-specific WFS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wfs_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wfs_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_wfs_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/workspaces/{workspace}/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wms_settings(self, **kwargs):  # noqa: E501
        """delete_wms_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wms_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_wms_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_wms_settings_with_http_info(self, **kwargs):  # noqa: E501
        """delete_wms_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wms_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wms/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wms_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """delete_wms_workspace_settings  # noqa: E501

        Deletes a workspace-specific WMS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wms_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_wms_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def delete_wms_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """delete_wms_workspace_settings  # noqa: E501

        Deletes a workspace-specific WMS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wms_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_wms_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wms/workspaces/{workspace}/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wmts_settings(self, **kwargs):  # noqa: E501
        """delete_wmts_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wmts_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wmts_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_wmts_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_wmts_settings_with_http_info(self, **kwargs):  # noqa: E501
        """delete_wmts_settings  # noqa: E501

        Invalid. Use PUT to edit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wmts_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wmts_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wmts/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wmts_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """delete_wmts_workspace_settings  # noqa: E501

        Deletes a workspace-specific WMTS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wmts_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wmts_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_wmts_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def delete_wmts_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """delete_wmts_workspace_settings  # noqa: E501

        Deletes a workspace-specific WMTS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wmts_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wmts_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_wmts_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wmts/workspaces/{workspace}/settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_oseo_settings(self, **kwargs):  # noqa: E501
        """get_oseo_settings  # noqa: E501

        Retrieves Open Search for Earth Observation Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_oseo_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WFSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_oseo_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_oseo_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_oseo_settings_with_http_info(self, **kwargs):  # noqa: E501
        """get_oseo_settings  # noqa: E501

        Retrieves Open Search for Earth Observation Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_oseo_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WFSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_oseo_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/oseo/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WFSInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wcs_settings(self, **kwargs):  # noqa: E501
        """get_wcs_settings  # noqa: E501

        Retrieves Web Coverage Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wcs_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WCSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wcs_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_wcs_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_wcs_settings_with_http_info(self, **kwargs):  # noqa: E501
        """get_wcs_settings  # noqa: E501

        Retrieves Web Coverage Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wcs_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WCSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wcs_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wcs/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WCSInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wcs_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """get_wcs_workspace_settings  # noqa: E501

        Retrieves Web Coverage Service settings for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wcs_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: WCSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wcs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wcs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_wcs_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """get_wcs_workspace_settings  # noqa: E501

        Retrieves Web Coverage Service settings for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wcs_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: WCSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wcs_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_wcs_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wcs/workspaces/{workspace}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WCSInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wfs_settings(self, **kwargs):  # noqa: E501
        """get_wfs_settings  # noqa: E501

        Retrieves Web Feature Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wfs_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WFSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wfs_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_wfs_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_wfs_settings_with_http_info(self, **kwargs):  # noqa: E501
        """get_wfs_settings  # noqa: E501

        Retrieves Web Feature Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wfs_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WFSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wfs_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WFSInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wfs_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """get_wfs_workspace_settings  # noqa: E501

        Retrieves Web Feature Service settings for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wfs_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: WFSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wfs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wfs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_wfs_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """get_wfs_workspace_settings  # noqa: E501

        Retrieves Web Feature Service settings for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wfs_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: WFSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wfs_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_wfs_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/workspaces/{workspace}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WFSInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wms_settings(self, **kwargs):  # noqa: E501
        """get_wms_settings  # noqa: E501

        Retrieves Web Map Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WMSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wms_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_wms_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_wms_settings_with_http_info(self, **kwargs):  # noqa: E501
        """get_wms_settings  # noqa: E501

        Retrieves Web Map Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WMSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wms_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wms/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMSInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wms_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """get_wms_workspace_settings  # noqa: E501

        Retrieves Web Map Service settings for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: WMSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wms_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wms_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_wms_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """get_wms_workspace_settings  # noqa: E501

        Retrieves Web Map Service settings for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: WMSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wms_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_wms_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wms/workspaces/{workspace}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMSInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wmts_settings(self, **kwargs):  # noqa: E501
        """get_wmts_settings  # noqa: E501

        Retrieves Web Map Tile Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmts_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WMTSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wmts_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_wmts_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_wmts_settings_with_http_info(self, **kwargs):  # noqa: E501
        """get_wmts_settings  # noqa: E501

        Retrieves Web Map Tile Service settings globally for the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmts_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WMTSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wmts_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wmts/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMTSInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wmts_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """get_wmts_workspace_settings  # noqa: E501

        Retrieves Web Map Tile Service settings for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmts_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: WMTSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wmts_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wmts_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_wmts_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """get_wmts_workspace_settings  # noqa: E501

        Retrieves Web Map Tile Service settings for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmts_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: WMTSInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wmts_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_wmts_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wmts/workspaces/{workspace}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMTSInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_oseo_settings(self, **kwargs):  # noqa: E501
        """post_oseo_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_oseo_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_oseo_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_oseo_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_oseo_settings_with_http_info(self, **kwargs):  # noqa: E501
        """post_oseo_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_oseo_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_oseo_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/oseo/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wcs_settings(self, **kwargs):  # noqa: E501
        """post_wcs_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wcs_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wcs_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_wcs_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_wcs_settings_with_http_info(self, **kwargs):  # noqa: E501
        """post_wcs_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wcs_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wcs_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wcs/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wcs_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """post_wcs_workspace_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wcs_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wcs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.post_wcs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def post_wcs_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """post_wcs_workspace_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wcs_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wcs_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_wcs_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wcs/workspaces/{workspace}/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wfs_settings(self, **kwargs):  # noqa: E501
        """post_wfs_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wfs_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wfs_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_wfs_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_wfs_settings_with_http_info(self, **kwargs):  # noqa: E501
        """post_wfs_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wfs_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wfs_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wfs_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """post_wfs_workspace_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wfs_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wfs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.post_wfs_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def post_wfs_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """post_wfs_workspace_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wfs_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wfs_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_wfs_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/workspaces/{workspace}/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wms_settings(self, **kwargs):  # noqa: E501
        """post_wms_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wms_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_wms_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_wms_settings_with_http_info(self, **kwargs):  # noqa: E501
        """post_wms_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wms_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wms/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wms_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """post_wms_workspace_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wms_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.post_wms_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def post_wms_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """post_wms_workspace_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wms_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_wms_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wms/workspaces/{workspace}/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wmts_settings(self, **kwargs):  # noqa: E501
        """post_wmts_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wmts_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wmts_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_wmts_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_wmts_settings_with_http_info(self, **kwargs):  # noqa: E501
        """post_wmts_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wmts_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wmts_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wmts/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wmts_workspace_settings(self, workspace, **kwargs):  # noqa: E501
        """post_wmts_workspace_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wmts_workspace_settings(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wmts_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.post_wmts_workspace_settings_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def post_wmts_workspace_settings_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """post_wmts_workspace_settings  # noqa: E501

        Invalid. Use PUT to edit a service setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wmts_workspace_settings_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wmts_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_wmts_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wmts/workspaces/{workspace}/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_oseo_settings(self, oseo_settings_body, **kwargs):  # noqa: E501
        """put_oseo_settings  # noqa: E501

        Edits a global OSEO setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_oseo_settings(oseo_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WFSInfo oseo_settings_body: Body of the OSEO settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_oseo_settings_with_http_info(oseo_settings_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_oseo_settings_with_http_info(oseo_settings_body, **kwargs)  # noqa: E501
            return data

    def put_oseo_settings_with_http_info(self, oseo_settings_body, **kwargs):  # noqa: E501
        """put_oseo_settings  # noqa: E501

        Edits a global OSEO setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_oseo_settings_with_http_info(oseo_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WFSInfo oseo_settings_body: Body of the OSEO settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['oseo_settings_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_oseo_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'oseo_settings_body' is set
        if self.api_client.client_side_validation and ('oseo_settings_body' not in params or
                                                       params['oseo_settings_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `oseo_settings_body` when calling `put_oseo_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'oseo_settings_body' in params:
            body_params = params['oseo_settings_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/oseo/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wcs_settings(self, wcs_settings_body, **kwargs):  # noqa: E501
        """put_wcs_settings  # noqa: E501

        Edits a global WCS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wcs_settings(wcs_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WCSInfo wcs_settings_body: Body of the WCS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wcs_settings_with_http_info(wcs_settings_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wcs_settings_with_http_info(wcs_settings_body, **kwargs)  # noqa: E501
            return data

    def put_wcs_settings_with_http_info(self, wcs_settings_body, **kwargs):  # noqa: E501
        """put_wcs_settings  # noqa: E501

        Edits a global WCS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wcs_settings_with_http_info(wcs_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WCSInfo wcs_settings_body: Body of the WCS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wcs_settings_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wcs_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wcs_settings_body' is set
        if self.api_client.client_side_validation and ('wcs_settings_body' not in params or
                                                       params['wcs_settings_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wcs_settings_body` when calling `put_wcs_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wcs_settings_body' in params:
            body_params = params['wcs_settings_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wcs/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wcs_workspace_settings(self, workspace, wcs_settings_body, **kwargs):  # noqa: E501
        """put_wcs_workspace_settings  # noqa: E501

        Edits a workspace-specific WCS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wcs_workspace_settings(workspace, wcs_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param WCSInfo wcs_settings_body: Body of the WCS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wcs_workspace_settings_with_http_info(workspace, wcs_settings_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wcs_workspace_settings_with_http_info(workspace, wcs_settings_body, **kwargs)  # noqa: E501
            return data

    def put_wcs_workspace_settings_with_http_info(self, workspace, wcs_settings_body, **kwargs):  # noqa: E501
        """put_wcs_workspace_settings  # noqa: E501

        Edits a workspace-specific WCS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wcs_workspace_settings_with_http_info(workspace, wcs_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param WCSInfo wcs_settings_body: Body of the WCS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wcs_settings_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wcs_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_wcs_workspace_settings`")  # noqa: E501
        # verify the required parameter 'wcs_settings_body' is set
        if self.api_client.client_side_validation and ('wcs_settings_body' not in params or
                                                       params['wcs_settings_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wcs_settings_body` when calling `put_wcs_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wcs_settings_body' in params:
            body_params = params['wcs_settings_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wcs/workspaces/{workspace}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wfs_settings(self, wfs_settings_body, **kwargs):  # noqa: E501
        """put_wfs_settings  # noqa: E501

        Edits a global WFS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wfs_settings(wfs_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WFSInfo wfs_settings_body: Body of the WFS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wfs_settings_with_http_info(wfs_settings_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wfs_settings_with_http_info(wfs_settings_body, **kwargs)  # noqa: E501
            return data

    def put_wfs_settings_with_http_info(self, wfs_settings_body, **kwargs):  # noqa: E501
        """put_wfs_settings  # noqa: E501

        Edits a global WFS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wfs_settings_with_http_info(wfs_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WFSInfo wfs_settings_body: Body of the WFS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wfs_settings_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wfs_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wfs_settings_body' is set
        if self.api_client.client_side_validation and ('wfs_settings_body' not in params or
                                                       params['wfs_settings_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wfs_settings_body` when calling `put_wfs_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wfs_settings_body' in params:
            body_params = params['wfs_settings_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wfs_workspace_settings(self, workspace, wfs_settings_body, **kwargs):  # noqa: E501
        """put_wfs_workspace_settings  # noqa: E501

        Edits a workspace-specific WFS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wfs_workspace_settings(workspace, wfs_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param WFSInfo wfs_settings_body: Body of the WFS settings layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wfs_workspace_settings_with_http_info(workspace, wfs_settings_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wfs_workspace_settings_with_http_info(workspace, wfs_settings_body, **kwargs)  # noqa: E501
            return data

    def put_wfs_workspace_settings_with_http_info(self, workspace, wfs_settings_body, **kwargs):  # noqa: E501
        """put_wfs_workspace_settings  # noqa: E501

        Edits a workspace-specific WFS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wfs_workspace_settings_with_http_info(workspace, wfs_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param WFSInfo wfs_settings_body: Body of the WFS settings layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wfs_settings_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wfs_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_wfs_workspace_settings`")  # noqa: E501
        # verify the required parameter 'wfs_settings_body' is set
        if self.api_client.client_side_validation and ('wfs_settings_body' not in params or
                                                       params['wfs_settings_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wfs_settings_body` when calling `put_wfs_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wfs_settings_body' in params:
            body_params = params['wfs_settings_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wfs/workspaces/{workspace}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wms_settings(self, wms_settings_body, **kwargs):  # noqa: E501
        """put_wms_settings  # noqa: E501

        Edits a global WMS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_settings(wms_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WMSInfo wms_settings_body: Body of the WMS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wms_settings_with_http_info(wms_settings_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wms_settings_with_http_info(wms_settings_body, **kwargs)  # noqa: E501
            return data

    def put_wms_settings_with_http_info(self, wms_settings_body, **kwargs):  # noqa: E501
        """put_wms_settings  # noqa: E501

        Edits a global WMS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_settings_with_http_info(wms_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WMSInfo wms_settings_body: Body of the WMS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wms_settings_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wms_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wms_settings_body' is set
        if self.api_client.client_side_validation and ('wms_settings_body' not in params or
                                                       params['wms_settings_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wms_settings_body` when calling `put_wms_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wms_settings_body' in params:
            body_params = params['wms_settings_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wms/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wms_workspace_settings(self, workspace, wms_settings_body, **kwargs):  # noqa: E501
        """put_wms_workspace_settings  # noqa: E501

        Edits a workspace-specific WMS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_workspace_settings(workspace, wms_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param WMSInfo wms_settings_body: Body of the WMS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wms_workspace_settings_with_http_info(workspace, wms_settings_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wms_workspace_settings_with_http_info(workspace, wms_settings_body, **kwargs)  # noqa: E501
            return data

    def put_wms_workspace_settings_with_http_info(self, workspace, wms_settings_body, **kwargs):  # noqa: E501
        """put_wms_workspace_settings  # noqa: E501

        Edits a workspace-specific WMS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_workspace_settings_with_http_info(workspace, wms_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param WMSInfo wms_settings_body: Body of the WMS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wms_settings_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wms_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_wms_workspace_settings`")  # noqa: E501
        # verify the required parameter 'wms_settings_body' is set
        if self.api_client.client_side_validation and ('wms_settings_body' not in params or
                                                       params['wms_settings_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wms_settings_body` when calling `put_wms_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wms_settings_body' in params:
            body_params = params['wms_settings_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wms/workspaces/{workspace}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wmts_settings(self, wmts_settings_body, **kwargs):  # noqa: E501
        """put_wmts_settings  # noqa: E501

        Edits a global WMTS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wmts_settings(wmts_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WMTSInfo wmts_settings_body: Body of the WMTS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wmts_settings_with_http_info(wmts_settings_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wmts_settings_with_http_info(wmts_settings_body, **kwargs)  # noqa: E501
            return data

    def put_wmts_settings_with_http_info(self, wmts_settings_body, **kwargs):  # noqa: E501
        """put_wmts_settings  # noqa: E501

        Edits a global WMTS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wmts_settings_with_http_info(wmts_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WMTSInfo wmts_settings_body: Body of the WMTS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wmts_settings_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wmts_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wmts_settings_body' is set
        if self.api_client.client_side_validation and ('wmts_settings_body' not in params or
                                                       params['wmts_settings_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmts_settings_body` when calling `put_wmts_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wmts_settings_body' in params:
            body_params = params['wmts_settings_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wmts/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wmts_workspace_settings(self, workspace, wmts_settings_body, **kwargs):  # noqa: E501
        """put_wmts_workspace_settings  # noqa: E501

        Edits a workspace-specific WMTS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wmts_workspace_settings(workspace, wmts_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param WMTSInfo wmts_settings_body: Body of the WMTS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wmts_workspace_settings_with_http_info(workspace, wmts_settings_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wmts_workspace_settings_with_http_info(workspace, wmts_settings_body, **kwargs)  # noqa: E501
            return data

    def put_wmts_workspace_settings_with_http_info(self, workspace, wmts_settings_body, **kwargs):  # noqa: E501
        """put_wmts_workspace_settings  # noqa: E501

        Edits a workspace-specific WMTS setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wmts_workspace_settings_with_http_info(workspace, wmts_settings_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param WMTSInfo wmts_settings_body: Body of the WMTS settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmts_settings_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wmts_workspace_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_wmts_workspace_settings`")  # noqa: E501
        # verify the required parameter 'wmts_settings_body' is set
        if self.api_client.client_side_validation and ('wmts_settings_body' not in params or
                                                       params['wmts_settings_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmts_settings_body` when calling `put_wmts_workspace_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wmts_settings_body' in params:
            body_params = params['wmts_settings_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/services/wmts/workspaces/{workspace}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
