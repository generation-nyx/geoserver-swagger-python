# coding: utf-8

"""
    GeoWebCache GridSets

    A Grid Set is a set of tile grids associated with a coordinate reference system.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GridSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'srs': 'GridSetSrs',
        'extent': 'GridSetExtent',
        'align_top_left': 'bool',
        'resolutions': 'GridSetResolutions',
        'meters_per_unit': 'float',
        'pixel_size': 'float',
        'scale_names': 'GridSetScaleNames',
        'tile_height': 'int',
        'tile_width': 'int',
        'y_coordinate_first': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'srs': 'srs',
        'extent': 'extent',
        'align_top_left': 'alignTopLeft',
        'resolutions': 'resolutions',
        'meters_per_unit': 'metersPerUnit',
        'pixel_size': 'pixelSize',
        'scale_names': 'scaleNames',
        'tile_height': 'tileHeight',
        'tile_width': 'tileWidth',
        'y_coordinate_first': 'yCoordinateFirst'
    }

    def __init__(self, name=None, description=None, srs=None, extent=None, align_top_left=False, resolutions=None, meters_per_unit=None, pixel_size=None, scale_names=None, tile_height=None, tile_width=None, y_coordinate_first=False, _configuration=None):  # noqa: E501
        """GridSet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._srs = None
        self._extent = None
        self._align_top_left = None
        self._resolutions = None
        self._meters_per_unit = None
        self._pixel_size = None
        self._scale_names = None
        self._tile_height = None
        self._tile_width = None
        self._y_coordinate_first = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if srs is not None:
            self.srs = srs
        if extent is not None:
            self.extent = extent
        if align_top_left is not None:
            self.align_top_left = align_top_left
        if resolutions is not None:
            self.resolutions = resolutions
        if meters_per_unit is not None:
            self.meters_per_unit = meters_per_unit
        if pixel_size is not None:
            self.pixel_size = pixel_size
        if scale_names is not None:
            self.scale_names = scale_names
        if tile_height is not None:
            self.tile_height = tile_height
        if tile_width is not None:
            self.tile_width = tile_width
        if y_coordinate_first is not None:
            self.y_coordinate_first = y_coordinate_first

    @property
    def name(self):
        """Gets the name of this GridSet.  # noqa: E501

        Name of the gridset. Should be unique.  # noqa: E501

        :return: The name of this GridSet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GridSet.

        Name of the gridset. Should be unique.  # noqa: E501

        :param name: The name of this GridSet.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GridSet.  # noqa: E501

        Description of the gridset  # noqa: E501

        :return: The description of this GridSet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GridSet.

        Description of the gridset  # noqa: E501

        :param description: The description of this GridSet.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def srs(self):
        """Gets the srs of this GridSet.  # noqa: E501


        :return: The srs of this GridSet.  # noqa: E501
        :rtype: GridSetSrs
        """
        return self._srs

    @srs.setter
    def srs(self, srs):
        """Sets the srs of this GridSet.


        :param srs: The srs of this GridSet.  # noqa: E501
        :type: GridSetSrs
        """

        self._srs = srs

    @property
    def extent(self):
        """Gets the extent of this GridSet.  # noqa: E501


        :return: The extent of this GridSet.  # noqa: E501
        :rtype: GridSetExtent
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this GridSet.


        :param extent: The extent of this GridSet.  # noqa: E501
        :type: GridSetExtent
        """

        self._extent = extent

    @property
    def align_top_left(self):
        """Gets the align_top_left of this GridSet.  # noqa: E501

        Whether the y-coordinate of the tile origin is at the top (true) or bottom (false).  # noqa: E501

        :return: The align_top_left of this GridSet.  # noqa: E501
        :rtype: bool
        """
        return self._align_top_left

    @align_top_left.setter
    def align_top_left(self, align_top_left):
        """Sets the align_top_left of this GridSet.

        Whether the y-coordinate of the tile origin is at the top (true) or bottom (false).  # noqa: E501

        :param align_top_left: The align_top_left of this GridSet.  # noqa: E501
        :type: bool
        """

        self._align_top_left = align_top_left

    @property
    def resolutions(self):
        """Gets the resolutions of this GridSet.  # noqa: E501


        :return: The resolutions of this GridSet.  # noqa: E501
        :rtype: GridSetResolutions
        """
        return self._resolutions

    @resolutions.setter
    def resolutions(self, resolutions):
        """Sets the resolutions of this GridSet.


        :param resolutions: The resolutions of this GridSet.  # noqa: E501
        :type: GridSetResolutions
        """

        self._resolutions = resolutions

    @property
    def meters_per_unit(self):
        """Gets the meters_per_unit of this GridSet.  # noqa: E501

        The number of meters per coordinate unit.  # noqa: E501

        :return: The meters_per_unit of this GridSet.  # noqa: E501
        :rtype: float
        """
        return self._meters_per_unit

    @meters_per_unit.setter
    def meters_per_unit(self, meters_per_unit):
        """Sets the meters_per_unit of this GridSet.

        The number of meters per coordinate unit.  # noqa: E501

        :param meters_per_unit: The meters_per_unit of this GridSet.  # noqa: E501
        :type: float
        """

        self._meters_per_unit = meters_per_unit

    @property
    def pixel_size(self):
        """Gets the pixel_size of this GridSet.  # noqa: E501

        The assumed pixel size of the display device, in meters.  # noqa: E501

        :return: The pixel_size of this GridSet.  # noqa: E501
        :rtype: float
        """
        return self._pixel_size

    @pixel_size.setter
    def pixel_size(self, pixel_size):
        """Sets the pixel_size of this GridSet.

        The assumed pixel size of the display device, in meters.  # noqa: E501

        :param pixel_size: The pixel_size of this GridSet.  # noqa: E501
        :type: float
        """

        self._pixel_size = pixel_size

    @property
    def scale_names(self):
        """Gets the scale_names of this GridSet.  # noqa: E501


        :return: The scale_names of this GridSet.  # noqa: E501
        :rtype: GridSetScaleNames
        """
        return self._scale_names

    @scale_names.setter
    def scale_names(self, scale_names):
        """Sets the scale_names of this GridSet.


        :param scale_names: The scale_names of this GridSet.  # noqa: E501
        :type: GridSetScaleNames
        """

        self._scale_names = scale_names

    @property
    def tile_height(self):
        """Gets the tile_height of this GridSet.  # noqa: E501

        The height of a tile in pixels.  # noqa: E501

        :return: The tile_height of this GridSet.  # noqa: E501
        :rtype: int
        """
        return self._tile_height

    @tile_height.setter
    def tile_height(self, tile_height):
        """Sets the tile_height of this GridSet.

        The height of a tile in pixels.  # noqa: E501

        :param tile_height: The tile_height of this GridSet.  # noqa: E501
        :type: int
        """

        self._tile_height = tile_height

    @property
    def tile_width(self):
        """Gets the tile_width of this GridSet.  # noqa: E501

        The width of a tile in pixels.  # noqa: E501

        :return: The tile_width of this GridSet.  # noqa: E501
        :rtype: int
        """
        return self._tile_width

    @tile_width.setter
    def tile_width(self, tile_width):
        """Sets the tile_width of this GridSet.

        The width of a tile in pixels.  # noqa: E501

        :param tile_width: The tile_width of this GridSet.  # noqa: E501
        :type: int
        """

        self._tile_width = tile_width

    @property
    def y_coordinate_first(self):
        """Gets the y_coordinate_first of this GridSet.  # noqa: E501

        By default the coordinates are {x,y}, this flag reverses the output for WMTS getcapabilities.  # noqa: E501

        :return: The y_coordinate_first of this GridSet.  # noqa: E501
        :rtype: bool
        """
        return self._y_coordinate_first

    @y_coordinate_first.setter
    def y_coordinate_first(self, y_coordinate_first):
        """Sets the y_coordinate_first of this GridSet.

        By default the coordinates are {x,y}, this flag reverses the output for WMTS getcapabilities.  # noqa: E501

        :param y_coordinate_first: The y_coordinate_first of this GridSet.  # noqa: E501
        :type: bool
        """

        self._y_coordinate_first = y_coordinate_first

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GridSet):
            return True

        return self.to_dict() != other.to_dict()
