# coding: utf-8

"""
    GeoServer Importer Extension - Tasks

    The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The tasks endpoint controls individual tasks within an import job. The importer extension is an optional install and may not be available on all deployments of GeoServer  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'state': 'str',
        'update_mode': 'str',
        'data': 'Data',
        'target': 'Store',
        'progress': 'str',
        'layer': 'Layer',
        'error_message': 'str',
        'transform_chain': 'TransformChain',
        'messages': 'Messages'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'state': 'state',
        'update_mode': 'updateMode',
        'data': 'data',
        'target': 'target',
        'progress': 'progress',
        'layer': 'layer',
        'error_message': 'errorMessage',
        'transform_chain': 'transformChain',
        'messages': 'messages'
    }

    def __init__(self, id=None, href=None, state=None, update_mode=None, data=None, target=None, progress=None, layer=None, error_message=None, transform_chain=None, messages=None, _configuration=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._href = None
        self._state = None
        self._update_mode = None
        self._data = None
        self._target = None
        self._progress = None
        self._layer = None
        self._error_message = None
        self._transform_chain = None
        self._messages = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if state is not None:
            self.state = state
        if update_mode is not None:
            self.update_mode = update_mode
        if data is not None:
            self.data = data
        if target is not None:
            self.target = target
        if progress is not None:
            self.progress = progress
        if layer is not None:
            self.layer = layer
        if error_message is not None:
            self.error_message = error_message
        if transform_chain is not None:
            self.transform_chain = transform_chain
        if messages is not None:
            self.messages = messages

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501

        The task id  # noqa: E501

        :return: The id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        The task id  # noqa: E501

        :param id: The id of this Task.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Task.  # noqa: E501

        URL to the task endpoint  # noqa: E501

        :return: The href of this Task.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Task.

        URL to the task endpoint  # noqa: E501

        :param href: The href of this Task.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def state(self):
        """Gets the state of this Task.  # noqa: E501

        State of the task.  # noqa: E501

        :return: The state of this Task.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Task.

        State of the task.  # noqa: E501

        :param state: The state of this Task.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "READY", "RUNNING", "NO_CRS", "NO_BOUNDS", "NO_FORMAT", "BAD_FORMAT", "ERROR", "CANCELED", "COMPLETE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_mode(self):
        """Gets the update_mode of this Task.  # noqa: E501

        Update mode of the task.  # noqa: E501

        :return: The update_mode of this Task.  # noqa: E501
        :rtype: str
        """
        return self._update_mode

    @update_mode.setter
    def update_mode(self, update_mode):
        """Sets the update_mode of this Task.

        Update mode of the task.  # noqa: E501

        :param update_mode: The update_mode of this Task.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATE", "REPLACE", "APPEND", "UPDATE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                update_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `update_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(update_mode, allowed_values)
            )

        self._update_mode = update_mode

    @property
    def data(self):
        """Gets the data of this Task.  # noqa: E501


        :return: The data of this Task.  # noqa: E501
        :rtype: Data
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Task.


        :param data: The data of this Task.  # noqa: E501
        :type: Data
        """

        self._data = data

    @property
    def target(self):
        """Gets the target of this Task.  # noqa: E501


        :return: The target of this Task.  # noqa: E501
        :rtype: Store
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Task.


        :param target: The target of this Task.  # noqa: E501
        :type: Store
        """

        self._target = target

    @property
    def progress(self):
        """Gets the progress of this Task.  # noqa: E501

        URL to the progress endpoint for this task  # noqa: E501

        :return: The progress of this Task.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Task.

        URL to the progress endpoint for this task  # noqa: E501

        :param progress: The progress of this Task.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def layer(self):
        """Gets the layer of this Task.  # noqa: E501


        :return: The layer of this Task.  # noqa: E501
        :rtype: Layer
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this Task.


        :param layer: The layer of this Task.  # noqa: E501
        :type: Layer
        """

        self._layer = layer

    @property
    def error_message(self):
        """Gets the error_message of this Task.  # noqa: E501

        Any error messages for the task, concatenated.  # noqa: E501

        :return: The error_message of this Task.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Task.

        Any error messages for the task, concatenated.  # noqa: E501

        :param error_message: The error_message of this Task.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def transform_chain(self):
        """Gets the transform_chain of this Task.  # noqa: E501


        :return: The transform_chain of this Task.  # noqa: E501
        :rtype: TransformChain
        """
        return self._transform_chain

    @transform_chain.setter
    def transform_chain(self, transform_chain):
        """Sets the transform_chain of this Task.


        :param transform_chain: The transform_chain of this Task.  # noqa: E501
        :type: TransformChain
        """

        self._transform_chain = transform_chain

    @property
    def messages(self):
        """Gets the messages of this Task.  # noqa: E501


        :return: The messages of this Task.  # noqa: E501
        :rtype: Messages
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Task.


        :param messages: The messages of this Task.  # noqa: E501
        :type: Messages
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Task):
            return True

        return self.to_dict() != other.to_dict()
