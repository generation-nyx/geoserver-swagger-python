# coding: utf-8

"""
    GeoServer CoverageStores

    A coverage store describes how access a raster data source.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CoverageStoresApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_coverage_store(self, workspace, store, **kwargs):  # noqa: E501
        """Delete coverage store  # noqa: E501

        Deletes a coverage store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_store(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str purge: The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \"none\", \"metadata\", \"all\". When set to \"none\" data and auxiliary files are preserved. When set to \"metadata\" delete only auxiliary files and metadata. It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \"all\" both data and auxiliary files are removed.
        :param bool recurse: The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_coverage_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_coverage_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def delete_coverage_store_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """Delete coverage store  # noqa: E501

        Deletes a coverage store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_store_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str purge: The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \"none\", \"metadata\", \"all\". When set to \"none\" data and auxiliary files are preserved. When set to \"metadata\" delete only auxiliary files and metadata. It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \"all\" both data and auxiliary files are removed.
        :param bool recurse: The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'purge', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_coverage_store`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `delete_coverage_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []
        if 'purge' in params:
            query_params.append(('purge', params['purge']))  # noqa: E501
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_coverage_store_upload(self, **kwargs):  # noqa: E501
        """delete_coverage_store_upload  # noqa: E501

        Invalid, only used for uploads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_store_upload(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_coverage_store_upload_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_coverage_store_upload_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_coverage_store_upload_with_http_info(self, **kwargs):  # noqa: E501
        """delete_coverage_store_upload  # noqa: E501

        Invalid, only used for uploads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_store_upload_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coverage_store_upload" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/{method}.{format}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_coverage_stores(self, **kwargs):  # noqa: E501
        """delete_coverage_stores  # noqa: E501

        Invalid. Use /coverage/{style} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_stores(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_coverage_stores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_coverage_stores_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_coverage_stores_with_http_info(self, **kwargs):  # noqa: E501
        """delete_coverage_stores  # noqa: E501

        Invalid. Use /coverage/{style} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_stores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coverage_stores" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_coverage_store(self, workspace, store, **kwargs):  # noqa: E501
        """Get a coverage store named {store} in the {workspace} workspace  # noqa: E501

        Displays a representation of the coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/{store}.xml\" for XML). Defaults to HTML representation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage_store(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param bool quiet_on_not_found: When set to true, avoids logging an Exception when the coverage store is not present. Note that 404 status code will be returned anyway.
        :return: CoverageStoreInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_coverage_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.get_coverage_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def get_coverage_store_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """Get a coverage store named {store} in the {workspace} workspace  # noqa: E501

        Displays a representation of the coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/{store}.xml\" for XML). Defaults to HTML representation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage_store_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param bool quiet_on_not_found: When set to true, avoids logging an Exception when the coverage store is not present. Note that 404 status code will be returned anyway.
        :return: CoverageStoreInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_coverage_store`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `get_coverage_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoverageStoreInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_coverage_store_upload(self, **kwargs):  # noqa: E501
        """get_coverage_store_upload  # noqa: E501

        Invalid, only used for uploads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage_store_upload(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_coverage_store_upload_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_coverage_store_upload_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_coverage_store_upload_with_http_info(self, **kwargs):  # noqa: E501
        """get_coverage_store_upload  # noqa: E501

        Invalid, only used for uploads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage_store_upload_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coverage_store_upload" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/{method}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_coverage_stores(self, workspace, **kwargs):  # noqa: E501
        """Get a list of all coverage stores in {workspace}  # noqa: E501

        Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/coveragestores.xml\" for XML). Defaults to HTML representation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage_stores(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :return: CoverageStoreList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_coverage_stores_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_coverage_stores_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_coverage_stores_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """Get a list of all coverage stores in {workspace}  # noqa: E501

        Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/coveragestores.xml\" for XML). Defaults to HTML representation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage_stores_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :return: CoverageStoreList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coverage_stores" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_coverage_stores`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoverageStoreList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_coverage_store(self, **kwargs):  # noqa: E501
        """post_coverage_store  # noqa: E501

        Invalid. Use POST on /workspaces/{workspace}/coveragestores for adding a new coverage store, or PUT on /workspaces/{workspace}/coveragestores/{store} to edit/upload an existing coverage store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_store(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_coverage_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_coverage_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_coverage_store_with_http_info(self, **kwargs):  # noqa: E501
        """post_coverage_store  # noqa: E501

        Invalid. Use POST on /workspaces/{workspace}/coveragestores for adding a new coverage store, or PUT on /workspaces/{workspace}/coveragestores/{store} to edit/upload an existing coverage store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_store_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_coverage_store_reset(self, workspace, store, **kwargs):  # noqa: E501
        """Reset the caches related to this specific coverage store.  # noqa: E501

        Resets raster caches for this coverage store. This operation is used to force GeoServer to drop caches associated to this coverage store, and reconnect to the raster source the next time it is needed by a request. This is useful as the readers often cache some information about the bounds, coordinate system and image structure that might have changed in the meantime.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_store_reset(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage store. (required)
        :param str store: The name of the coverage store to modify. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_coverage_store_reset_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.post_coverage_store_reset_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def post_coverage_store_reset_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """Reset the caches related to this specific coverage store.  # noqa: E501

        Resets raster caches for this coverage store. This operation is used to force GeoServer to drop caches associated to this coverage store, and reconnect to the raster source the next time it is needed by a request. This is useful as the readers often cache some information about the bounds, coordinate system and image structure that might have changed in the meantime.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_store_reset_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage store. (required)
        :param str store: The name of the coverage store to modify. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_coverage_store_reset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_coverage_store_reset`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `post_coverage_store_reset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_coverage_store_upload(self, workspace, store, method, format, **kwargs):  # noqa: E501
        """post_coverage_store_upload  # noqa: E501

        Used to harvest new granules in a writable structured grid coverage reader (e.g., image mosaic). Attempting to harvest a file into any other reader will result in a HTTP 405, method not allowed. Multiple granules can be uploaded by wrapping them in a ZIP file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_store_upload(workspace, store, method, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str method: The upload method. Can be \"url\", \"file\", \"external\", \"remote\". \"file\" uploads a file from a local source. The body of the request is the file itself. \"url\" uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \"external\" uses an existing file on the server. The body of the request is the absolute path to the existing file. \"remote\" uses a direct reference to a remote url, i.e. a file on a cloud storage. No data copy will occur. The body of the request is a URL pointing to the remote dataset. (required)
        :param str format: The type of target coverage store (e.g., \"imagemosaic\") (required)
        :param str filename: The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method=\"file\".
        :param bool update_b_box: When set to \"true\", triggers re-calculation of the layer native bbox. Defaults to \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_coverage_store_upload_with_http_info(workspace, store, method, format, **kwargs)  # noqa: E501
        else:
            (data) = self.post_coverage_store_upload_with_http_info(workspace, store, method, format, **kwargs)  # noqa: E501
            return data

    def post_coverage_store_upload_with_http_info(self, workspace, store, method, format, **kwargs):  # noqa: E501
        """post_coverage_store_upload  # noqa: E501

        Used to harvest new granules in a writable structured grid coverage reader (e.g., image mosaic). Attempting to harvest a file into any other reader will result in a HTTP 405, method not allowed. Multiple granules can be uploaded by wrapping them in a ZIP file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_store_upload_with_http_info(workspace, store, method, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str method: The upload method. Can be \"url\", \"file\", \"external\", \"remote\". \"file\" uploads a file from a local source. The body of the request is the file itself. \"url\" uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \"external\" uses an existing file on the server. The body of the request is the absolute path to the existing file. \"remote\" uses a direct reference to a remote url, i.e. a file on a cloud storage. No data copy will occur. The body of the request is a URL pointing to the remote dataset. (required)
        :param str format: The type of target coverage store (e.g., \"imagemosaic\") (required)
        :param str filename: The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method=\"file\".
        :param bool update_b_box: When set to \"true\", triggers re-calculation of the layer native bbox. Defaults to \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'method', 'format', 'filename', 'update_b_box']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_coverage_store_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_coverage_store_upload`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `post_coverage_store_upload`")  # noqa: E501
        # verify the required parameter 'method' is set
        if self.api_client.client_side_validation and ('method' not in params or
                                                       params['method'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `method` when calling `post_coverage_store_upload`")  # noqa: E501
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in params or
                                                       params['format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `format` when calling `post_coverage_store_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'method' in params:
            path_params['method'] = params['method']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'update_b_box' in params:
            query_params.append(('updateBBox', params['update_b_box']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/{method}.{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_coverage_stores(self, workspace, coverage_store_body, **kwargs):  # noqa: E501
        """Add a new coverage store  # noqa: E501

        Adds a new coverage store entry to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_stores(workspace, coverage_store_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param CoverageStoreInfo coverage_store_body: The coverage store body information to upload.  Examples: - application/xml:    ```   <coverageStore>     <name>nyc</name>     <url>file:/path/to/file.tiff</url>   </coverageStore>   ```  - application/json:    ```   {     \"coverageStore\": {       \"name\": \"nyc\",       \"url\": \"file:/path/to/file.tiff\"     }   }   ```  (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_coverage_stores_with_http_info(workspace, coverage_store_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_coverage_stores_with_http_info(workspace, coverage_store_body, **kwargs)  # noqa: E501
            return data

    def post_coverage_stores_with_http_info(self, workspace, coverage_store_body, **kwargs):  # noqa: E501
        """Add a new coverage store  # noqa: E501

        Adds a new coverage store entry to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_stores_with_http_info(workspace, coverage_store_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param CoverageStoreInfo coverage_store_body: The coverage store body information to upload.  Examples: - application/xml:    ```   <coverageStore>     <name>nyc</name>     <url>file:/path/to/file.tiff</url>   </coverageStore>   ```  - application/json:    ```   {     \"coverageStore\": {       \"name\": \"nyc\",       \"url\": \"file:/path/to/file.tiff\"     }   }   ```  (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'coverage_store_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_coverage_stores" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_coverage_stores`")  # noqa: E501
        # verify the required parameter 'coverage_store_body' is set
        if self.api_client.client_side_validation and ('coverage_store_body' not in params or
                                                       params['coverage_store_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage_store_body` when calling `post_coverage_stores`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coverage_store_body' in params:
            body_params = params['coverage_store_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_coverage_store(self, workspace, store, coverage_store_body, **kwargs):  # noqa: E501
        """Modify a single coverage store.  # noqa: E501

        Modifies a single coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_store(workspace, store, coverage_store_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param CoverageStoreInfo coverage_store_body: The coverage store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    ```   <coverageStore>     <description>A coverage store</description>     <enabled>true</enabled>     <__default>true</__default>     <url>file:/path/to/file.tiff</url>   </coverageStore>   ```  - application/json:    ```   {     \"coverageStore\": {       \"description\": \"A coverage store\",       \"enabled\": \"true\",       \"_default\": \"true\",       \"url\": \"file:/path/to/file.tiff\"     }   }   ```  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_coverage_store_with_http_info(workspace, store, coverage_store_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_coverage_store_with_http_info(workspace, store, coverage_store_body, **kwargs)  # noqa: E501
            return data

    def put_coverage_store_with_http_info(self, workspace, store, coverage_store_body, **kwargs):  # noqa: E501
        """Modify a single coverage store.  # noqa: E501

        Modifies a single coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_store_with_http_info(workspace, store, coverage_store_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param CoverageStoreInfo coverage_store_body: The coverage store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    ```   <coverageStore>     <description>A coverage store</description>     <enabled>true</enabled>     <__default>true</__default>     <url>file:/path/to/file.tiff</url>   </coverageStore>   ```  - application/json:    ```   {     \"coverageStore\": {       \"description\": \"A coverage store\",       \"enabled\": \"true\",       \"_default\": \"true\",       \"url\": \"file:/path/to/file.tiff\"     }   }   ```  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage_store_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_coverage_store`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `put_coverage_store`")  # noqa: E501
        # verify the required parameter 'coverage_store_body' is set
        if self.api_client.client_side_validation and ('coverage_store_body' not in params or
                                                       params['coverage_store_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage_store_body` when calling `put_coverage_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coverage_store_body' in params:
            body_params = params['coverage_store_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_coverage_store_reset(self, workspace, store, **kwargs):  # noqa: E501
        """Reset the caches related to this specific coverage store.  # noqa: E501

        Resets raster caches for this coverage store. This operation is used to force GeoServer to drop caches associated to this coverage store, and reconnect to the raster source the next time it is needed by a request. This is useful as the readers often cache some information about the bounds, coordinate system and image structure that might have changed in the meantime.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_store_reset(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage store. (required)
        :param str store: The name of the coverage store to modify. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_coverage_store_reset_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.put_coverage_store_reset_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def put_coverage_store_reset_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """Reset the caches related to this specific coverage store.  # noqa: E501

        Resets raster caches for this coverage store. This operation is used to force GeoServer to drop caches associated to this coverage store, and reconnect to the raster source the next time it is needed by a request. This is useful as the readers often cache some information about the bounds, coordinate system and image structure that might have changed in the meantime.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_store_reset_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage store. (required)
        :param str store: The name of the coverage store to modify. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_coverage_store_reset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_coverage_store_reset`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `put_coverage_store_reset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/reset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_coverage_store_upload(self, workspace, store, method, format, **kwargs):  # noqa: E501
        """Creates or overwrites the files for a coverage store  # noqa: E501

        Creates or modified a single coverage store by uploading its raster data files. Multi-file stores like mosaic can be created by uploading a zip file and setting the content type to \"application/zip\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_store_upload(workspace, store, method, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str method: The upload method. Can be \"url\", \"file\", \"external\", \"remote\". \"file\" uploads a file from a local source. The body of the request is the file itself. \"url\" uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \"external\" uses an existing file on the server. The body of the request is the absolute path to the existing file. \"remote\" uses a direct reference to a remote url, i.e. a file on a cloud storage. No data copy will occur. The body of the request is a URL pointing to the remote dataset. (required)
        :param str format: The type of target coverage store (e.g., \"imagemosaic\") (required)
        :param str configure: The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \"none\" to avoid configuring coverages.
        :param str use_jai_imageread: Whether to use deferred loading while configuring the coverage/layer.
        :param str coverage_name: Name of the newly created coverage/layer.
        :param str filename: The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method=\"file\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_coverage_store_upload_with_http_info(workspace, store, method, format, **kwargs)  # noqa: E501
        else:
            (data) = self.put_coverage_store_upload_with_http_info(workspace, store, method, format, **kwargs)  # noqa: E501
            return data

    def put_coverage_store_upload_with_http_info(self, workspace, store, method, format, **kwargs):  # noqa: E501
        """Creates or overwrites the files for a coverage store  # noqa: E501

        Creates or modified a single coverage store by uploading its raster data files. Multi-file stores like mosaic can be created by uploading a zip file and setting the content type to \"application/zip\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_store_upload_with_http_info(workspace, store, method, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str method: The upload method. Can be \"url\", \"file\", \"external\", \"remote\". \"file\" uploads a file from a local source. The body of the request is the file itself. \"url\" uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \"external\" uses an existing file on the server. The body of the request is the absolute path to the existing file. \"remote\" uses a direct reference to a remote url, i.e. a file on a cloud storage. No data copy will occur. The body of the request is a URL pointing to the remote dataset. (required)
        :param str format: The type of target coverage store (e.g., \"imagemosaic\") (required)
        :param str configure: The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \"none\" to avoid configuring coverages.
        :param str use_jai_imageread: Whether to use deferred loading while configuring the coverage/layer.
        :param str coverage_name: Name of the newly created coverage/layer.
        :param str filename: The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method=\"file\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'method', 'format', 'configure', 'use_jai_imageread', 'coverage_name', 'filename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_coverage_store_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_coverage_store_upload`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `put_coverage_store_upload`")  # noqa: E501
        # verify the required parameter 'method' is set
        if self.api_client.client_side_validation and ('method' not in params or
                                                       params['method'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `method` when calling `put_coverage_store_upload`")  # noqa: E501
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in params or
                                                       params['format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `format` when calling `put_coverage_store_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'method' in params:
            path_params['method'] = params['method']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'configure' in params:
            query_params.append(('configure', params['configure']))  # noqa: E501
        if 'use_jai_imageread' in params:
            query_params.append(('USE_JAI_IMAGEREAD', params['use_jai_imageread']))  # noqa: E501
        if 'coverage_name' in params:
            query_params.append(('coverageName', params['coverage_name']))  # noqa: E501
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/{method}.{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_coverage_stores(self, **kwargs):  # noqa: E501
        """put_coverage_stores  # noqa: E501

        Invalid. Use POST for adding a new coverage store, or PUT on /coveragestores/{store} to edit/upload an existing coverage store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_stores(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_coverage_stores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_coverage_stores_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_coverage_stores_with_http_info(self, **kwargs):  # noqa: E501
        """put_coverage_stores  # noqa: E501

        Invalid. Use POST for adding a new coverage store, or PUT on /coveragestores/{store} to edit/upload an existing coverage store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_stores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_coverage_stores" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
