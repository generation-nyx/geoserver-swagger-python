# coding: utf-8

"""
    OpenSearch for EO search index access

    Allows to manipulate the OpenSearch for EO index  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OpenSearchEOApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def collections_collection_delete(self, collection, **kwargs):  # noqa: E501
        """collections_collection_delete  # noqa: E501

        Deletes a collection and everything inside it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_delete(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param bool keep_metadata: When present and set to true, makes GeoServer un-publish the collection (removal of OGC links, removal of associated layer) without removing the metadata. The collection remains searchable.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_delete_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_delete_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_delete_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_delete  # noqa: E501

        Deletes a collection and everything inside it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_delete_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param bool keep_metadata: When present and set to true, makes GeoServer un-publish the collection (removal of OGC links, removal of associated layer) without removing the metadata. The collection remains searchable.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'keep_metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []
        if 'keep_metadata' in params:
            query_params.append(('keepMetadata', params['keep_metadata']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_get(self, collection, **kwargs):  # noqa: E501
        """collections_collection_get  # noqa: E501

        Retrieves a collection search attributes and its ogc links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_get(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_get_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_get_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_get_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_get  # noqa: E501

        Retrieves a collection search attributes and its ogc links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_get_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_layer_delete(self, collection, **kwargs):  # noqa: E501
        """collections_collection_layer_delete  # noqa: E501

        Removes the mosaic configuration, store, layer and style associated to this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layer_delete(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_layer_delete_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_layer_delete_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_layer_delete_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_layer_delete  # noqa: E501

        Removes the mosaic configuration, store, layer and style associated to this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layer_delete_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_layer_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_layer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/layer', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_layer_get(self, collection, **kwargs):  # noqa: E501
        """collections_collection_layer_get  # noqa: E501

        Returns the current publishing configuration for the layer (or 404 if no configuration is currently in use)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layer_get(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_layer_get_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_layer_get_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_layer_get_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_layer_get  # noqa: E501

        Returns the current publishing configuration for the layer (or 404 if no configuration is currently in use)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layer_get_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_layer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_layer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/layer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_layer_put(self, collection, **kwargs):  # noqa: E501
        """collections_collection_layer_put  # noqa: E501

        Removes the previous publshing configuration and replaces with a new one, creating along the mosaic configuration, store, layer and style as described  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layer_put(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_layer_put_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_layer_put_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_layer_put_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_layer_put  # noqa: E501

        Removes the previous publshing configuration and replaces with a new one, creating along the mosaic configuration, store, layer and style as described  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layer_put_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_layer_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_layer_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/layer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_layers_get(self, collection, **kwargs):  # noqa: E501
        """collections_collection_layers_get  # noqa: E501

        Returns the list of collection layers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layers_get(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_layers_get_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_layers_get_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_layers_get_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_layers_get  # noqa: E501

        Returns the list of collection layers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layers_get_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_layers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_layers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/layers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_layers_layer_delete(self, collection, layer, **kwargs):  # noqa: E501
        """collections_collection_layers_layer_delete  # noqa: E501

        Removes the collection layer configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layers_layer_delete(collection, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str layer: Identifier of the layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_layers_layer_delete_with_http_info(collection, layer, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_layers_layer_delete_with_http_info(collection, layer, **kwargs)  # noqa: E501
            return data

    def collections_collection_layers_layer_delete_with_http_info(self, collection, layer, **kwargs):  # noqa: E501
        """collections_collection_layers_layer_delete  # noqa: E501

        Removes the collection layer configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layers_layer_delete_with_http_info(collection, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str layer: Identifier of the layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_layers_layer_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_layers_layer_delete`")  # noqa: E501
        # verify the required parameter 'layer' is set
        if self.api_client.client_side_validation and ('layer' not in params or
                                                       params['layer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer` when calling `collections_collection_layers_layer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'layer' in params:
            path_params['layer'] = params['layer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/layers/{layer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_layers_layer_get(self, collection, layer, **kwargs):  # noqa: E501
        """collections_collection_layers_layer_get  # noqa: E501

        Returns the list of collection layers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layers_layer_get(collection, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str layer: Identifier of the layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_layers_layer_get_with_http_info(collection, layer, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_layers_layer_get_with_http_info(collection, layer, **kwargs)  # noqa: E501
            return data

    def collections_collection_layers_layer_get_with_http_info(self, collection, layer, **kwargs):  # noqa: E501
        """collections_collection_layers_layer_get  # noqa: E501

        Returns the list of collection layers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layers_layer_get_with_http_info(collection, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str layer: Identifier of the layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_layers_layer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_layers_layer_get`")  # noqa: E501
        # verify the required parameter 'layer' is set
        if self.api_client.client_side_validation and ('layer' not in params or
                                                       params['layer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer` when calling `collections_collection_layers_layer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'layer' in params:
            path_params['layer'] = params['layer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/layers/{layer}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_layers_layer_put(self, collection, layer, **kwargs):  # noqa: E501
        """collections_collection_layers_layer_put  # noqa: E501

        Updates/creates a collection layer publishing configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layers_layer_put(collection, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str layer: Identifier of the layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_layers_layer_put_with_http_info(collection, layer, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_layers_layer_put_with_http_info(collection, layer, **kwargs)  # noqa: E501
            return data

    def collections_collection_layers_layer_put_with_http_info(self, collection, layer, **kwargs):  # noqa: E501
        """collections_collection_layers_layer_put  # noqa: E501

        Updates/creates a collection layer publishing configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_layers_layer_put_with_http_info(collection, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str layer: Identifier of the layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_layers_layer_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_layers_layer_put`")  # noqa: E501
        # verify the required parameter 'layer' is set
        if self.api_client.client_side_validation and ('layer' not in params or
                                                       params['layer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer` when calling `collections_collection_layers_layer_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'layer' in params:
            path_params['layer'] = params['layer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/layers/{layer}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_metadata_delete(self, collection, **kwargs):  # noqa: E501
        """collections_collection_metadata_delete  # noqa: E501

        Removes the product metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_metadata_delete(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_metadata_delete_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_metadata_delete_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_metadata_delete_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_metadata_delete  # noqa: E501

        Removes the product metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_metadata_delete_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_metadata_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_metadata_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/metadata', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_metadata_get(self, collection, **kwargs):  # noqa: E501
        """collections_collection_metadata_get  # noqa: E501

        Returns the ISO metadata of this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_metadata_get(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_metadata_get_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_metadata_get_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_metadata_get_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_metadata_get  # noqa: E501

        Returns the ISO metadata of this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_metadata_get_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_metadata_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_metadata_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_metadata_put(self, collection, **kwargs):  # noqa: E501
        """collections_collection_metadata_put  # noqa: E501

        Updates/creates a collection ISO metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_metadata_put(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_metadata_put_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_metadata_put_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_metadata_put_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_metadata_put  # noqa: E501

        Updates/creates a collection ISO metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_metadata_put_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_metadata_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_metadata_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/metadata', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_ogc_links_delete(self, collection, **kwargs):  # noqa: E501
        """collections_collection_ogc_links_delete  # noqa: E501

        Removes the collection OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_ogc_links_delete(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_ogc_links_delete_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_ogc_links_delete_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_ogc_links_delete_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_ogc_links_delete  # noqa: E501

        Removes the collection OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_ogc_links_delete_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_ogc_links_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_ogc_links_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/ogcLinks', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_ogc_links_get(self, collection, **kwargs):  # noqa: E501
        """collections_collection_ogc_links_get  # noqa: E501

        Returns the list of OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_ogc_links_get(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_ogc_links_get_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_ogc_links_get_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_ogc_links_get_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_ogc_links_get  # noqa: E501

        Returns the list of OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_ogc_links_get_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_ogc_links_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_ogc_links_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/ogcLinks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_ogc_links_put(self, collection, **kwargs):  # noqa: E501
        """collections_collection_ogc_links_put  # noqa: E501

        Updates/creates a collection OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_ogc_links_put(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_ogc_links_put_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_ogc_links_put_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_ogc_links_put_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_ogc_links_put  # noqa: E501

        Updates/creates a collection OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_ogc_links_put_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_ogc_links_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_ogc_links_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/ogcLinks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_get(self, collection, **kwargs):  # noqa: E501
        """collections_collection_products_get  # noqa: E501

        Returns a paged list of all available products  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_get(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param int offset: First element for paged responses
        :param int limit: Number of elements in page
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_get_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_get_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_get_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_products_get  # noqa: E501

        Returns a paged list of all available products  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_get_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param int offset: First element for paged responses
        :param int limit: Number of elements in page
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_post(self, collection, **kwargs):  # noqa: E501
        """collections_collection_products_post  # noqa: E501

        Creates a new product via its search attributes and ogc links. The zip format accepts  a set of files creating the collection in a single shot, and will contain the following files:  * product.json: the list of searchable attributes and eventual OGC links * description.html: the HTML description for the product * metadata.xml: the O&M metadata for the collection * thumbnail.png: the product thumbnail (can also have jpeg or jpg extension) * owsLinks.json: the list of OWS links, in the same JSON format as the associated resource  * granules.json: the list of granules, in the same JSON format as the associated resource The JSON format is the same as the one returned by a GET on an existing product, the \"*Href\" properties should be omitted   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_post(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_post_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_post_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_post_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_products_post  # noqa: E501

        Creates a new product via its search attributes and ogc links. The zip format accepts  a set of files creating the collection in a single shot, and will contain the following files:  * product.json: the list of searchable attributes and eventual OGC links * description.html: the HTML description for the product * metadata.xml: the O&M metadata for the collection * thumbnail.png: the product thumbnail (can also have jpeg or jpg extension) * owsLinks.json: the list of OWS links, in the same JSON format as the associated resource  * granules.json: the list of granules, in the same JSON format as the associated resource The JSON format is the same as the one returned by a GET on an existing product, the \"*Href\" properties should be omitted   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_post_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_delete(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_delete  # noqa: E501

        Deletes a product and everything inside it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_delete(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :param bool keep_metadata: When present and set to true, makes GeoServer un-publish the product (removal of OGC links, direct download location and granule references) without removing the metadata. The product remains searchable.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_delete_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_delete  # noqa: E501

        Deletes a product and everything inside it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_delete_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :param bool keep_metadata: When present and set to true, makes GeoServer un-publish the product (removal of OGC links, direct download location and granule references) without removing the metadata. The product remains searchable.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product', 'keep_metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_delete`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []
        if 'keep_metadata' in params:
            query_params.append(('keepMetadata', params['keep_metadata']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_get(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_get  # noqa: E501

        Retrieves a product search attributes, ogc links and granules. The response contains cross links to ogcLinks/metadata/thumbnail/granules sub-resources, when the same JSON is used to create a new collection the associated can be omitted, or if everything needs to be put in the JSON, the associated representations can be inlined instead (the thumbnail image can be BASE64 encoded). A creation with ZIP is recommend.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_get(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_get_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_get_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_get_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_get  # noqa: E501

        Retrieves a product search attributes, ogc links and granules. The response contains cross links to ogcLinks/metadata/thumbnail/granules sub-resources, when the same JSON is used to create a new collection the associated can be omitted, or if everything needs to be put in the JSON, the associated representations can be inlined instead (the thumbnail image can be BASE64 encoded). A creation with ZIP is recommend.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_get_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_get`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_granules_delete(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_granules_delete  # noqa: E501

        Removes the product OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_granules_delete(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_granules_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_granules_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_granules_delete_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_granules_delete  # noqa: E501

        Removes the product OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_granules_delete_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_granules_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_granules_delete`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_granules_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/granules', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_granules_get(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_granules_get  # noqa: E501

        Returns the list of a product granules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_granules_get(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_granules_get_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_granules_get_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_granules_get_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_granules_get  # noqa: E501

        Returns the list of a product granules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_granules_get_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_granules_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_granules_get`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_granules_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/granules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_granules_put(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_granules_put  # noqa: E501

        Updates/creates a product granules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_granules_put(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_granules_put_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_granules_put_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_granules_put_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_granules_put  # noqa: E501

        Updates/creates a product granules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_granules_put_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_granules_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_granules_put`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_granules_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/granules', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_metadata_delete(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_metadata_delete  # noqa: E501

        Removes the product metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_metadata_delete(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_metadata_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_metadata_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_metadata_delete_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_metadata_delete  # noqa: E501

        Removes the product metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_metadata_delete_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_metadata_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_metadata_delete`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_metadata_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/metadata', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_metadata_get(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_metadata_get  # noqa: E501

        Returns the O&M metadata of this product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_metadata_get(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_metadata_get_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_metadata_get_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_metadata_get_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_metadata_get  # noqa: E501

        Returns the O&M metadata of this product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_metadata_get_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_metadata_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_metadata_get`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_metadata_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_metadata_put(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_metadata_put  # noqa: E501

        Updates/creates a product O&M metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_metadata_put(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_metadata_put_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_metadata_put_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_metadata_put_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_metadata_put  # noqa: E501

        Updates/creates a product O&M metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_metadata_put_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_metadata_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_metadata_put`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_metadata_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/metadata', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_ogc_links_delete(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_ogc_links_delete  # noqa: E501

        Removes the product OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_ogc_links_delete(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_ogc_links_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_ogc_links_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_ogc_links_delete_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_ogc_links_delete  # noqa: E501

        Removes the product OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_ogc_links_delete_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_ogc_links_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_ogc_links_delete`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_ogc_links_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/ogcLinks', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_ogc_links_get(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_ogc_links_get  # noqa: E501

        Returns the list of a product OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_ogc_links_get(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_ogc_links_get_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_ogc_links_get_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_ogc_links_get_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_ogc_links_get  # noqa: E501

        Returns the list of a product OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_ogc_links_get_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_ogc_links_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_ogc_links_get`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_ogc_links_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/ogcLinks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_ogc_links_put(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_ogc_links_put  # noqa: E501

        Updates/creates a products OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_ogc_links_put(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_ogc_links_put_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_ogc_links_put_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_ogc_links_put_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_ogc_links_put  # noqa: E501

        Updates/creates a products OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_ogc_links_put_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_ogc_links_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_ogc_links_put`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_ogc_links_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/ogcLinks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_put(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_put  # noqa: E501

        Updates a product search attributes and OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_put(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_put_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_put_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_put_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_put  # noqa: E501

        Updates a product search attributes and OGC links  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_put_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_put`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_thumbnail_delete(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_thumbnail_delete  # noqa: E501

        Removes the product thumbnail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_thumbnail_delete(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_thumbnail_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_thumbnail_delete_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_thumbnail_delete_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_thumbnail_delete  # noqa: E501

        Removes the product thumbnail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_thumbnail_delete_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_thumbnail_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_thumbnail_delete`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_thumbnail_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/thumbnail', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_thumbnail_get(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_thumbnail_get  # noqa: E501

        Returns the thumbnail of this product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_thumbnail_get(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_thumbnail_get_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_thumbnail_get_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_thumbnail_get_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_thumbnail_get  # noqa: E501

        Returns the thumbnail of this product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_thumbnail_get_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_thumbnail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_thumbnail_get`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_thumbnail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png', 'image/jpeg'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/thumbnail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_products_product_thumbnail_put(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_thumbnail_put  # noqa: E501

        Updates/creates a product thumbnail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_thumbnail_put(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_products_product_thumbnail_put_with_http_info(collection, product, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_products_product_thumbnail_put_with_http_info(collection, product, **kwargs)  # noqa: E501
            return data

    def collections_collection_products_product_thumbnail_put_with_http_info(self, collection, product, **kwargs):  # noqa: E501
        """collections_collection_products_product_thumbnail_put  # noqa: E501

        Updates/creates a product thumbnail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_products_product_thumbnail_put_with_http_info(collection, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :param str product: Identifier of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_products_product_thumbnail_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_products_product_thumbnail_put`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `collections_collection_products_product_thumbnail_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/png', 'image/jpeg'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/products/{product}/thumbnail', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_put(self, collection, **kwargs):  # noqa: E501
        """collections_collection_put  # noqa: E501

        Updates a collection search attributes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_put(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_put_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_put_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_put_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_put  # noqa: E501

        Updates a collection search attributes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_put_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_thumbnail_delete(self, collection, **kwargs):  # noqa: E501
        """collections_collection_thumbnail_delete  # noqa: E501

        Removes the collection thumbnail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_thumbnail_delete(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_thumbnail_delete_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_thumbnail_delete_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_thumbnail_delete_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_thumbnail_delete  # noqa: E501

        Removes the collection thumbnail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_thumbnail_delete_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_thumbnail_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_thumbnail_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/thumbnail', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_thumbnail_get(self, collection, **kwargs):  # noqa: E501
        """collections_collection_thumbnail_get  # noqa: E501

        Returns the thumbnail of this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_thumbnail_get(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_thumbnail_get_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_thumbnail_get_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_thumbnail_get_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_thumbnail_get  # noqa: E501

        Returns the thumbnail of this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_thumbnail_get_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_thumbnail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_thumbnail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/thumbnail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_thumbnail_put(self, collection, **kwargs):  # noqa: E501
        """collections_collection_thumbnail_put  # noqa: E501

        Updates/creates a collection thumbnail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_thumbnail_put(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_thumbnail_put_with_http_info(collection, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_thumbnail_put_with_http_info(collection, **kwargs)  # noqa: E501
            return data

    def collections_collection_thumbnail_put_with_http_info(self, collection, **kwargs):  # noqa: E501
        """collections_collection_thumbnail_put  # noqa: E501

        Updates/creates a collection thumbnail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_thumbnail_put_with_http_info(collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection: Identifier of the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_thumbnail_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `collections_collection_thumbnail_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/png', 'image/jpeg'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collection}/thumbnail', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_get(self, **kwargs):  # noqa: E501
        """collections_get  # noqa: E501

        Retrieves a list of all available collections (names and links)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: First element for paged responses
        :param int limit: Number of elements in page
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.collections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def collections_get_with_http_info(self, **kwargs):  # noqa: E501
        """collections_get  # noqa: E501

        Retrieves a list of all available collections (names and links)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: First element for paged responses
        :param int limit: Number of elements in page
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_post(self, **kwargs):  # noqa: E501
        """collections_post  # noqa: E501

        Creates a new collection via its search attributes and ogc links.  The zip format accepts a set of files creating the collection in a single shot, and will contain the following files:  * collection.json: the list of searchable attributes, the format is the same as the one returned by a GET on a collection, the \"*HRef\" properties should be omitted.  * description.html: the HTML description for the collection * metadata.xml: the ISO metadata for the collection * thumbnail.png: the collection thumbnail (ignored at the time of writing) * owsLinks.json: the list of OWS links, in the same JSON format as the associated resource A creation with ZIP is recommend for speed and consistency sake.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ogc_publish: When set to true, instructs GeoServer to automatically publish the collection as a layer in the location GeoServer
        :param str workspace: workspace where the collection will be published (if missing the default workspace will be used)
        :param str layer: layer name used when publishing the collection (if missing the collection name will be used)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.collections_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def collections_post_with_http_info(self, **kwargs):  # noqa: E501
        """collections_post  # noqa: E501

        Creates a new collection via its search attributes and ogc links.  The zip format accepts a set of files creating the collection in a single shot, and will contain the following files:  * collection.json: the list of searchable attributes, the format is the same as the one returned by a GET on a collection, the \"*HRef\" properties should be omitted.  * description.html: the HTML description for the collection * metadata.xml: the ISO metadata for the collection * thumbnail.png: the collection thumbnail (ignored at the time of writing) * owsLinks.json: the list of OWS links, in the same JSON format as the associated resource A creation with ZIP is recommend for speed and consistency sake.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ogc_publish: When set to true, instructs GeoServer to automatically publish the collection as a layer in the location GeoServer
        :param str workspace: workspace where the collection will be published (if missing the default workspace will be used)
        :param str layer: layer name used when publishing the collection (if missing the collection name will be used)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ogc_publish', 'workspace', 'layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ogc_publish' in params:
            query_params.append(('ogc_publish', params['ogc_publish']))  # noqa: E501
        if 'workspace' in params:
            query_params.append(('workspace', params['workspace']))  # noqa: E501
        if 'layer' in params:
            query_params.append(('layer', params['layer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
