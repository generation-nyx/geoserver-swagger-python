# coding: utf-8

"""
    GeoServer System Status

    Request provides details about OWS and REST requests that GeoServer has handled  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MetricValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'category': 'str',
        'name': 'str',
        'available': 'bool',
        'description': 'str',
        'unit': 'str',
        'priority': 'int',
        'identifier': 'str'
    }

    attribute_map = {
        'value': 'value',
        'category': 'category',
        'name': 'name',
        'available': 'available',
        'description': 'description',
        'unit': 'unit',
        'priority': 'priority',
        'identifier': 'identifier'
    }

    def __init__(self, value=None, category=None, name=None, available=None, description=None, unit=None, priority=None, identifier=None, _configuration=None):  # noqa: E501
        """MetricValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._value = None
        self._category = None
        self._name = None
        self._available = None
        self._description = None
        self._unit = None
        self._priority = None
        self._identifier = None
        self.discriminator = None

        if value is not None:
            self.value = value
        if category is not None:
            self.category = category
        if name is not None:
            self.name = name
        if available is not None:
            self.available = available
        if description is not None:
            self.description = description
        if unit is not None:
            self.unit = unit
        if priority is not None:
            self.priority = priority
        if identifier is not None:
            self.identifier = identifier

    @property
    def value(self):
        """Gets the value of this MetricValue.  # noqa: E501

        System information value  # noqa: E501

        :return: The value of this MetricValue.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetricValue.

        System information value  # noqa: E501

        :param value: The value of this MetricValue.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def category(self):
        """Gets the category of this MetricValue.  # noqa: E501

        Category of this system information  # noqa: E501

        :return: The category of this MetricValue.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MetricValue.

        Category of this system information  # noqa: E501

        :param category: The category of this MetricValue.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def name(self):
        """Gets the name of this MetricValue.  # noqa: E501

        Name of the metric  # noqa: E501

        :return: The name of this MetricValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricValue.

        Name of the metric  # noqa: E501

        :param name: The name of this MetricValue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def available(self):
        """Gets the available of this MetricValue.  # noqa: E501

        TRUE if the system information value is available  # noqa: E501

        :return: The available of this MetricValue.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this MetricValue.

        TRUE if the system information value is available  # noqa: E501

        :param available: The available of this MetricValue.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def description(self):
        """Gets the description of this MetricValue.  # noqa: E501

        Description of this system information  # noqa: E501

        :return: The description of this MetricValue.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetricValue.

        Description of this system information  # noqa: E501

        :param description: The description of this MetricValue.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def unit(self):
        """Gets the unit of this MetricValue.  # noqa: E501

        Unit of the system information, can be empty  # noqa: E501

        :return: The unit of this MetricValue.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MetricValue.

        Unit of the system information, can be empty  # noqa: E501

        :param unit: The unit of this MetricValue.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def priority(self):
        """Gets the priority of this MetricValue.  # noqa: E501

        This value can be used to render the metrics in a predefined order  # noqa: E501

        :return: The priority of this MetricValue.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this MetricValue.

        This value can be used to render the metrics in a predefined order  # noqa: E501

        :param priority: The priority of this MetricValue.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def identifier(self):
        """Gets the identifier of this MetricValue.  # noqa: E501

        Identifies the resource associated with the metric, e.g. file partition name  # noqa: E501

        :return: The identifier of this MetricValue.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this MetricValue.

        Identifies the resource associated with the metric, e.g. file partition name  # noqa: E501

        :param identifier: The identifier of this MetricValue.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetricValue):
            return True

        return self.to_dict() != other.to_dict()
