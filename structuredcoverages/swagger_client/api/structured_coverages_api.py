# coding: utf-8

"""
    GeoServer StructuredCoverageStores

    A structured coverage store allows description of its \"granules\" and management of them.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StructuredCoveragesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_coverage_stores(self, **kwargs):  # noqa: E501
        """delete_coverage_stores  # noqa: E501

        Invalid, the index cannot be created or modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_stores(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_coverage_stores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_coverage_stores_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_coverage_stores_with_http_info(self, **kwargs):  # noqa: E501
        """delete_coverage_stores  # noqa: E501

        Invalid, the index cannot be created or modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_stores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coverage_stores" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_structured_coverage_granule(self, workspace, store, coverage, granule_id, **kwargs):  # noqa: E501
        """delete_structured_coverage_granule  # noqa: E501

        Allows removing the specified granule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_structured_coverage_granule(workspace, store, coverage, granule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :param str granule_id: The granule ID (required)
        :param str purge: The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \"none\", \"metadata\" and \"all\". When set to \"none\" data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \"metadata\" delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \"all\" both data and auxiliary files are removed.
        :param object update_b_box: When set to \"true\", triggers re-calculation of the layer native bbox. Defaults to \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_structured_coverage_granule_with_http_info(workspace, store, coverage, granule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_structured_coverage_granule_with_http_info(workspace, store, coverage, granule_id, **kwargs)  # noqa: E501
            return data

    def delete_structured_coverage_granule_with_http_info(self, workspace, store, coverage, granule_id, **kwargs):  # noqa: E501
        """delete_structured_coverage_granule  # noqa: E501

        Allows removing the specified granule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_structured_coverage_granule_with_http_info(workspace, store, coverage, granule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :param str granule_id: The granule ID (required)
        :param str purge: The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \"none\", \"metadata\" and \"all\". When set to \"none\" data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \"metadata\" delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \"all\" both data and auxiliary files are removed.
        :param object update_b_box: When set to \"true\", triggers re-calculation of the layer native bbox. Defaults to \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'granule_id', 'purge', 'update_b_box']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_structured_coverage_granule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_structured_coverage_granule`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `delete_structured_coverage_granule`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `delete_structured_coverage_granule`")  # noqa: E501
        # verify the required parameter 'granule_id' is set
        if self.api_client.client_side_validation and ('granule_id' not in params or
                                                       params['granule_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `granule_id` when calling `delete_structured_coverage_granule`")  # noqa: E501

        if self.api_client.client_side_validation and ('purge' in params and params['purge'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `purge` when calling `delete_structured_coverage_granule`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501
        if 'granule_id' in params:
            path_params['granuleId'] = params['granule_id']  # noqa: E501

        query_params = []
        if 'purge' in params:
            query_params.append(('purge', params['purge']))  # noqa: E501
        if 'update_b_box' in params:
            query_params.append(('updateBBox', params['update_b_box']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules/{granuleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_structured_coverage_granules(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """delete_structured_coverage_granules  # noqa: E501

        Allows removing one or more granules from the index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_structured_coverage_granules(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :param str filter: A CQL filter to reduce the returned granules
        :param str purge: The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \"none\", \"metadata\" and \"all\". When set to \"none\" data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \"metadata\" delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \"all\" both data and auxiliary files are removed.
        :param object update_b_box: When set to \"true\", triggers re-calculation of the layer native bbox. Defaults to \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_structured_coverage_granules_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_structured_coverage_granules_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def delete_structured_coverage_granules_with_http_info(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """delete_structured_coverage_granules  # noqa: E501

        Allows removing one or more granules from the index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_structured_coverage_granules_with_http_info(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :param str filter: A CQL filter to reduce the returned granules
        :param str purge: The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \"none\", \"metadata\" and \"all\". When set to \"none\" data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \"metadata\" delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \"all\" both data and auxiliary files are removed.
        :param object update_b_box: When set to \"true\", triggers re-calculation of the layer native bbox. Defaults to \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'filter', 'purge', 'update_b_box']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_structured_coverage_granules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_structured_coverage_granules`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `delete_structured_coverage_granules`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `delete_structured_coverage_granules`")  # noqa: E501

        if self.api_client.client_side_validation and ('purge' in params and params['purge'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `purge` when calling `delete_structured_coverage_granules`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'purge' in params:
            query_params.append(('purge', params['purge']))  # noqa: E501
        if 'update_b_box' in params:
            query_params.append(('updateBBox', params['update_b_box']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_structured_coverage_granule(self, workspace, store, coverage, granule_id, **kwargs):  # noqa: E501
        """Get the attributes of a particular granule  # noqa: E501

        Displays a list of all the attributes associated to a particular coverage's granule. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_structured_coverage_granule(workspace, store, coverage, granule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :param str granule_id: The granule ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_structured_coverage_granule_with_http_info(workspace, store, coverage, granule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_structured_coverage_granule_with_http_info(workspace, store, coverage, granule_id, **kwargs)  # noqa: E501
            return data

    def get_structured_coverage_granule_with_http_info(self, workspace, store, coverage, granule_id, **kwargs):  # noqa: E501
        """Get the attributes of a particular granule  # noqa: E501

        Displays a list of all the attributes associated to a particular coverage's granule. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_structured_coverage_granule_with_http_info(workspace, store, coverage, granule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :param str granule_id: The granule ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'granule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_structured_coverage_granule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_structured_coverage_granule`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `get_structured_coverage_granule`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `get_structured_coverage_granule`")  # noqa: E501
        # verify the required parameter 'granule_id' is set
        if self.api_client.client_side_validation and ('granule_id' not in params or
                                                       params['granule_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `granule_id` when calling `get_structured_coverage_granule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501
        if 'granule_id' in params:
            path_params['granuleId'] = params['granule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules/{granuleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_structured_coverage_granules(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """Get the attributes associated to the granules  # noqa: E501

        Displays a list of all the attributes associated to a particular coverage's granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_structured_coverage_granules(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :param str filter: A CQL filter to reduce the returned granules
        :param int offset: Used for paging, the start of the current page
        :param int limit: Used for paging, the number of items to be returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_structured_coverage_granules_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_structured_coverage_granules_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def get_structured_coverage_granules_with_http_info(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """Get the attributes associated to the granules  # noqa: E501

        Displays a list of all the attributes associated to a particular coverage's granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_structured_coverage_granules_with_http_info(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :param str filter: A CQL filter to reduce the returned granules
        :param int offset: Used for paging, the start of the current page
        :param int limit: Used for paging, the number of items to be returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'filter', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_structured_coverage_granules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_structured_coverage_granules`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `get_structured_coverage_granules`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `get_structured_coverage_granules`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_structured_coverage_granules`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_structured_coverage_granules`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_structured_coverage_index(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """Get the information schema attached to the granules  # noqa: E501

        Displays a list of all the attributes associated to a particular coverage's granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_structured_coverage_index(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :return: Schema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_structured_coverage_index_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_structured_coverage_index_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def get_structured_coverage_index_with_http_info(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """Get the information schema attached to the granules  # noqa: E501

        Displays a list of all the attributes associated to a particular coverage's granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_structured_coverage_index_with_http_info(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the worskpace containing the coverage stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param str coverage: The name of the coverage to be retrieved (required)
        :return: Schema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_structured_coverage_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_structured_coverage_index`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `get_structured_coverage_index`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `get_structured_coverage_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Schema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_structured_coverage_granule(self, **kwargs):  # noqa: E501
        """post_structured_coverage_granule  # noqa: E501

        Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_structured_coverage_granule(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_structured_coverage_granule_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_structured_coverage_granule_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_structured_coverage_granule_with_http_info(self, **kwargs):  # noqa: E501
        """post_structured_coverage_granule  # noqa: E501

        Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_structured_coverage_granule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_structured_coverage_granule" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules/{granuleId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_structured_coverage_granules(self, **kwargs):  # noqa: E501
        """post_structured_coverage_granules  # noqa: E501

        Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_structured_coverage_granules(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_structured_coverage_granules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_structured_coverage_granules_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_structured_coverage_granules_with_http_info(self, **kwargs):  # noqa: E501
        """post_structured_coverage_granules  # noqa: E501

        Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_structured_coverage_granules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_structured_coverage_granules" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_structured_coverage_index(self, **kwargs):  # noqa: E501
        """post_structured_coverage_index  # noqa: E501

        Invalid, the index cannot be created or modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_structured_coverage_index(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_structured_coverage_index_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_structured_coverage_index_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_structured_coverage_index_with_http_info(self, **kwargs):  # noqa: E501
        """post_structured_coverage_index  # noqa: E501

        Invalid, the index cannot be created or modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_structured_coverage_index_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_structured_coverage_index" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_structured_coverage_granule(self, **kwargs):  # noqa: E501
        """put_structured_coverage_granule  # noqa: E501

        Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_structured_coverage_granule(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_structured_coverage_granule_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_structured_coverage_granule_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_structured_coverage_granule_with_http_info(self, **kwargs):  # noqa: E501
        """put_structured_coverage_granule  # noqa: E501

        Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_structured_coverage_granule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_structured_coverage_granule" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules/{granuleId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_structured_coverage_granules(self, **kwargs):  # noqa: E501
        """put_structured_coverage_granules  # noqa: E501

        Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_structured_coverage_granules(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_structured_coverage_granules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_structured_coverage_granules_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_structured_coverage_granules_with_http_info(self, **kwargs):  # noqa: E501
        """put_structured_coverage_granules  # noqa: E501

        Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_structured_coverage_granules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_structured_coverage_granules" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_structured_coverage_index(self, **kwargs):  # noqa: E501
        """put_structured_coverage_index  # noqa: E501

        Invalid, the index cannot be created or modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_structured_coverage_index(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_structured_coverage_index_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_structured_coverage_index_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_structured_coverage_index_with_http_info(self, **kwargs):  # noqa: E501
        """put_structured_coverage_index  # noqa: E501

        Invalid, the index cannot be created or modified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_structured_coverage_index_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_structured_coverage_index" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
