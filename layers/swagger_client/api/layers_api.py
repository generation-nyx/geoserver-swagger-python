# coding: utf-8

"""
    GeoServer Layers

    A layer is a published resource (feature type or coverage).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LayersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def layers_delete(self, **kwargs):  # noqa: E501
        """layers_delete  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_delete_with_http_info(self, **kwargs):  # noqa: E501
        """layers_delete  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_get(self, **kwargs):  # noqa: E501
        """Get a list of layers  # noqa: E501

        Displays a list of all layers on the server. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of layers  # noqa: E501

        Displays a list of all layers on the server. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_delete(self, layer_name, **kwargs):  # noqa: E501
        """Delete layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_delete(layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to delete. (required)
        :param bool recurse: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_delete_with_http_info(layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_delete_with_http_info(layer_name, **kwargs)  # noqa: E501
            return data

    def layers_name_delete_with_http_info(self, layer_name, **kwargs):  # noqa: E501
        """Delete layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_delete_with_http_info(layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to delete. (required)
        :param bool recurse: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_name', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layerName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_get(self, layer_name, **kwargs):  # noqa: E501
        """Retrieve a layer  # noqa: E501

        Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_get(layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to retrieve. (required)
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_get_with_http_info(layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_get_with_http_info(layer_name, **kwargs)  # noqa: E501
            return data

    def layers_name_get_with_http_info(self, layer_name, **kwargs):  # noqa: E501
        """Retrieve a layer  # noqa: E501

        Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_get_with_http_info(layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to retrieve. (required)
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layerName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_post(self, **kwargs):  # noqa: E501
        """layers_name_post  # noqa: E501

        Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_name_post_with_http_info(self, **kwargs):  # noqa: E501
        """layers_name_post  # noqa: E501

        Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layerName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_put(self, layer_name, layer_body, **kwargs):  # noqa: E501
        """Modify a layer.  # noqa: E501

        Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_put(layer_name, layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to modify. (required)
        :param Layer layer_body: The updated layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_put_with_http_info(layer_name, layer_body, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_put_with_http_info(layer_name, layer_body, **kwargs)  # noqa: E501
            return data

    def layers_name_put_with_http_info(self, layer_name, layer_body, **kwargs):  # noqa: E501
        """Modify a layer.  # noqa: E501

        Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_put_with_http_info(layer_name, layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to modify. (required)
        :param Layer layer_body: The updated layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_name', 'layer_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_put`")  # noqa: E501
        # verify the required parameter 'layer_body' is set
        if self.api_client.client_side_validation and ('layer_body' not in params or
                                                       params['layer_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_body` when calling `layers_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layer_body' in params:
            body_params = params['layer_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layerName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_workspace_delete(self, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Delete layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_workspace_delete(workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to delete. (required)
        :param bool recurse: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_workspace_delete_with_http_info(workspace_name, layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_workspace_delete_with_http_info(workspace_name, layer_name, **kwargs)  # noqa: E501
            return data

    def layers_name_workspace_delete_with_http_info(self, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Delete layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_workspace_delete_with_http_info(workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to delete. (required)
        :param bool recurse: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'layer_name', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_workspace_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in params or
                                                       params['workspace_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_name` when calling `layers_name_workspace_delete`")  # noqa: E501
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_workspace_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers/{layerName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_workspace_get(self, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Retrieve a layer  # noqa: E501

        Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_workspace_get(workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to retrieve. (required)
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_workspace_get_with_http_info(workspace_name, layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_workspace_get_with_http_info(workspace_name, layer_name, **kwargs)  # noqa: E501
            return data

    def layers_name_workspace_get_with_http_info(self, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Retrieve a layer  # noqa: E501

        Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_workspace_get_with_http_info(workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to retrieve. (required)
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'layer_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_workspace_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in params or
                                                       params['workspace_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_name` when calling `layers_name_workspace_get`")  # noqa: E501
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_workspace_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers/{layerName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_workspace_post(self, **kwargs):  # noqa: E501
        """layers_name_workspace_post  # noqa: E501

        Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_workspace_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_workspace_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_workspace_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_name_workspace_post_with_http_info(self, **kwargs):  # noqa: E501
        """layers_name_workspace_post  # noqa: E501

        Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_workspace_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_workspace_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers/{layerName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_workspace_put(self, workspace_name, layer_name, layer_body, **kwargs):  # noqa: E501
        """Modify a layer.  # noqa: E501

        Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_workspace_put(workspace_name, layer_name, layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to modify. (required)
        :param Layer layer_body: The updated layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_workspace_put_with_http_info(workspace_name, layer_name, layer_body, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_workspace_put_with_http_info(workspace_name, layer_name, layer_body, **kwargs)  # noqa: E501
            return data

    def layers_name_workspace_put_with_http_info(self, workspace_name, layer_name, layer_body, **kwargs):  # noqa: E501
        """Modify a layer.  # noqa: E501

        Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_workspace_put_with_http_info(workspace_name, layer_name, layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to modify. (required)
        :param Layer layer_body: The updated layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'layer_name', 'layer_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_workspace_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in params or
                                                       params['workspace_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_name` when calling `layers_name_workspace_put`")  # noqa: E501
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_workspace_put`")  # noqa: E501
        # verify the required parameter 'layer_body' is set
        if self.api_client.client_side_validation and ('layer_body' not in params or
                                                       params['layer_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_body` when calling `layers_name_workspace_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layer_body' in params:
            body_params = params['layer_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers/{layerName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_post(self, **kwargs):  # noqa: E501
        """layers_post  # noqa: E501

        Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_post_with_http_info(self, **kwargs):  # noqa: E501
        """layers_post  # noqa: E501

        Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_put(self, **kwargs):  # noqa: E501
        """layers_put  # noqa: E501

        Invalid. To edit a layer, use PUT on an individual layer instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_put_with_http_info(self, **kwargs):  # noqa: E501
        """layers_put  # noqa: E501

        Invalid. To edit a layer, use PUT on an individual layer instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_workspace_delete(self, **kwargs):  # noqa: E501
        """layers_workspace_delete  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_workspace_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_workspace_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_workspace_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_workspace_delete_with_http_info(self, **kwargs):  # noqa: E501
        """layers_workspace_delete  # noqa: E501

        Invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_workspace_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_workspace_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_workspace_get(self, workspace_name, **kwargs):  # noqa: E501
        """Get a list of layers in a workspace.  # noqa: E501

        Displays a list of all layers in the provided workspace. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_workspace_get(workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace to list layers in (required)
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_workspace_get_with_http_info(workspace_name, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_workspace_get_with_http_info(workspace_name, **kwargs)  # noqa: E501
            return data

    def layers_workspace_get_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """Get a list of layers in a workspace.  # noqa: E501

        Displays a list of all layers in the provided workspace. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_workspace_get_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace to list layers in (required)
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_workspace_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in params or
                                                       params['workspace_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_name` when calling `layers_workspace_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_workspace_post(self, **kwargs):  # noqa: E501
        """layers_workspace_post  # noqa: E501

        Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_workspace_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_workspace_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_workspace_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_workspace_post_with_http_info(self, **kwargs):  # noqa: E501
        """layers_workspace_post  # noqa: E501

        Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_workspace_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_workspace_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_workspace_put(self, **kwargs):  # noqa: E501
        """layers_workspace_put  # noqa: E501

        Invalid. To edit a layer, use PUT on an individual layer instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_workspace_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_workspace_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_workspace_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_workspace_put_with_http_info(self, **kwargs):  # noqa: E501
        """layers_workspace_put  # noqa: E501

        Invalid. To edit a layer, use PUT on an individual layer instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_workspace_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_workspace_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
