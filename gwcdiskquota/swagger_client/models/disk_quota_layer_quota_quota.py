# coding: utf-8

"""
    GeoWebCache DiskQuota

    The REST API for Disk Quota management provides a RESTful interface through which clients can configure the disk usage limits and expiration policies for a GeoWebCache instance through simple HTTP calls.  Since disk usage increases geometrically by zoom level, one single seeding task could fill up an entire storage device. Because of this, GeoWebCache employs a disk quota system where one can specify the maximum amount of disk space to use for a particular layer, as well as logic on how to proceed when that quota is reached. There are two different policies for managing the disk quotas - Least Frequently Used (LFU) and Least Recently Used (LRU).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DiskQuotaLayerQuotaQuota(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'float',
        'units': 'str'
    }

    attribute_map = {
        'value': 'value',
        'units': 'units'
    }

    def __init__(self, value=None, units=None, _configuration=None):  # noqa: E501
        """DiskQuotaLayerQuotaQuota - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._value = None
        self._units = None
        self.discriminator = None

        if value is not None:
            self.value = value
        if units is not None:
            self.units = units

    @property
    def value(self):
        """Gets the value of this DiskQuotaLayerQuotaQuota.  # noqa: E501

        Numeric value for global quota.  # noqa: E501

        :return: The value of this DiskQuotaLayerQuotaQuota.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DiskQuotaLayerQuotaQuota.

        Numeric value for global quota.  # noqa: E501

        :param value: The value of this DiskQuotaLayerQuotaQuota.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def units(self):
        """Gets the units of this DiskQuotaLayerQuotaQuota.  # noqa: E501

        The type of unit quantified by value.  # noqa: E501

        :return: The units of this DiskQuotaLayerQuotaQuota.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this DiskQuotaLayerQuotaQuota.

        The type of unit quantified by value.  # noqa: E501

        :param units: The units of this DiskQuotaLayerQuotaQuota.  # noqa: E501
        :type: str
        """
        allowed_values = ["B", "KiB", "MiB", "GiB", "TiB"]  # noqa: E501
        if (self._configuration.client_side_validation and
                units not in allowed_values):
            raise ValueError(
                "Invalid value for `units` ({0}), must be one of {1}"  # noqa: E501
                .format(units, allowed_values)
            )

        self._units = units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiskQuotaLayerQuotaQuota, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskQuotaLayerQuotaQuota):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiskQuotaLayerQuotaQuota):
            return True

        return self.to_dict() != other.to_dict()
