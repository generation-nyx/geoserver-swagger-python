# coding: utf-8

"""
    WPS download configuration

    The WPS download module allows to perform large data, map and animation downloads sing asynchronous requests  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DownloadServiceConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_features': 'float',
        'raster_size_limits': 'float',
        'write_limits': 'float',
        'hard_output_limit': 'float',
        'compression_level': 'int',
        'max_animation_frames': 'int'
    }

    attribute_map = {
        'max_features': 'maxFeatures',
        'raster_size_limits': 'rasterSizeLimits',
        'write_limits': 'writeLimits',
        'hard_output_limit': 'hardOutputLimit',
        'compression_level': 'compressionLevel',
        'max_animation_frames': 'maxAnimationFrames'
    }

    def __init__(self, max_features=None, raster_size_limits=None, write_limits=None, hard_output_limit=None, compression_level=None, max_animation_frames=None, _configuration=None):  # noqa: E501
        """DownloadServiceConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._max_features = None
        self._raster_size_limits = None
        self._write_limits = None
        self._hard_output_limit = None
        self._compression_level = None
        self._max_animation_frames = None
        self.discriminator = None

        if max_features is not None:
            self.max_features = max_features
        if raster_size_limits is not None:
            self.raster_size_limits = raster_size_limits
        if write_limits is not None:
            self.write_limits = write_limits
        if hard_output_limit is not None:
            self.hard_output_limit = hard_output_limit
        if compression_level is not None:
            self.compression_level = compression_level
        if max_animation_frames is not None:
            self.max_animation_frames = max_animation_frames

    @property
    def max_features(self):
        """Gets the max_features of this DownloadServiceConfiguration.  # noqa: E501

        maximum number of features to download  # noqa: E501

        :return: The max_features of this DownloadServiceConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._max_features

    @max_features.setter
    def max_features(self, max_features):
        """Sets the max_features of this DownloadServiceConfiguration.

        maximum number of features to download  # noqa: E501

        :param max_features: The max_features of this DownloadServiceConfiguration.  # noqa: E501
        :type: float
        """

        self._max_features = max_features

    @property
    def raster_size_limits(self):
        """Gets the raster_size_limits of this DownloadServiceConfiguration.  # noqa: E501

        maximum pixel size of the Raster to read  # noqa: E501

        :return: The raster_size_limits of this DownloadServiceConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._raster_size_limits

    @raster_size_limits.setter
    def raster_size_limits(self, raster_size_limits):
        """Sets the raster_size_limits of this DownloadServiceConfiguration.

        maximum pixel size of the Raster to read  # noqa: E501

        :param raster_size_limits: The raster_size_limits of this DownloadServiceConfiguration.  # noqa: E501
        :type: float
        """

        self._raster_size_limits = raster_size_limits

    @property
    def write_limits(self):
        """Gets the write_limits of this DownloadServiceConfiguration.  # noqa: E501

        maximum raw raster size in bytes (a limit of how much space can a raster take in memory). For a given raster, its raw size in bytes is calculated by multiplying pixel number (raster_width x raster_height) with the accumulated sum of each band’s pixel sample_type size in bytes, for all bands  # noqa: E501

        :return: The write_limits of this DownloadServiceConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._write_limits

    @write_limits.setter
    def write_limits(self, write_limits):
        """Sets the write_limits of this DownloadServiceConfiguration.

        maximum raw raster size in bytes (a limit of how much space can a raster take in memory). For a given raster, its raw size in bytes is calculated by multiplying pixel number (raster_width x raster_height) with the accumulated sum of each band’s pixel sample_type size in bytes, for all bands  # noqa: E501

        :param write_limits: The write_limits of this DownloadServiceConfiguration.  # noqa: E501
        :type: float
        """

        self._write_limits = write_limits

    @property
    def hard_output_limit(self):
        """Gets the hard_output_limit of this DownloadServiceConfiguration.  # noqa: E501

        maximum file size to download  # noqa: E501

        :return: The hard_output_limit of this DownloadServiceConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._hard_output_limit

    @hard_output_limit.setter
    def hard_output_limit(self, hard_output_limit):
        """Sets the hard_output_limit of this DownloadServiceConfiguration.

        maximum file size to download  # noqa: E501

        :param hard_output_limit: The hard_output_limit of this DownloadServiceConfiguration.  # noqa: E501
        :type: float
        """

        self._hard_output_limit = hard_output_limit

    @property
    def compression_level(self):
        """Gets the compression_level of this DownloadServiceConfiguration.  # noqa: E501

        compression level for the output zip file  # noqa: E501

        :return: The compression_level of this DownloadServiceConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._compression_level

    @compression_level.setter
    def compression_level(self, compression_level):
        """Sets the compression_level of this DownloadServiceConfiguration.

        compression level for the output zip file  # noqa: E501

        :param compression_level: The compression_level of this DownloadServiceConfiguration.  # noqa: E501
        :type: int
        """

        self._compression_level = compression_level

    @property
    def max_animation_frames(self):
        """Gets the max_animation_frames of this DownloadServiceConfiguration.  # noqa: E501

        maximum number of frames allowed (if no limit, the maximum execution time limits will still apply and stop the process in case there are too many)  # noqa: E501

        :return: The max_animation_frames of this DownloadServiceConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_animation_frames

    @max_animation_frames.setter
    def max_animation_frames(self, max_animation_frames):
        """Sets the max_animation_frames of this DownloadServiceConfiguration.

        maximum number of frames allowed (if no limit, the maximum execution time limits will still apply and stop the process in case there are too many)  # noqa: E501

        :param max_animation_frames: The max_animation_frames of this DownloadServiceConfiguration.  # noqa: E501
        :type: int
        """

        self._max_animation_frames = max_animation_frames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DownloadServiceConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DownloadServiceConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DownloadServiceConfiguration):
            return True

        return self.to_dict() != other.to_dict()
