# coding: utf-8

"""
    GeoServer WMTS Stores

    A WMTS store is a store whose source is a remote WMTS. Also known as \"Cascading WMTS\".  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WMTSStoresApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_wmts_store(self, workspace, store, **kwargs):  # noqa: E501
        """Delete WMTS store  # noqa: E501

        Deletes a WMTS store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wmts_store(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace containing the WMTS store. (required)
        :param str store: Name of the WMTS store (required)
        :param bool recurse: When set to true all resources contained in the store are also removed.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wmts_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_wmts_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def delete_wmts_store_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """Delete WMTS store  # noqa: E501

        Deletes a WMTS store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wmts_store_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace containing the WMTS store. (required)
        :param str store: Name of the WMTS store (required)
        :param bool recurse: When set to true all resources contained in the store are also removed.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wmts_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_wmts_store`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `delete_wmts_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmtsstores/{store}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wmts_stores(self, **kwargs):  # noqa: E501
        """delete_wmts_stores  # noqa: E501

        Invalid. Use /workspaces/{workspace}/wmtsstores/{wmtsstore} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wmts_stores(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wmts_stores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_wmts_stores_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_wmts_stores_with_http_info(self, **kwargs):  # noqa: E501
        """delete_wmts_stores  # noqa: E501

        Invalid. Use /workspaces/{workspace}/wmtsstores/{wmtsstore} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wmts_stores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wmts_stores" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmtsstores', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wmts_store(self, workspace, store, **kwargs):  # noqa: E501
        """Retrieve a WMTS store in a given workspace  # noqa: E501

        Displays a representation of the WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{store}.xml\" for XML). Defaults to HTML representation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmts_store(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the WMTS store. (required)
        :param str store: The name of the store to be retrieved (required)
        :param bool quiet_on_not_found: When set to true, avoids to log an Exception when the WMTS store is not present. Note that 404 status code will be returned anyway.
        :return: WMTSStoreInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wmts_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wmts_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def get_wmts_store_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """Retrieve a WMTS store in a given workspace  # noqa: E501

        Displays a representation of the WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{store}.xml\" for XML). Defaults to HTML representation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmts_store_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the WMTS store. (required)
        :param str store: The name of the store to be retrieved (required)
        :param bool quiet_on_not_found: When set to true, avoids to log an Exception when the WMTS store is not present. Note that 404 status code will be returned anyway.
        :return: WMTSStoreInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wmts_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_wmts_store`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `get_wmts_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmtsstores/{store}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMTSStoreInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wmts_stores(self, **kwargs):  # noqa: E501
        """Get a list of WMTS stores  # noqa: E501

        Displays a list of all WMTS stores on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/rest/workspaces/{workspace}/wmtsstores.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmts_stores(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WMTSStoresList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wmts_stores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_wmts_stores_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_wmts_stores_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of WMTS stores  # noqa: E501

        Displays a list of all WMTS stores on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/rest/workspaces/{workspace}/wmtsstores.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmts_stores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WMTSStoresList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wmts_stores" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmtsstores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMTSStoresList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wmts_store(self, **kwargs):  # noqa: E501
        """post_wmts_store  # noqa: E501

        Invalid. Use POST on /workspaces/{workspace}/WMTSstores for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{store} to edit/upload an existing WMTS store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wmts_store(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wmts_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_wmts_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_wmts_store_with_http_info(self, **kwargs):  # noqa: E501
        """post_wmts_store  # noqa: E501

        Invalid. Use POST on /workspaces/{workspace}/WMTSstores for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{store} to edit/upload an existing WMTS store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wmts_store_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wmts_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmtsstores/{store}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wmts_stores(self, workspace, wmts_store_body, **kwargs):  # noqa: E501
        """Add a new WMTS store  # noqa: E501

        Adds a new WMTS store entry to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wmts_stores(workspace, wmts_store_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the worskpace containing the WMTS store. (required)
        :param WMTSStoreInfo wmts_store_body: WMTS store body information to upload.  Examples: - application/xml:    ```   <wmtsStore>     <name>remote</name>     <capabilitiesUrl>http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities</capabilitiesUrl>   </wmtsStore>   ```  - application/json:    ```   {     \"wmtsStore\": {       \"name\": \"remote\",       \"capabilitiesUrl\": \"http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities\"     }   }   ```  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wmts_stores_with_http_info(workspace, wmts_store_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_wmts_stores_with_http_info(workspace, wmts_store_body, **kwargs)  # noqa: E501
            return data

    def post_wmts_stores_with_http_info(self, workspace, wmts_store_body, **kwargs):  # noqa: E501
        """Add a new WMTS store  # noqa: E501

        Adds a new WMTS store entry to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wmts_stores_with_http_info(workspace, wmts_store_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the worskpace containing the WMTS store. (required)
        :param WMTSStoreInfo wmts_store_body: WMTS store body information to upload.  Examples: - application/xml:    ```   <wmtsStore>     <name>remote</name>     <capabilitiesUrl>http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities</capabilitiesUrl>   </wmtsStore>   ```  - application/json:    ```   {     \"wmtsStore\": {       \"name\": \"remote\",       \"capabilitiesUrl\": \"http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities\"     }   }   ```  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmts_store_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wmts_stores" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_wmts_stores`")  # noqa: E501
        # verify the required parameter 'wmts_store_body' is set
        if self.api_client.client_side_validation and ('wmts_store_body' not in params or
                                                       params['wmts_store_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmts_store_body` when calling `post_wmts_stores`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wmts_store_body' in params:
            body_params = params['wmts_store_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmtsstores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wmts_store(self, workspace, store, wmts_store_body, **kwargs):  # noqa: E501
        """Modify a single WMTS store.  # noqa: E501

        Modifies a single WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wmts_store(workspace, store, wmts_store_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the WMTS stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param WMTSStoreInfo wmts_store_body: WMTS store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    ```   <wmtsStore>     <description>A wmts store</description>     <enabled>true</enabled>     <__default>true</__default>     <capabilitiesUrl>http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities</capabilitiesUrl>     <user>admin</user>     <password>geoserver</password>     <maxConnections>6</maxConnections>     <readTimeout>60</readTimeout>     <connectTimeout>30</connectTimeout>   </wmtsStore>   ```  - application/json:    ```   {     \"wmtsStore\": {       \"description\": \"A wmts store\",       \"enabled\": \"true\",       \"_default\": \"true\",       \"capabilitiesUrl\": \"http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities\",       \"user\": \"admin\",       \"password\": \"geoserver\",       \"maxConnections\": \"6\",       \"readTimeout\": \"60\",       \"connectTimeout\": \"30\"     }   }   ```  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wmts_store_with_http_info(workspace, store, wmts_store_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wmts_store_with_http_info(workspace, store, wmts_store_body, **kwargs)  # noqa: E501
            return data

    def put_wmts_store_with_http_info(self, workspace, store, wmts_store_body, **kwargs):  # noqa: E501
        """Modify a single WMTS store.  # noqa: E501

        Modifies a single WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wmts_store_with_http_info(workspace, store, wmts_store_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace containing the WMTS stores. (required)
        :param str store: The name of the store to be retrieved (required)
        :param WMTSStoreInfo wmts_store_body: WMTS store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    ```   <wmtsStore>     <description>A wmts store</description>     <enabled>true</enabled>     <__default>true</__default>     <capabilitiesUrl>http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities</capabilitiesUrl>     <user>admin</user>     <password>geoserver</password>     <maxConnections>6</maxConnections>     <readTimeout>60</readTimeout>     <connectTimeout>30</connectTimeout>   </wmtsStore>   ```  - application/json:    ```   {     \"wmtsStore\": {       \"description\": \"A wmts store\",       \"enabled\": \"true\",       \"_default\": \"true\",       \"capabilitiesUrl\": \"http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities\",       \"user\": \"admin\",       \"password\": \"geoserver\",       \"maxConnections\": \"6\",       \"readTimeout\": \"60\",       \"connectTimeout\": \"30\"     }   }   ```  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'wmts_store_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wmts_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_wmts_store`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `put_wmts_store`")  # noqa: E501
        # verify the required parameter 'wmts_store_body' is set
        if self.api_client.client_side_validation and ('wmts_store_body' not in params or
                                                       params['wmts_store_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmts_store_body` when calling `put_wmts_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wmts_store_body' in params:
            body_params = params['wmts_store_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmtsstores/{store}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wmts_stores(self, **kwargs):  # noqa: E501
        """put_wmts_stores  # noqa: E501

        Invalid. Use POST for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{wmtsstore} to edit an existing WMTS store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wmts_stores(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wmts_stores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_wmts_stores_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_wmts_stores_with_http_info(self, **kwargs):  # noqa: E501
        """put_wmts_stores  # noqa: E501

        Invalid. Use POST for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{wmtsstore} to edit an existing WMTS store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wmts_stores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wmts_stores" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmtsstores', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
