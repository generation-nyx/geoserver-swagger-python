# coding: utf-8

"""
    GeoServer WMS Store Layers

    A WMS store is a store whose source is another WMS. Also known as \"Cascading WMS\" or \"External WMS\". A WMS store layer is a layer from this store.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WMSStoreLayerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'native_name': 'str',
        'namespace': 'WMSStoreLayerInfoNamespace',
        'title': 'str',
        'abstract': 'str',
        'description': 'str',
        'keywords': 'list[WMSStoreLayerInfoKeywords]',
        'metadatalinks': 'WMSStoreLayerInfoMetadatalinks',
        'data_links': 'WMSStoreLayerInfoDataLinks',
        'native_crs': 'str',
        'srs': 'str',
        'native_bounding_box': 'WMSStoreLayerInfoNativeBoundingBox',
        'lat_lon_bounding_box': 'WMSStoreLayerInfoLatLonBoundingBox',
        'projection_policy': 'str',
        'enabled': 'bool',
        'metadata': 'list[MetadataEntry]',
        'store': 'WMSStoreLayerInfoStore',
        'forced_remote_style': 'str',
        'selected_remote_formats': 'list[str]',
        'preferred_format': 'str',
        'selected_remote_styles': 'list[str]',
        'all_available_remote_styles': 'list[StyleInfo]',
        'min_scale': 'float',
        'max_scale': 'float',
        'metadata_b_box_respected': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'native_name': 'nativeName',
        'namespace': 'namespace',
        'title': 'title',
        'abstract': 'abstract',
        'description': 'description',
        'keywords': 'keywords',
        'metadatalinks': 'metadatalinks',
        'data_links': 'dataLinks',
        'native_crs': 'nativeCRS',
        'srs': 'srs',
        'native_bounding_box': 'nativeBoundingBox',
        'lat_lon_bounding_box': 'latLonBoundingBox',
        'projection_policy': 'projectionPolicy',
        'enabled': 'enabled',
        'metadata': 'metadata',
        'store': 'store',
        'forced_remote_style': 'forcedRemoteStyle',
        'selected_remote_formats': 'selectedRemoteFormats',
        'preferred_format': 'preferredFormat',
        'selected_remote_styles': 'selectedRemoteStyles',
        'all_available_remote_styles': 'allAvailableRemoteStyles',
        'min_scale': 'minScale',
        'max_scale': 'maxScale',
        'metadata_b_box_respected': 'metadataBBoxRespected'
    }

    def __init__(self, name=None, native_name=None, namespace=None, title=None, abstract=None, description=None, keywords=None, metadatalinks=None, data_links=None, native_crs=None, srs=None, native_bounding_box=None, lat_lon_bounding_box=None, projection_policy=None, enabled=None, metadata=None, store=None, forced_remote_style=None, selected_remote_formats=None, preferred_format=None, selected_remote_styles=None, all_available_remote_styles=None, min_scale=None, max_scale=None, metadata_b_box_respected=None, _configuration=None):  # noqa: E501
        """WMSStoreLayerInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._native_name = None
        self._namespace = None
        self._title = None
        self._abstract = None
        self._description = None
        self._keywords = None
        self._metadatalinks = None
        self._data_links = None
        self._native_crs = None
        self._srs = None
        self._native_bounding_box = None
        self._lat_lon_bounding_box = None
        self._projection_policy = None
        self._enabled = None
        self._metadata = None
        self._store = None
        self._forced_remote_style = None
        self._selected_remote_formats = None
        self._preferred_format = None
        self._selected_remote_styles = None
        self._all_available_remote_styles = None
        self._min_scale = None
        self._max_scale = None
        self._metadata_b_box_respected = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if native_name is not None:
            self.native_name = native_name
        if namespace is not None:
            self.namespace = namespace
        if title is not None:
            self.title = title
        if abstract is not None:
            self.abstract = abstract
        if description is not None:
            self.description = description
        if keywords is not None:
            self.keywords = keywords
        if metadatalinks is not None:
            self.metadatalinks = metadatalinks
        if data_links is not None:
            self.data_links = data_links
        if native_crs is not None:
            self.native_crs = native_crs
        if srs is not None:
            self.srs = srs
        if native_bounding_box is not None:
            self.native_bounding_box = native_bounding_box
        if lat_lon_bounding_box is not None:
            self.lat_lon_bounding_box = lat_lon_bounding_box
        if projection_policy is not None:
            self.projection_policy = projection_policy
        if enabled is not None:
            self.enabled = enabled
        if metadata is not None:
            self.metadata = metadata
        if store is not None:
            self.store = store
        if forced_remote_style is not None:
            self.forced_remote_style = forced_remote_style
        if selected_remote_formats is not None:
            self.selected_remote_formats = selected_remote_formats
        if preferred_format is not None:
            self.preferred_format = preferred_format
        if selected_remote_styles is not None:
            self.selected_remote_styles = selected_remote_styles
        if all_available_remote_styles is not None:
            self.all_available_remote_styles = all_available_remote_styles
        if min_scale is not None:
            self.min_scale = min_scale
        if max_scale is not None:
            self.max_scale = max_scale
        if metadata_b_box_respected is not None:
            self.metadata_b_box_respected = metadata_b_box_respected

    @property
    def name(self):
        """Gets the name of this WMSStoreLayerInfo.  # noqa: E501

        Name of the layer, corresponding to the published name of the resource  # noqa: E501

        :return: The name of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WMSStoreLayerInfo.

        Name of the layer, corresponding to the published name of the resource  # noqa: E501

        :param name: The name of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def native_name(self):
        """Gets the native_name of this WMSStoreLayerInfo.  # noqa: E501

        Name of the layer as known on the remote WMS  # noqa: E501

        :return: The native_name of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._native_name

    @native_name.setter
    def native_name(self, native_name):
        """Sets the native_name of this WMSStoreLayerInfo.

        Name of the layer as known on the remote WMS  # noqa: E501

        :param native_name: The native_name of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """

        self._native_name = native_name

    @property
    def namespace(self):
        """Gets the namespace of this WMSStoreLayerInfo.  # noqa: E501


        :return: The namespace of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: WMSStoreLayerInfoNamespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this WMSStoreLayerInfo.


        :param namespace: The namespace of this WMSStoreLayerInfo.  # noqa: E501
        :type: WMSStoreLayerInfoNamespace
        """

        self._namespace = namespace

    @property
    def title(self):
        """Gets the title of this WMSStoreLayerInfo.  # noqa: E501

        Title of the layer  # noqa: E501

        :return: The title of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WMSStoreLayerInfo.

        Title of the layer  # noqa: E501

        :param title: The title of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def abstract(self):
        """Gets the abstract of this WMSStoreLayerInfo.  # noqa: E501

        Description of the layer  # noqa: E501

        :return: The abstract of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this WMSStoreLayerInfo.

        Description of the layer  # noqa: E501

        :param abstract: The abstract of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def description(self):
        """Gets the description of this WMSStoreLayerInfo.  # noqa: E501

        Same as abstract  # noqa: E501

        :return: The description of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WMSStoreLayerInfo.

        Same as abstract  # noqa: E501

        :param description: The description of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def keywords(self):
        """Gets the keywords of this WMSStoreLayerInfo.  # noqa: E501

        Collection of keywords associated with the layer  # noqa: E501

        :return: The keywords of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: list[WMSStoreLayerInfoKeywords]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this WMSStoreLayerInfo.

        Collection of keywords associated with the layer  # noqa: E501

        :param keywords: The keywords of this WMSStoreLayerInfo.  # noqa: E501
        :type: list[WMSStoreLayerInfoKeywords]
        """

        self._keywords = keywords

    @property
    def metadatalinks(self):
        """Gets the metadatalinks of this WMSStoreLayerInfo.  # noqa: E501


        :return: The metadatalinks of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: WMSStoreLayerInfoMetadatalinks
        """
        return self._metadatalinks

    @metadatalinks.setter
    def metadatalinks(self, metadatalinks):
        """Sets the metadatalinks of this WMSStoreLayerInfo.


        :param metadatalinks: The metadatalinks of this WMSStoreLayerInfo.  # noqa: E501
        :type: WMSStoreLayerInfoMetadatalinks
        """

        self._metadatalinks = metadatalinks

    @property
    def data_links(self):
        """Gets the data_links of this WMSStoreLayerInfo.  # noqa: E501


        :return: The data_links of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: WMSStoreLayerInfoDataLinks
        """
        return self._data_links

    @data_links.setter
    def data_links(self, data_links):
        """Sets the data_links of this WMSStoreLayerInfo.


        :param data_links: The data_links of this WMSStoreLayerInfo.  # noqa: E501
        :type: WMSStoreLayerInfoDataLinks
        """

        self._data_links = data_links

    @property
    def native_crs(self):
        """Gets the native_crs of this WMSStoreLayerInfo.  # noqa: E501

        Native coordinate reference system object in WKT  # noqa: E501

        :return: The native_crs of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._native_crs

    @native_crs.setter
    def native_crs(self, native_crs):
        """Sets the native_crs of this WMSStoreLayerInfo.

        Native coordinate reference system object in WKT  # noqa: E501

        :param native_crs: The native_crs of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """

        self._native_crs = native_crs

    @property
    def srs(self):
        """Gets the srs of this WMSStoreLayerInfo.  # noqa: E501

        Identifier of coordinate reference system  # noqa: E501

        :return: The srs of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._srs

    @srs.setter
    def srs(self, srs):
        """Sets the srs of this WMSStoreLayerInfo.

        Identifier of coordinate reference system  # noqa: E501

        :param srs: The srs of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """

        self._srs = srs

    @property
    def native_bounding_box(self):
        """Gets the native_bounding_box of this WMSStoreLayerInfo.  # noqa: E501


        :return: The native_bounding_box of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: WMSStoreLayerInfoNativeBoundingBox
        """
        return self._native_bounding_box

    @native_bounding_box.setter
    def native_bounding_box(self, native_bounding_box):
        """Sets the native_bounding_box of this WMSStoreLayerInfo.


        :param native_bounding_box: The native_bounding_box of this WMSStoreLayerInfo.  # noqa: E501
        :type: WMSStoreLayerInfoNativeBoundingBox
        """

        self._native_bounding_box = native_bounding_box

    @property
    def lat_lon_bounding_box(self):
        """Gets the lat_lon_bounding_box of this WMSStoreLayerInfo.  # noqa: E501


        :return: The lat_lon_bounding_box of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: WMSStoreLayerInfoLatLonBoundingBox
        """
        return self._lat_lon_bounding_box

    @lat_lon_bounding_box.setter
    def lat_lon_bounding_box(self, lat_lon_bounding_box):
        """Sets the lat_lon_bounding_box of this WMSStoreLayerInfo.


        :param lat_lon_bounding_box: The lat_lon_bounding_box of this WMSStoreLayerInfo.  # noqa: E501
        :type: WMSStoreLayerInfoLatLonBoundingBox
        """

        self._lat_lon_bounding_box = lat_lon_bounding_box

    @property
    def projection_policy(self):
        """Gets the projection_policy of this WMSStoreLayerInfo.  # noqa: E501

        How to handle the coordinate reference system (native versus declared)  # noqa: E501

        :return: The projection_policy of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._projection_policy

    @projection_policy.setter
    def projection_policy(self, projection_policy):
        """Sets the projection_policy of this WMSStoreLayerInfo.

        How to handle the coordinate reference system (native versus declared)  # noqa: E501

        :param projection_policy: The projection_policy of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["FORCE_DECLARED", "REPROJECT_TO_DECLARE", "NONE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                projection_policy not in allowed_values):
            raise ValueError(
                "Invalid value for `projection_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(projection_policy, allowed_values)
            )

        self._projection_policy = projection_policy

    @property
    def enabled(self):
        """Gets the enabled of this WMSStoreLayerInfo.  # noqa: E501

        Whether the layer is enabled  # noqa: E501

        :return: The enabled of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WMSStoreLayerInfo.

        Whether the layer is enabled  # noqa: E501

        :param enabled: The enabled of this WMSStoreLayerInfo.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def metadata(self):
        """Gets the metadata of this WMSStoreLayerInfo.  # noqa: E501

        A list of key/value metadata pairs.  # noqa: E501

        :return: The metadata of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: list[MetadataEntry]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this WMSStoreLayerInfo.

        A list of key/value metadata pairs.  # noqa: E501

        :param metadata: The metadata of this WMSStoreLayerInfo.  # noqa: E501
        :type: list[MetadataEntry]
        """

        self._metadata = metadata

    @property
    def store(self):
        """Gets the store of this WMSStoreLayerInfo.  # noqa: E501


        :return: The store of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: WMSStoreLayerInfoStore
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this WMSStoreLayerInfo.


        :param store: The store of this WMSStoreLayerInfo.  # noqa: E501
        :type: WMSStoreLayerInfoStore
        """

        self._store = store

    @property
    def forced_remote_style(self):
        """Gets the forced_remote_style of this WMSStoreLayerInfo.  # noqa: E501

        Remote style to be used in remote GetMap request.  # noqa: E501

        :return: The forced_remote_style of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._forced_remote_style

    @forced_remote_style.setter
    def forced_remote_style(self, forced_remote_style):
        """Sets the forced_remote_style of this WMSStoreLayerInfo.

        Remote style to be used in remote GetMap request.  # noqa: E501

        :param forced_remote_style: The forced_remote_style of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """

        self._forced_remote_style = forced_remote_style

    @property
    def selected_remote_formats(self):
        """Gets the selected_remote_formats of this WMSStoreLayerInfo.  # noqa: E501

        Additional list of image formats supported by remote WMS Server.  # noqa: E501

        :return: The selected_remote_formats of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_remote_formats

    @selected_remote_formats.setter
    def selected_remote_formats(self, selected_remote_formats):
        """Sets the selected_remote_formats of this WMSStoreLayerInfo.

        Additional list of image formats supported by remote WMS Server.  # noqa: E501

        :param selected_remote_formats: The selected_remote_formats of this WMSStoreLayerInfo.  # noqa: E501
        :type: list[str]
        """

        self._selected_remote_formats = selected_remote_formats

    @property
    def preferred_format(self):
        """Gets the preferred_format of this WMSStoreLayerInfo.  # noqa: E501

        Output image format to be used in remote GetMap request  # noqa: E501

        :return: The preferred_format of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._preferred_format

    @preferred_format.setter
    def preferred_format(self, preferred_format):
        """Sets the preferred_format of this WMSStoreLayerInfo.

        Output image format to be used in remote GetMap request  # noqa: E501

        :param preferred_format: The preferred_format of this WMSStoreLayerInfo.  # noqa: E501
        :type: str
        """

        self._preferred_format = preferred_format

    @property
    def selected_remote_styles(self):
        """Gets the selected_remote_styles of this WMSStoreLayerInfo.  # noqa: E501

        Additional list of remote styles that can be used to remote GetMap requests.  # noqa: E501

        :return: The selected_remote_styles of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_remote_styles

    @selected_remote_styles.setter
    def selected_remote_styles(self, selected_remote_styles):
        """Sets the selected_remote_styles of this WMSStoreLayerInfo.

        Additional list of remote styles that can be used to remote GetMap requests.  # noqa: E501

        :param selected_remote_styles: The selected_remote_styles of this WMSStoreLayerInfo.  # noqa: E501
        :type: list[str]
        """

        self._selected_remote_styles = selected_remote_styles

    @property
    def all_available_remote_styles(self):
        """Gets the all_available_remote_styles of this WMSStoreLayerInfo.  # noqa: E501

        List of complete style info objects that contain name, sld format and GetLegendRequests.  # noqa: E501

        :return: The all_available_remote_styles of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: list[StyleInfo]
        """
        return self._all_available_remote_styles

    @all_available_remote_styles.setter
    def all_available_remote_styles(self, all_available_remote_styles):
        """Sets the all_available_remote_styles of this WMSStoreLayerInfo.

        List of complete style info objects that contain name, sld format and GetLegendRequests.  # noqa: E501

        :param all_available_remote_styles: The all_available_remote_styles of this WMSStoreLayerInfo.  # noqa: E501
        :type: list[StyleInfo]
        """

        self._all_available_remote_styles = all_available_remote_styles

    @property
    def min_scale(self):
        """Gets the min_scale of this WMSStoreLayerInfo.  # noqa: E501

        minimum scale denominator, works like Scale denomintors in SLD.  # noqa: E501

        :return: The min_scale of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: float
        """
        return self._min_scale

    @min_scale.setter
    def min_scale(self, min_scale):
        """Sets the min_scale of this WMSStoreLayerInfo.

        minimum scale denominator, works like Scale denomintors in SLD.  # noqa: E501

        :param min_scale: The min_scale of this WMSStoreLayerInfo.  # noqa: E501
        :type: float
        """

        self._min_scale = min_scale

    @property
    def max_scale(self):
        """Gets the max_scale of this WMSStoreLayerInfo.  # noqa: E501

        maximum scale denominator, works like Scale denomintors in SLD.  # noqa: E501

        :return: The max_scale of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: float
        """
        return self._max_scale

    @max_scale.setter
    def max_scale(self, max_scale):
        """Sets the max_scale of this WMSStoreLayerInfo.

        maximum scale denominator, works like Scale denomintors in SLD.  # noqa: E501

        :param max_scale: The max_scale of this WMSStoreLayerInfo.  # noqa: E501
        :type: float
        """

        self._max_scale = max_scale

    @property
    def metadata_b_box_respected(self):
        """Gets the metadata_b_box_respected of this WMSStoreLayerInfo.  # noqa: E501

        An optimization that skips remote GetMap requests if requested Map is outside advertised bounds.  # noqa: E501

        :return: The metadata_b_box_respected of this WMSStoreLayerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._metadata_b_box_respected

    @metadata_b_box_respected.setter
    def metadata_b_box_respected(self, metadata_b_box_respected):
        """Sets the metadata_b_box_respected of this WMSStoreLayerInfo.

        An optimization that skips remote GetMap requests if requested Map is outside advertised bounds.  # noqa: E501

        :param metadata_b_box_respected: The metadata_b_box_respected of this WMSStoreLayerInfo.  # noqa: E501
        :type: bool
        """

        self._metadata_b_box_respected = metadata_b_box_respected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WMSStoreLayerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WMSStoreLayerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WMSStoreLayerInfo):
            return True

        return self.to_dict() != other.to_dict()
