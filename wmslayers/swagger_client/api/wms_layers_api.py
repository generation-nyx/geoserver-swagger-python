# coding: utf-8

"""
    GeoServer WMS Store Layers

    A WMS store is a store whose source is another WMS. Also known as \"Cascading WMS\" or \"External WMS\". A WMS store layer is a layer from this store.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WMSLayersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_wms_store_layer(self, workspace, wmslayer, **kwargs):  # noqa: E501
        """delete_wms_store_layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_store_layer(workspace, wmslayer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmslayer: Name of the layer to be deleted (required)
        :param bool recurse: Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the wmslayer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wms_store_layer_with_http_info(workspace, wmslayer, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_wms_store_layer_with_http_info(workspace, wmslayer, **kwargs)  # noqa: E501
            return data

    def delete_wms_store_layer_with_http_info(self, workspace, wmslayer, **kwargs):  # noqa: E501
        """delete_wms_store_layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_store_layer_with_http_info(workspace, wmslayer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmslayer: Name of the layer to be deleted (required)
        :param bool recurse: Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the wmslayer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmslayer', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wms_store_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_wms_store_layer`")  # noqa: E501
        # verify the required parameter 'wmslayer' is set
        if self.api_client.client_side_validation and ('wmslayer' not in params or
                                                       params['wmslayer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmslayer` when calling `delete_wms_store_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'wmslayer' in params:
            path_params['wmslayer'] = params['wmslayer']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmslayers/{wmslayer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wms_store_layers(self, **kwargs):  # noqa: E501
        """delete_wms_store_layers  # noqa: E501

        Invalid. Can only delete an individual layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_store_layers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wms_store_layers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_wms_store_layers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_wms_store_layers_with_http_info(self, **kwargs):  # noqa: E501
        """delete_wms_store_layers  # noqa: E501

        Invalid. Can only delete an individual layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_store_layers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wms_store_layers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmslayers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wms_store_store_layer(self, workspace, wmsstore, wmslayer, **kwargs):  # noqa: E501
        """delete_wms_store_store_layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_store_store_layer(workspace, wmsstore, wmslayer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the store (required)
        :param str wmslayer: Name of the layer to be deleted (required)
        :param bool recurse: Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the wmslayer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wms_store_store_layer_with_http_info(workspace, wmsstore, wmslayer, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_wms_store_store_layer_with_http_info(workspace, wmsstore, wmslayer, **kwargs)  # noqa: E501
            return data

    def delete_wms_store_store_layer_with_http_info(self, workspace, wmsstore, wmslayer, **kwargs):  # noqa: E501
        """delete_wms_store_store_layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_store_store_layer_with_http_info(workspace, wmsstore, wmslayer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the store (required)
        :param str wmslayer: Name of the layer to be deleted (required)
        :param bool recurse: Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the wmslayer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmsstore', 'wmslayer', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wms_store_store_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_wms_store_store_layer`")  # noqa: E501
        # verify the required parameter 'wmsstore' is set
        if self.api_client.client_side_validation and ('wmsstore' not in params or
                                                       params['wmsstore'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmsstore` when calling `delete_wms_store_store_layer`")  # noqa: E501
        # verify the required parameter 'wmslayer' is set
        if self.api_client.client_side_validation and ('wmslayer' not in params or
                                                       params['wmslayer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmslayer` when calling `delete_wms_store_store_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'wmsstore' in params:
            path_params['wmsstore'] = params['wmsstore']  # noqa: E501
        if 'wmslayer' in params:
            path_params['wmslayer'] = params['wmslayer']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wms_store_store_layers(self, **kwargs):  # noqa: E501
        """delete_wms_store_store_layers  # noqa: E501

        Invalid. Can only delete an individual layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_store_store_layers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wms_store_store_layers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_wms_store_store_layers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_wms_store_store_layers_with_http_info(self, **kwargs):  # noqa: E501
        """delete_wms_store_store_layers  # noqa: E501

        Invalid. Can only delete an individual layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wms_store_store_layers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wms_store_store_layers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wms_store_layer(self, workspace, wmslayer, **kwargs):  # noqa: E501
        """get_wms_store_layer  # noqa: E501

        Retrieves an individual WMS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers/{wmslayer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_store_layer(workspace, wmslayer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmslayer: Name of the layer (required)
        :param bool quiet_on_not_found: When set to \"true\", will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \"true\" or \"false\" (default).
        :return: WMSStoreLayerInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wms_store_layer_with_http_info(workspace, wmslayer, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wms_store_layer_with_http_info(workspace, wmslayer, **kwargs)  # noqa: E501
            return data

    def get_wms_store_layer_with_http_info(self, workspace, wmslayer, **kwargs):  # noqa: E501
        """get_wms_store_layer  # noqa: E501

        Retrieves an individual WMS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers/{wmslayer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_store_layer_with_http_info(workspace, wmslayer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmslayer: Name of the layer (required)
        :param bool quiet_on_not_found: When set to \"true\", will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \"true\" or \"false\" (default).
        :return: WMSStoreLayerInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmslayer', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wms_store_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_wms_store_layer`")  # noqa: E501
        # verify the required parameter 'wmslayer' is set
        if self.api_client.client_side_validation and ('wmslayer' not in params or
                                                       params['wmslayer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmslayer` when calling `get_wms_store_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'wmslayer' in params:
            path_params['wmslayer'] = params['wmslayer']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmslayers/{wmslayer}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMSStoreLayerInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wms_store_layers(self, workspace, **kwargs):  # noqa: E501
        """get_wms_store_layers  # noqa: E501

        Retrieves the WMS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_store_layers(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str list: Set \"list=available\" to see all possible layers in the store, not just ones currently published
        :return: WMSStoreLayersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wms_store_layers_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wms_store_layers_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_wms_store_layers_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """get_wms_store_layers  # noqa: E501

        Retrieves the WMS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_store_layers_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str list: Set \"list=available\" to see all possible layers in the store, not just ones currently published
        :return: WMSStoreLayersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wms_store_layers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_wms_store_layers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmslayers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMSStoreLayersList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wms_store_store_layer(self, workspace, wmsstore, wmslayer, **kwargs):  # noqa: E501
        """get_wms_store_store_layer  # noqa: E501

        Retrieves an individual WMS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_store_store_layer(workspace, wmsstore, wmslayer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the store (required)
        :param str wmslayer: Name of the layer (required)
        :param bool quiet_on_not_found: When set to \"true\", will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \"true\" or \"false\" (default).
        :return: WMSStoreLayerInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wms_store_store_layer_with_http_info(workspace, wmsstore, wmslayer, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wms_store_store_layer_with_http_info(workspace, wmsstore, wmslayer, **kwargs)  # noqa: E501
            return data

    def get_wms_store_store_layer_with_http_info(self, workspace, wmsstore, wmslayer, **kwargs):  # noqa: E501
        """get_wms_store_store_layer  # noqa: E501

        Retrieves an individual WMS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_store_store_layer_with_http_info(workspace, wmsstore, wmslayer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the store (required)
        :param str wmslayer: Name of the layer (required)
        :param bool quiet_on_not_found: When set to \"true\", will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \"true\" or \"false\" (default).
        :return: WMSStoreLayerInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmsstore', 'wmslayer', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wms_store_store_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_wms_store_store_layer`")  # noqa: E501
        # verify the required parameter 'wmsstore' is set
        if self.api_client.client_side_validation and ('wmsstore' not in params or
                                                       params['wmsstore'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmsstore` when calling `get_wms_store_store_layer`")  # noqa: E501
        # verify the required parameter 'wmslayer' is set
        if self.api_client.client_side_validation and ('wmslayer' not in params or
                                                       params['wmslayer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmslayer` when calling `get_wms_store_store_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'wmsstore' in params:
            path_params['wmsstore'] = params['wmsstore']  # noqa: E501
        if 'wmslayer' in params:
            path_params['wmslayer'] = params['wmslayer']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMSStoreLayerInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wms_store_store_layers(self, workspace, wmsstore, **kwargs):  # noqa: E501
        """get_wms_store_store_layers  # noqa: E501

        Retrieves the WMS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_store_store_layers(workspace, wmsstore, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the store (required)
        :param str list: Set \"list=available\" to see all possible layers in the store, not just ones currently published
        :return: WMSStoreLayersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wms_store_store_layers_with_http_info(workspace, wmsstore, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wms_store_store_layers_with_http_info(workspace, wmsstore, **kwargs)  # noqa: E501
            return data

    def get_wms_store_store_layers_with_http_info(self, workspace, wmsstore, **kwargs):  # noqa: E501
        """get_wms_store_store_layers  # noqa: E501

        Retrieves the WMS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wms_store_store_layers_with_http_info(workspace, wmsstore, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the store (required)
        :param str list: Set \"list=available\" to see all possible layers in the store, not just ones currently published
        :return: WMSStoreLayersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmsstore', 'list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wms_store_store_layers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_wms_store_store_layers`")  # noqa: E501
        # verify the required parameter 'wmsstore' is set
        if self.api_client.client_side_validation and ('wmsstore' not in params or
                                                       params['wmsstore'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmsstore` when calling `get_wms_store_store_layers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'wmsstore' in params:
            path_params['wmsstore'] = params['wmsstore']  # noqa: E501

        query_params = []
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WMSStoreLayersList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wms_store_layer(self, **kwargs):  # noqa: E501
        """post_wms_store_layer  # noqa: E501

        Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_store_layer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wms_store_layer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_wms_store_layer_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_wms_store_layer_with_http_info(self, **kwargs):  # noqa: E501
        """post_wms_store_layer  # noqa: E501

        Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_store_layer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wms_store_layer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmslayers/{wmslayer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wms_store_layers(self, workspace, wms_store_layer_body, **kwargs):  # noqa: E501
        """post_wms_store_layers  # noqa: E501

        Publishes a new WMS store layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_store_layers(workspace, wms_store_layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param WMSStoreLayerInfo wms_store_layer_body: Body of the WMS store layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wms_store_layers_with_http_info(workspace, wms_store_layer_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_wms_store_layers_with_http_info(workspace, wms_store_layer_body, **kwargs)  # noqa: E501
            return data

    def post_wms_store_layers_with_http_info(self, workspace, wms_store_layer_body, **kwargs):  # noqa: E501
        """post_wms_store_layers  # noqa: E501

        Publishes a new WMS store layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_store_layers_with_http_info(workspace, wms_store_layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param WMSStoreLayerInfo wms_store_layer_body: Body of the WMS store layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wms_store_layer_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wms_store_layers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_wms_store_layers`")  # noqa: E501
        # verify the required parameter 'wms_store_layer_body' is set
        if self.api_client.client_side_validation and ('wms_store_layer_body' not in params or
                                                       params['wms_store_layer_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wms_store_layer_body` when calling `post_wms_store_layers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wms_store_layer_body' in params:
            body_params = params['wms_store_layer_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmslayers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wms_store_store_layer(self, **kwargs):  # noqa: E501
        """post_wms_store_store_layer  # noqa: E501

        Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_store_store_layer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wms_store_store_layer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_wms_store_store_layer_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_wms_store_store_layer_with_http_info(self, **kwargs):  # noqa: E501
        """post_wms_store_store_layer  # noqa: E501

        Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_store_store_layer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wms_store_store_layer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_wms_store_store_layers(self, workspace, wmsstore, wms_store_layer_body, **kwargs):  # noqa: E501
        """post_wms_store_store_layers  # noqa: E501

        Publishes a new WMS store layer in the given store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_store_store_layers(workspace, wmsstore, wms_store_layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the data store (required)
        :param WMSStoreLayerInfo wms_store_layer_body: Body of the WMS store layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_wms_store_store_layers_with_http_info(workspace, wmsstore, wms_store_layer_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_wms_store_store_layers_with_http_info(workspace, wmsstore, wms_store_layer_body, **kwargs)  # noqa: E501
            return data

    def post_wms_store_store_layers_with_http_info(self, workspace, wmsstore, wms_store_layer_body, **kwargs):  # noqa: E501
        """post_wms_store_store_layers  # noqa: E501

        Publishes a new WMS store layer in the given store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_wms_store_store_layers_with_http_info(workspace, wmsstore, wms_store_layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the data store (required)
        :param WMSStoreLayerInfo wms_store_layer_body: Body of the WMS store layer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmsstore', 'wms_store_layer_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_wms_store_store_layers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `post_wms_store_store_layers`")  # noqa: E501
        # verify the required parameter 'wmsstore' is set
        if self.api_client.client_side_validation and ('wmsstore' not in params or
                                                       params['wmsstore'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmsstore` when calling `post_wms_store_store_layers`")  # noqa: E501
        # verify the required parameter 'wms_store_layer_body' is set
        if self.api_client.client_side_validation and ('wms_store_layer_body' not in params or
                                                       params['wms_store_layer_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wms_store_layer_body` when calling `post_wms_store_store_layers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'wmsstore' in params:
            path_params['wmsstore'] = params['wmsstore']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wms_store_layer_body' in params:
            body_params = params['wms_store_layer_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wms_store_layer(self, workspace, wmslayer, wms_store_layer_body, **kwargs):  # noqa: E501
        """put_wms_store_layer  # noqa: E501

        Edits an existing WMS store layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_store_layer(workspace, wmslayer, wms_store_layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmslayer: Name of the layer to be edited (required)
        :param WMSStoreLayerInfo wms_store_layer_body: Body of the WMS store layer (required)
        :param list[str] calculate: Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wms_store_layer_with_http_info(workspace, wmslayer, wms_store_layer_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wms_store_layer_with_http_info(workspace, wmslayer, wms_store_layer_body, **kwargs)  # noqa: E501
            return data

    def put_wms_store_layer_with_http_info(self, workspace, wmslayer, wms_store_layer_body, **kwargs):  # noqa: E501
        """put_wms_store_layer  # noqa: E501

        Edits an existing WMS store layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_store_layer_with_http_info(workspace, wmslayer, wms_store_layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmslayer: Name of the layer to be edited (required)
        :param WMSStoreLayerInfo wms_store_layer_body: Body of the WMS store layer (required)
        :param list[str] calculate: Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmslayer', 'wms_store_layer_body', 'calculate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wms_store_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_wms_store_layer`")  # noqa: E501
        # verify the required parameter 'wmslayer' is set
        if self.api_client.client_side_validation and ('wmslayer' not in params or
                                                       params['wmslayer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmslayer` when calling `put_wms_store_layer`")  # noqa: E501
        # verify the required parameter 'wms_store_layer_body' is set
        if self.api_client.client_side_validation and ('wms_store_layer_body' not in params or
                                                       params['wms_store_layer_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wms_store_layer_body` when calling `put_wms_store_layer`")  # noqa: E501

        if self.api_client.client_side_validation and ('calculate' in params and
                                            len(params['calculate']) > 2):
            raise ValueError("Invalid value for parameter `calculate` when calling `put_wms_store_layer`, number of items must be less than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('calculate' in params and
                                            len(params['calculate']) < 0):
            raise ValueError("Invalid value for parameter `calculate` when calling `put_wms_store_layer`, number of items must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'wmslayer' in params:
            path_params['wmslayer'] = params['wmslayer']  # noqa: E501

        query_params = []
        if 'calculate' in params:
            query_params.append(('calculate', params['calculate']))  # noqa: E501
            collection_formats['calculate'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wms_store_layer_body' in params:
            body_params = params['wms_store_layer_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmslayers/{wmslayer}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wms_store_layers(self, **kwargs):  # noqa: E501
        """put_wms_store_layers  # noqa: E501

        Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_store_layers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wms_store_layers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_wms_store_layers_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_wms_store_layers_with_http_info(self, **kwargs):  # noqa: E501
        """put_wms_store_layers  # noqa: E501

        Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_store_layers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wms_store_layers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmslayers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wms_store_store_layer(self, workspace, wmsstore, wmslayer, wms_store_layer_body, **kwargs):  # noqa: E501
        """put_wms_store_store_layer  # noqa: E501

        Edits an existing WMS store layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_store_store_layer(workspace, wmsstore, wmslayer, wms_store_layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the store (required)
        :param str wmslayer: Name of the layer to be edited (required)
        :param WMSStoreLayerInfo wms_store_layer_body: Body of the WMS store layer (required)
        :param list[str] calculate: Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wms_store_store_layer_with_http_info(workspace, wmsstore, wmslayer, wms_store_layer_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_wms_store_store_layer_with_http_info(workspace, wmsstore, wmslayer, wms_store_layer_body, **kwargs)  # noqa: E501
            return data

    def put_wms_store_store_layer_with_http_info(self, workspace, wmsstore, wmslayer, wms_store_layer_body, **kwargs):  # noqa: E501
        """put_wms_store_store_layer  # noqa: E501

        Edits an existing WMS store layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_store_store_layer_with_http_info(workspace, wmsstore, wmslayer, wms_store_layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace (required)
        :param str wmsstore: Name of the store (required)
        :param str wmslayer: Name of the layer to be edited (required)
        :param WMSStoreLayerInfo wms_store_layer_body: Body of the WMS store layer (required)
        :param list[str] calculate: Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'wmsstore', 'wmslayer', 'wms_store_layer_body', 'calculate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wms_store_store_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_wms_store_store_layer`")  # noqa: E501
        # verify the required parameter 'wmsstore' is set
        if self.api_client.client_side_validation and ('wmsstore' not in params or
                                                       params['wmsstore'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmsstore` when calling `put_wms_store_store_layer`")  # noqa: E501
        # verify the required parameter 'wmslayer' is set
        if self.api_client.client_side_validation and ('wmslayer' not in params or
                                                       params['wmslayer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wmslayer` when calling `put_wms_store_store_layer`")  # noqa: E501
        # verify the required parameter 'wms_store_layer_body' is set
        if self.api_client.client_side_validation and ('wms_store_layer_body' not in params or
                                                       params['wms_store_layer_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wms_store_layer_body` when calling `put_wms_store_store_layer`")  # noqa: E501

        if self.api_client.client_side_validation and ('calculate' in params and
                                            len(params['calculate']) > 2):
            raise ValueError("Invalid value for parameter `calculate` when calling `put_wms_store_store_layer`, number of items must be less than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('calculate' in params and
                                            len(params['calculate']) < 0):
            raise ValueError("Invalid value for parameter `calculate` when calling `put_wms_store_store_layer`, number of items must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'wmsstore' in params:
            path_params['wmsstore'] = params['wmsstore']  # noqa: E501
        if 'wmslayer' in params:
            path_params['wmslayer'] = params['wmslayer']  # noqa: E501

        query_params = []
        if 'calculate' in params:
            query_params.append(('calculate', params['calculate']))  # noqa: E501
            collection_formats['calculate'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wms_store_layer_body' in params:
            body_params = params['wms_store_layer_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_wms_store_store_layers(self, **kwargs):  # noqa: E501
        """put_wms_store_store_layers  # noqa: E501

        Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_store_store_layers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_wms_store_store_layers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_wms_store_store_layers_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_wms_store_store_layers_with_http_info(self, **kwargs):  # noqa: E501
        """put_wms_store_store_layers  # noqa: E501

        Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_wms_store_store_layers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_wms_store_store_layers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
