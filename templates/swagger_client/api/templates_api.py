# coding: utf-8

"""
    GeoServer Template

    Manage templates used to configure output (for example GetFeatureInfo reponse). Templates can be registered for the entire server or workspace. You can also configure a template for use with a store, featureType or coverage.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TemplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def template_coverage_delete(self, workspace, store, coverage, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use by a coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_coverage_delete(workspace, store, coverage, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_coverage_delete_with_http_info(workspace, store, coverage, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_coverage_delete_with_http_info(workspace, store, coverage, template, **kwargs)  # noqa: E501
            return data

    def template_coverage_delete_with_http_info(self, workspace, store, coverage, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use by a coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_coverage_delete_with_http_info(workspace, store, coverage, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_coverage_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_coverage_delete`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_coverage_delete`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `template_coverage_delete`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_coverage_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates/{template}.ftl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_coverage_get(self, workspace, store, coverage, template, **kwargs):  # noqa: E501
        """Return a template for a coverage  # noqa: E501

        Displays a single template registered for use by a coverage (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_coverage_get(workspace, store, coverage, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_coverage_get_with_http_info(workspace, store, coverage, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_coverage_get_with_http_info(workspace, store, coverage, template, **kwargs)  # noqa: E501
            return data

    def template_coverage_get_with_http_info(self, workspace, store, coverage, template, **kwargs):  # noqa: E501
        """Return a template for a coverage  # noqa: E501

        Displays a single template registered for use by a coverage (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_coverage_get_with_http_info(workspace, store, coverage, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_coverage_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_coverage_get`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_coverage_get`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `template_coverage_get`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_coverage_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates/{template}.ftl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_coverage_post(self, workspace, store, coverage, template, **kwargs):  # noqa: E501
        """template_coverage_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_coverage_post(workspace, store, coverage, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_coverage_post_with_http_info(workspace, store, coverage, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_coverage_post_with_http_info(workspace, store, coverage, template, **kwargs)  # noqa: E501
            return data

    def template_coverage_post_with_http_info(self, workspace, store, coverage, template, **kwargs):  # noqa: E501
        """template_coverage_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_coverage_post_with_http_info(workspace, store, coverage, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_coverage_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_coverage_post`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_coverage_post`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `template_coverage_post`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_coverage_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates/{template}.ftl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_coverage_put(self, workspace, store, coverage, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use by a coverage (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_coverage_put(workspace, store, coverage, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_coverage_put_with_http_info(workspace, store, coverage, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_coverage_put_with_http_info(workspace, store, coverage, template, **kwargs)  # noqa: E501
            return data

    def template_coverage_put_with_http_info(self, workspace, store, coverage, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use by a coverage (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_coverage_put_with_http_info(workspace, store, coverage, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_coverage_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_coverage_put`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_coverage_put`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `template_coverage_put`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_coverage_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates/{template}.ftl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_cs_delete(self, workspace, store, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use by all layers generated by a coverage store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_cs_delete(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_cs_delete_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_cs_delete_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_cs_delete_with_http_info(self, workspace, store, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use by all layers generated by a coverage store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_cs_delete_with_http_info(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_cs_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_cs_delete`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_cs_delete`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_cs_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/templates/{template}.ftl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_cs_get(self, workspace, store, template, **kwargs):  # noqa: E501
        """Return a template for a coverage store  # noqa: E501

        Displays a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_cs_get(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_cs_get_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_cs_get_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_cs_get_with_http_info(self, workspace, store, template, **kwargs):  # noqa: E501
        """Return a template for a coverage store  # noqa: E501

        Displays a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_cs_get_with_http_info(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_cs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_cs_get`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_cs_get`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_cs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/templates/{template}.ftl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_cs_post(self, workspace, store, template, **kwargs):  # noqa: E501
        """template_data_store_cs_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_cs_post(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_cs_post_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_cs_post_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_cs_post_with_http_info(self, workspace, store, template, **kwargs):  # noqa: E501
        """template_data_store_cs_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_cs_post_with_http_info(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_cs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_cs_post`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_cs_post`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_cs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/templates/{template}.ftl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_cs_put(self, workspace, store, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_cs_put(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_cs_put_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_cs_put_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_cs_put_with_http_info(self, workspace, store, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_cs_put_with_http_info(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_cs_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_cs_put`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_cs_put`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_cs_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/templates/{template}.ftl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_delete(self, workspace, store, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use by all layers generated by a data store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_delete(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_delete_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_delete_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_delete_with_http_info(self, workspace, store, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use by all layers generated by a data store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_delete_with_http_info(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_delete`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_delete`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/templates/{template}.ftl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_ft_delete(self, workspace, store, type, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use by a feature type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_ft_delete(workspace, store, type, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_ft_delete_with_http_info(workspace, store, type, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_ft_delete_with_http_info(workspace, store, type, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_ft_delete_with_http_info(self, workspace, store, type, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use by a feature type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_ft_delete_with_http_info(workspace, store, type, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'type', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_ft_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_ft_delete`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_ft_delete`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `template_data_store_ft_delete`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_ft_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates/{template}.ftl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_ft_get(self, workspace, store, type, template, **kwargs):  # noqa: E501
        """Return a template for a feature type.  # noqa: E501

        Displays a single template registered for use by a feature type (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_ft_get(workspace, store, type, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_ft_get_with_http_info(workspace, store, type, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_ft_get_with_http_info(workspace, store, type, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_ft_get_with_http_info(self, workspace, store, type, template, **kwargs):  # noqa: E501
        """Return a template for a feature type.  # noqa: E501

        Displays a single template registered for use by a feature type (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_ft_get_with_http_info(workspace, store, type, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'type', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_ft_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_ft_get`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_ft_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `template_data_store_ft_get`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_ft_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates/{template}.ftl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_ft_post(self, workspace, store, type, template, **kwargs):  # noqa: E501
        """template_data_store_ft_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_ft_post(workspace, store, type, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_ft_post_with_http_info(workspace, store, type, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_ft_post_with_http_info(workspace, store, type, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_ft_post_with_http_info(self, workspace, store, type, template, **kwargs):  # noqa: E501
        """template_data_store_ft_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_ft_post_with_http_info(workspace, store, type, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'type', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_ft_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_ft_post`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_ft_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `template_data_store_ft_post`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_ft_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates/{template}.ftl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_ft_put(self, workspace, store, type, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use by a feature type (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_ft_put(workspace, store, type, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_ft_put_with_http_info(workspace, store, type, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_ft_put_with_http_info(workspace, store, type, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_ft_put_with_http_info(self, workspace, store, type, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use by a feature type (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_ft_put_with_http_info(workspace, store, type, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'type', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_ft_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_ft_put`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_ft_put`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `template_data_store_ft_put`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_ft_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates/{template}.ftl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_get(self, workspace, store, template, **kwargs):  # noqa: E501
        """Return a template for a data store  # noqa: E501

        Displays a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_get(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_get_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_get_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_get_with_http_info(self, workspace, store, template, **kwargs):  # noqa: E501
        """Return a template for a data store  # noqa: E501

        Displays a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_get_with_http_info(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_get`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_get`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/templates/{template}.ftl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_post(self, workspace, store, template, **kwargs):  # noqa: E501
        """template_data_store_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_post(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_post_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_post_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_post_with_http_info(self, workspace, store, template, **kwargs):  # noqa: E501
        """template_data_store_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_post_with_http_info(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_post`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_post`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/templates/{template}.ftl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_data_store_put(self, workspace, store, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_put(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_data_store_put_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_data_store_put_with_http_info(workspace, store, template, **kwargs)  # noqa: E501
            return data

    def template_data_store_put_with_http_info(self, workspace, store, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_data_store_put_with_http_info(workspace, store, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_data_store_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_data_store_put`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `template_data_store_put`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_data_store_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/templates/{template}.ftl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_delete(self, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_delete(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_delete_with_http_info(template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_delete_with_http_info(template, **kwargs)  # noqa: E501
            return data

    def template_delete_with_http_info(self, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_delete_with_http_info(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template}.ftl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_get(self, template, **kwargs):  # noqa: E501
        """Return a template  # noqa: E501

        Displays a single template registered for use on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_get(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_get_with_http_info(template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_get_with_http_info(template, **kwargs)  # noqa: E501
            return data

    def template_get_with_http_info(self, template, **kwargs):  # noqa: E501
        """Return a template  # noqa: E501

        Displays a single template registered for use on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_get_with_http_info(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template}.ftl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_post(self, template, **kwargs):  # noqa: E501
        """template_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_post(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_post_with_http_info(template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_post_with_http_info(template, **kwargs)  # noqa: E501
            return data

    def template_post_with_http_info(self, template, **kwargs):  # noqa: E501
        """template_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_post_with_http_info(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template}.ftl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_put(self, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use on the server. Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_put(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_put_with_http_info(template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_put_with_http_info(template, **kwargs)  # noqa: E501
            return data

    def template_put_with_http_info(self, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use on the server. Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_put_with_http_info(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template}.ftl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_workspace_delete(self, workspace, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use in a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_workspace_delete(workspace, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_workspace_delete_with_http_info(workspace, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_workspace_delete_with_http_info(workspace, template, **kwargs)  # noqa: E501
            return data

    def template_workspace_delete_with_http_info(self, workspace, template, **kwargs):  # noqa: E501
        """Delete a template.  # noqa: E501

        Deletes a single template registered for use in a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_workspace_delete_with_http_info(workspace, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_workspace_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_workspace_delete`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_workspace_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/templates/{template}.ftl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_workspace_get(self, workspace, template, **kwargs):  # noqa: E501
        """Return a template for workspace  # noqa: E501

        Displays a single template registered for use in a workspace (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_workspace_get(workspace, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_workspace_get_with_http_info(workspace, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_workspace_get_with_http_info(workspace, template, **kwargs)  # noqa: E501
            return data

    def template_workspace_get_with_http_info(self, workspace, template, **kwargs):  # noqa: E501
        """Return a template for workspace  # noqa: E501

        Displays a single template registered for use in a workspace (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_workspace_get_with_http_info(workspace, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str template: The template name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_workspace_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_workspace_get`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_workspace_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/templates/{template}.ftl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_workspace_post(self, workspace, template, **kwargs):  # noqa: E501
        """template_workspace_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_workspace_post(workspace, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_workspace_post_with_http_info(workspace, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_workspace_post_with_http_info(workspace, template, **kwargs)  # noqa: E501
            return data

    def template_workspace_post_with_http_info(self, workspace, template, **kwargs):  # noqa: E501
        """template_workspace_post  # noqa: E501

        Invalid. Use PUT to insert a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_workspace_post_with_http_info(workspace, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str template: The template name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_workspace_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_workspace_post`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_workspace_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/templates/{template}.ftl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_workspace_put(self, workspace, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use in a workspace (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_workspace_put(workspace, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_workspace_put_with_http_info(workspace, template, **kwargs)  # noqa: E501
        else:
            (data) = self.template_workspace_put_with_http_info(workspace, template, **kwargs)  # noqa: E501
            return data

    def template_workspace_put_with_http_info(self, workspace, template, **kwargs):  # noqa: E501
        """Insert or update a template  # noqa: E501

        Inserts or updates a single template registered for use in a workspace (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_workspace_put_with_http_info(workspace, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str template: The template content to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_workspace_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `template_workspace_put`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in params or
                                                       params['template'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template` when calling `template_workspace_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/templates/{template}.ftl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_coverage_delete(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """templates_coverage_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_coverage_delete(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_coverage_delete_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_coverage_delete_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def templates_coverage_delete_with_http_info(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """templates_coverage_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_coverage_delete_with_http_info(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_coverage_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_coverage_delete`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_coverage_delete`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `templates_coverage_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_coverage_get(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """List of templates for a coverage  # noqa: E501

        Displays a list of templates registered for use by a coverage (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_coverage_get(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_coverage_get_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_coverage_get_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def templates_coverage_get_with_http_info(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """List of templates for a coverage  # noqa: E501

        Displays a list of templates registered for use by a coverage (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_coverage_get_with_http_info(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_coverage_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_coverage_get`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_coverage_get`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `templates_coverage_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_coverage_post(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """templates_coverage_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_coverage_post(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_coverage_post_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_coverage_post_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def templates_coverage_post_with_http_info(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """templates_coverage_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_coverage_post_with_http_info(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_coverage_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_coverage_post`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_coverage_post`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `templates_coverage_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_coverage_put(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """templates_coverage_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_coverage_put(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_coverage_put_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_coverage_put_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def templates_coverage_put_with_http_info(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """templates_coverage_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_coverage_put_with_http_info(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str coverage: The coverage name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_coverage_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_coverage_put`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_coverage_put`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if self.api_client.client_side_validation and ('coverage' not in params or
                                                       params['coverage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coverage` when calling `templates_coverage_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_cs_delete(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_cs_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_cs_delete(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_cs_delete_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_cs_delete_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def templates_data_store_cs_delete_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_cs_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_cs_delete_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_cs_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_cs_delete`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_cs_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_cs_get(self, workspace, store, **kwargs):  # noqa: E501
        """List of templates for a coverage store  # noqa: E501

        Displays a list of templates registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_cs_get(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_cs_get_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_cs_get_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def templates_data_store_cs_get_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """List of templates for a coverage store  # noqa: E501

        Displays a list of templates registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_cs_get_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_cs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_cs_get`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_cs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_cs_post(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_cs_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_cs_post(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_cs_post_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_cs_post_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def templates_data_store_cs_post_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_cs_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_cs_post_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_cs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_cs_post`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_cs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_cs_put(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_cs_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_cs_put(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_cs_put_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_cs_put_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def templates_data_store_cs_put_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_cs_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_cs_put_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_cs_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_cs_put`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_cs_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestore/{store}/templates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_delete(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_delete(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_delete_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_delete_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def templates_data_store_delete_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_delete_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_delete`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_ft_delete(self, workspace, store, type, **kwargs):  # noqa: E501
        """templates_data_store_ft_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_ft_delete(workspace, store, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_ft_delete_with_http_info(workspace, store, type, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_ft_delete_with_http_info(workspace, store, type, **kwargs)  # noqa: E501
            return data

    def templates_data_store_ft_delete_with_http_info(self, workspace, store, type, **kwargs):  # noqa: E501
        """templates_data_store_ft_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_ft_delete_with_http_info(workspace, store, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_ft_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_ft_delete`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_ft_delete`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `templates_data_store_ft_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_ft_get(self, workspace, store, type, **kwargs):  # noqa: E501
        """List of templates for a feature type.  # noqa: E501

        Displays a list of templates registered for use by feature type (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_ft_get(workspace, store, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_ft_get_with_http_info(workspace, store, type, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_ft_get_with_http_info(workspace, store, type, **kwargs)  # noqa: E501
            return data

    def templates_data_store_ft_get_with_http_info(self, workspace, store, type, **kwargs):  # noqa: E501
        """List of templates for a feature type.  # noqa: E501

        Displays a list of templates registered for use by feature type (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_ft_get_with_http_info(workspace, store, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_ft_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_ft_get`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_ft_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `templates_data_store_ft_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_ft_post(self, workspace, store, type, **kwargs):  # noqa: E501
        """templates_data_store_ft_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_ft_post(workspace, store, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_ft_post_with_http_info(workspace, store, type, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_ft_post_with_http_info(workspace, store, type, **kwargs)  # noqa: E501
            return data

    def templates_data_store_ft_post_with_http_info(self, workspace, store, type, **kwargs):  # noqa: E501
        """templates_data_store_ft_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_ft_post_with_http_info(workspace, store, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_ft_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_ft_post`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_ft_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `templates_data_store_ft_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_ft_put(self, workspace, store, type, **kwargs):  # noqa: E501
        """templates_data_store_ft_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_ft_put(workspace, store, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_ft_put_with_http_info(workspace, store, type, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_ft_put_with_http_info(workspace, store, type, **kwargs)  # noqa: E501
            return data

    def templates_data_store_ft_put_with_http_info(self, workspace, store, type, **kwargs):  # noqa: E501
        """templates_data_store_ft_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_ft_put_with_http_info(workspace, store, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :param str type: The feature type name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_ft_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_ft_put`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_ft_put`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `templates_data_store_ft_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_get(self, workspace, store, **kwargs):  # noqa: E501
        """List of templates for a data store  # noqa: E501

        Displays a list of templates registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_get(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_get_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_get_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def templates_data_store_get_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """List of templates for a data store  # noqa: E501

        Displays a list of templates registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_get_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_get`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_post(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_post(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_post_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_post_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def templates_data_store_post_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_post_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_post`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_data_store_put(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_put(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_data_store_put_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_data_store_put_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def templates_data_store_put_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """templates_data_store_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_data_store_put_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :param str store: The store name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_data_store_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_data_store_put`")  # noqa: E501
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in params or
                                                       params['store'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `store` when calling `templates_data_store_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/datastores/{store}/templates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_delete(self, **kwargs):  # noqa: E501
        """templates_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.templates_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def templates_delete_with_http_info(self, **kwargs):  # noqa: E501
        """templates_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_get(self, **kwargs):  # noqa: E501
        """List of templates for the server  # noqa: E501

        Displays a list of templates registered for use on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.templates_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def templates_get_with_http_info(self, **kwargs):  # noqa: E501
        """List of templates for the server  # noqa: E501

        Displays a list of templates registered for use on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_post(self, **kwargs):  # noqa: E501
        """templates_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.templates_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def templates_post_with_http_info(self, **kwargs):  # noqa: E501
        """templates_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_put(self, **kwargs):  # noqa: E501
        """templates_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.templates_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def templates_put_with_http_info(self, **kwargs):  # noqa: E501
        """templates_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/templates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_workspace_delete(self, workspace, **kwargs):  # noqa: E501
        """templates_workspace_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_workspace_delete(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_workspace_delete_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_workspace_delete_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def templates_workspace_delete_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """templates_workspace_delete  # noqa: E501

        Invalid. Delete from `/{template}` to remove a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_workspace_delete_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_workspace_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_workspace_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_workspace_get(self, workspace, **kwargs):  # noqa: E501
        """List of templates for workspace  # noqa: E501

        Displays a list of templates registered for use in a workspace (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_workspace_get(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_workspace_get_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_workspace_get_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def templates_workspace_get_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """List of templates for workspace  # noqa: E501

        Displays a list of templates registered for use in a workspace (example for GetFeatureInfo WMS operation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_workspace_get_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: Templates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_workspace_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_workspace_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Templates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_workspace_post(self, workspace, **kwargs):  # noqa: E501
        """templates_workspace_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_workspace_post(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_workspace_post_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_workspace_post_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def templates_workspace_post_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """templates_workspace_post  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_workspace_post_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_workspace_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_workspace_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def templates_workspace_put(self, workspace, **kwargs):  # noqa: E501
        """templates_workspace_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_workspace_put(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.templates_workspace_put_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.templates_workspace_put_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def templates_workspace_put_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """templates_workspace_put  # noqa: E501

        Invalid. PUT to `/{template}` to edit a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.templates_workspace_put_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The workspace name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method templates_workspace_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `templates_workspace_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/templates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
