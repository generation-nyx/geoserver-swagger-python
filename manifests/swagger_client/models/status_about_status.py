# coding: utf-8

"""
    GeoServer Manifests API

    GeoServer provides a REST service to expose a listing of all loaded JARs and resources on the running instance. This is useful for bug reports and to keep track of extensions deployed into the application.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StatusAboutStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'module': 'str',
        'name': 'str',
        'component': 'str',
        'version': 'str',
        'message': 'str',
        'is_enabled': 'bool',
        'is_available': 'bool'
    }

    attribute_map = {
        'module': 'module',
        'name': 'name',
        'component': 'component',
        'version': 'version',
        'message': 'message',
        'is_enabled': 'isEnabled',
        'is_available': 'isAvailable'
    }

    def __init__(self, module=None, name=None, component=None, version=None, message=None, is_enabled=None, is_available=None, _configuration=None):  # noqa: E501
        """StatusAboutStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._module = None
        self._name = None
        self._component = None
        self._version = None
        self._message = None
        self._is_enabled = None
        self._is_available = None
        self.discriminator = None

        if module is not None:
            self.module = module
        if name is not None:
            self.name = name
        if component is not None:
            self.component = component
        if version is not None:
            self.version = version
        if message is not None:
            self.message = message
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_available is not None:
            self.is_available = is_available

    @property
    def module(self):
        """Gets the module of this StatusAboutStatus.  # noqa: E501

        Module identifier based on artifact bundle. For example, gs-main, gs-oracle.   # noqa: E501

        :return: The module of this StatusAboutStatus.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this StatusAboutStatus.

        Module identifier based on artifact bundle. For example, gs-main, gs-oracle.   # noqa: E501

        :param module: The module of this StatusAboutStatus.  # noqa: E501
        :type: str
        """

        self._module = module

    @property
    def name(self):
        """Gets the name of this StatusAboutStatus.  # noqa: E501

        Human readable name (from GeoServer documentation), or as defined in the extension pom.xml.   # noqa: E501

        :return: The name of this StatusAboutStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatusAboutStatus.

        Human readable name (from GeoServer documentation), or as defined in the extension pom.xml.   # noqa: E501

        :param name: The name of this StatusAboutStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def component(self):
        """Gets the component of this StatusAboutStatus.  # noqa: E501

        Optional component identifier within module. For example, rendering-engine.   # noqa: E501

        :return: The component of this StatusAboutStatus.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this StatusAboutStatus.

        Optional component identifier within module. For example, rendering-engine.   # noqa: E501

        :param component: The component of this StatusAboutStatus.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def version(self):
        """Gets the version of this StatusAboutStatus.  # noqa: E501

        Human readable version, ie. for geotools it would be 15-SNAPSHOT   # noqa: E501

        :return: The version of this StatusAboutStatus.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StatusAboutStatus.

        Human readable version, ie. for geotools it would be 15-SNAPSHOT   # noqa: E501

        :param version: The version of this StatusAboutStatus.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def message(self):
        """Gets the message of this StatusAboutStatus.  # noqa: E501

        Optional status message such as what Java rendering engine is in use, or the library path if the module/driver is unavailable   # noqa: E501

        :return: The message of this StatusAboutStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StatusAboutStatus.

        Optional status message such as what Java rendering engine is in use, or the library path if the module/driver is unavailable   # noqa: E501

        :param message: The message of this StatusAboutStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def is_enabled(self):
        """Gets the is_enabled of this StatusAboutStatus.  # noqa: E501

        Returns whether the module is enabled in the current GeoServer configuration.   # noqa: E501

        :return: The is_enabled of this StatusAboutStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this StatusAboutStatus.

        Returns whether the module is enabled in the current GeoServer configuration.   # noqa: E501

        :param is_enabled: The is_enabled of this StatusAboutStatus.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_available(self):
        """Gets the is_available of this StatusAboutStatus.  # noqa: E501

        Returns whether the module is available to GeoServer   # noqa: E501

        :return: The is_available of this StatusAboutStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this StatusAboutStatus.

        Returns whether the module is available to GeoServer   # noqa: E501

        :param is_available: The is_available of this StatusAboutStatus.  # noqa: E501
        :type: bool
        """

        self._is_available = is_available

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusAboutStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusAboutStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatusAboutStatus):
            return True

        return self.to_dict() != other.to_dict()
