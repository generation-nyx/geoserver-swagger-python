# coding: utf-8

"""
    GeoWebCache Layers

    A layer is a published resource (feature type or coverage).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Layer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'enabled': 'bool',
        'in_memory_cached': 'bool',
        'name': 'str',
        'mime_formats': 'list[str]',
        'grid_subsets': 'LayerGridSubsets',
        'meta_width_height': 'int',
        'expire_cache': 'int',
        'expire_clients': 'int',
        'parameter_filters': 'object',
        'gutter': 'int'
    }

    attribute_map = {
        'id': 'id',
        'enabled': 'enabled',
        'in_memory_cached': 'inMemoryCached',
        'name': 'name',
        'mime_formats': 'mimeFormats',
        'grid_subsets': 'gridSubsets',
        'meta_width_height': 'metaWidthHeight',
        'expire_cache': 'expireCache',
        'expire_clients': 'expireClients',
        'parameter_filters': 'parameterFilters',
        'gutter': 'gutter'
    }

    def __init__(self, id=None, enabled=None, in_memory_cached=None, name=None, mime_formats=None, grid_subsets=None, meta_width_height=None, expire_cache=None, expire_clients=None, parameter_filters=None, gutter=None, _configuration=None):  # noqa: E501
        """Layer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._enabled = None
        self._in_memory_cached = None
        self._name = None
        self._mime_formats = None
        self._grid_subsets = None
        self._meta_width_height = None
        self._expire_cache = None
        self._expire_clients = None
        self._parameter_filters = None
        self._gutter = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if enabled is not None:
            self.enabled = enabled
        if in_memory_cached is not None:
            self.in_memory_cached = in_memory_cached
        if name is not None:
            self.name = name
        if mime_formats is not None:
            self.mime_formats = mime_formats
        if grid_subsets is not None:
            self.grid_subsets = grid_subsets
        if meta_width_height is not None:
            self.meta_width_height = meta_width_height
        if expire_cache is not None:
            self.expire_cache = expire_cache
        if expire_clients is not None:
            self.expire_clients = expire_clients
        if parameter_filters is not None:
            self.parameter_filters = parameter_filters
        if gutter is not None:
            self.gutter = gutter

    @property
    def id(self):
        """Gets the id of this Layer.  # noqa: E501

        Unique ID of the layer.  # noqa: E501

        :return: The id of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Layer.

        Unique ID of the layer.  # noqa: E501

        :param id: The id of this Layer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def enabled(self):
        """Gets the enabled of this Layer.  # noqa: E501

        Indicates whether tile caching is enabled for this layer.  # noqa: E501

        :return: The enabled of this Layer.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Layer.

        Indicates whether tile caching is enabled for this layer.  # noqa: E501

        :param enabled: The enabled of this Layer.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def in_memory_cached(self):
        """Gets the in_memory_cached of this Layer.  # noqa: E501

        Determines if the layer is cached.  # noqa: E501

        :return: The in_memory_cached of this Layer.  # noqa: E501
        :rtype: bool
        """
        return self._in_memory_cached

    @in_memory_cached.setter
    def in_memory_cached(self, in_memory_cached):
        """Sets the in_memory_cached of this Layer.

        Determines if the layer is cached.  # noqa: E501

        :param in_memory_cached: The in_memory_cached of this Layer.  # noqa: E501
        :type: bool
        """

        self._in_memory_cached = in_memory_cached

    @property
    def name(self):
        """Gets the name of this Layer.  # noqa: E501

        The name of the layer.  # noqa: E501

        :return: The name of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Layer.

        The name of the layer.  # noqa: E501

        :param name: The name of this Layer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mime_formats(self):
        """Gets the mime_formats of this Layer.  # noqa: E501

        List of formats to be supported (ie. img/jpeg...).  # noqa: E501

        :return: The mime_formats of this Layer.  # noqa: E501
        :rtype: list[str]
        """
        return self._mime_formats

    @mime_formats.setter
    def mime_formats(self, mime_formats):
        """Sets the mime_formats of this Layer.

        List of formats to be supported (ie. img/jpeg...).  # noqa: E501

        :param mime_formats: The mime_formats of this Layer.  # noqa: E501
        :type: list[str]
        """

        self._mime_formats = mime_formats

    @property
    def grid_subsets(self):
        """Gets the grid_subsets of this Layer.  # noqa: E501


        :return: The grid_subsets of this Layer.  # noqa: E501
        :rtype: LayerGridSubsets
        """
        return self._grid_subsets

    @grid_subsets.setter
    def grid_subsets(self, grid_subsets):
        """Sets the grid_subsets of this Layer.


        :param grid_subsets: The grid_subsets of this Layer.  # noqa: E501
        :type: LayerGridSubsets
        """

        self._grid_subsets = grid_subsets

    @property
    def meta_width_height(self):
        """Gets the meta_width_height of this Layer.  # noqa: E501

        The metatiling factors used for this layer.  # noqa: E501

        :return: The meta_width_height of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._meta_width_height

    @meta_width_height.setter
    def meta_width_height(self, meta_width_height):
        """Sets the meta_width_height of this Layer.

        The metatiling factors used for this layer.  # noqa: E501

        :param meta_width_height: The meta_width_height of this Layer.  # noqa: E501
        :type: int
        """

        self._meta_width_height = meta_width_height

    @property
    def expire_cache(self):
        """Gets the expire_cache of this Layer.  # noqa: E501

        How old the tile may be before it is refetched from the backend.  # noqa: E501

        :return: The expire_cache of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._expire_cache

    @expire_cache.setter
    def expire_cache(self, expire_cache):
        """Sets the expire_cache of this Layer.

        How old the tile may be before it is refetched from the backend.  # noqa: E501

        :param expire_cache: The expire_cache of this Layer.  # noqa: E501
        :type: int
        """

        self._expire_cache = expire_cache

    @property
    def expire_clients(self):
        """Gets the expire_clients of this Layer.  # noqa: E501

        The HTTP expiration header sent to client.  # noqa: E501

        :return: The expire_clients of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._expire_clients

    @expire_clients.setter
    def expire_clients(self, expire_clients):
        """Sets the expire_clients of this Layer.

        The HTTP expiration header sent to client.  # noqa: E501

        :param expire_clients: The expire_clients of this Layer.  # noqa: E501
        :type: int
        """

        self._expire_clients = expire_clients

    @property
    def parameter_filters(self):
        """Gets the parameter_filters of this Layer.  # noqa: E501

        A list of parameter filters, meaning parameters the client may specify that GWC will forward to the backend.  # noqa: E501

        :return: The parameter_filters of this Layer.  # noqa: E501
        :rtype: object
        """
        return self._parameter_filters

    @parameter_filters.setter
    def parameter_filters(self, parameter_filters):
        """Sets the parameter_filters of this Layer.

        A list of parameter filters, meaning parameters the client may specify that GWC will forward to the backend.  # noqa: E501

        :param parameter_filters: The parameter_filters of this Layer.  # noqa: E501
        :type: object
        """

        self._parameter_filters = parameter_filters

    @property
    def gutter(self):
        """Gets the gutter of this Layer.  # noqa: E501

        The gutter is a buffer around the image that is sliced away when saving the tiles to disk.  # noqa: E501

        :return: The gutter of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._gutter

    @gutter.setter
    def gutter(self, gutter):
        """Sets the gutter of this Layer.

        The gutter is a buffer around the image that is sliced away when saving the tiles to disk.  # noqa: E501

        :param gutter: The gutter of this Layer.  # noqa: E501
        :type: int
        """

        self._gutter = gutter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Layer):
            return True

        return self.to_dict() != other.to_dict()
