# coding: utf-8

"""
    GeoWebCache Layers

    A layer is a published resource (feature type or coverage).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GwcLayersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def layers_get(self, **kwargs):  # noqa: E501
        """Get a list of cached layers  # noqa: E501

        Displays a list of all cached layers on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def layers_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of cached layers  # noqa: E501

        Displays a list of all cached layers on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_delete(self, layer_name, **kwargs):  # noqa: E501
        """Delete cached layer  # noqa: E501

        Deletes a cached layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_delete(layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_delete_with_http_info(layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_delete_with_http_info(layer_name, **kwargs)  # noqa: E501
            return data

    def layers_name_delete_with_http_info(self, layer_name, **kwargs):  # noqa: E501
        """Delete cached layer  # noqa: E501

        Deletes a cached layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_delete_with_http_info(layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layerName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_get(self, layer_name, **kwargs):  # noqa: E501
        """Retrieve a cached layer  # noqa: E501

        Retrieves a single cached layer definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_get(layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to retrieve. (required)
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_get_with_http_info(layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_get_with_http_info(layer_name, **kwargs)  # noqa: E501
            return data

    def layers_name_get_with_http_info(self, layer_name, **kwargs):  # noqa: E501
        """Retrieve a cached layer  # noqa: E501

        Retrieves a single cached layer definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_get_with_http_info(layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to retrieve. (required)
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layerName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_post(self, layer_name, layer_body, **kwargs):  # noqa: E501
        """Modify a cached layer (Deprecated).  # noqa: E501

        Modifies an existing cached layer on the server. Deprecated - use PUT instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_post(layer_name, layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to modify. (required)
        :param Layer layer_body: The updated layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_post_with_http_info(layer_name, layer_body, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_post_with_http_info(layer_name, layer_body, **kwargs)  # noqa: E501
            return data

    def layers_name_post_with_http_info(self, layer_name, layer_body, **kwargs):  # noqa: E501
        """Modify a cached layer (Deprecated).  # noqa: E501

        Modifies an existing cached layer on the server. Deprecated - use PUT instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_post_with_http_info(layer_name, layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to modify. (required)
        :param Layer layer_body: The updated layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_name', 'layer_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_post`")  # noqa: E501
        # verify the required parameter 'layer_body' is set
        if self.api_client.client_side_validation and ('layer_body' not in params or
                                                       params['layer_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_body` when calling `layers_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layer_body' in params:
            body_params = params['layer_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layerName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layers_name_put(self, layer_name, layer_body, **kwargs):  # noqa: E501
        """Create or update a cached layer.  # noqa: E501

        Creates a new cached layer on the server, or modifies an existing cached layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_put(layer_name, layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to add. (required)
        :param Layer layer_body: The new layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layers_name_put_with_http_info(layer_name, layer_body, **kwargs)  # noqa: E501
        else:
            (data) = self.layers_name_put_with_http_info(layer_name, layer_body, **kwargs)  # noqa: E501
            return data

    def layers_name_put_with_http_info(self, layer_name, layer_body, **kwargs):  # noqa: E501
        """Create or update a cached layer.  # noqa: E501

        Creates a new cached layer on the server, or modifies an existing cached layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layers_name_put_with_http_info(layer_name, layer_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_name: The name of the layer to add. (required)
        :param Layer layer_body: The new layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_name', 'layer_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layers_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_name' is set
        if self.api_client.client_side_validation and ('layer_name' not in params or
                                                       params['layer_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_name` when calling `layers_name_put`")  # noqa: E501
        # verify the required parameter 'layer_body' is set
        if self.api_client.client_side_validation and ('layer_body' not in params or
                                                       params['layer_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layer_body` when calling `layers_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layer_body' in params:
            body_params = params['layer_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layerName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
