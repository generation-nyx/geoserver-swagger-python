# coding: utf-8

"""
    Users and Groups

    Organisation of security users and groups  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserGroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def group_default_delete(self, group, **kwargs):  # noqa: E501
        """Delete a group  # noqa: E501

        Delete a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_default_delete(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_default_delete_with_http_info(group, **kwargs)  # noqa: E501
        else:
            (data) = self.group_default_delete_with_http_info(group, **kwargs)  # noqa: E501
            return data

    def group_default_delete_with_http_info(self, group, **kwargs):  # noqa: E501
        """Delete a group  # noqa: E501

        Delete a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_default_delete_with_http_info(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_default_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `group_default_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/group/{group}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_default_post(self, group, **kwargs):  # noqa: E501
        """Add a group  # noqa: E501

        Add a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_default_post(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_default_post_with_http_info(group, **kwargs)  # noqa: E501
        else:
            (data) = self.group_default_post_with_http_info(group, **kwargs)  # noqa: E501
            return data

    def group_default_post_with_http_info(self, group, **kwargs):  # noqa: E501
        """Add a group  # noqa: E501

        Add a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_default_post_with_http_info(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_default_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `group_default_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/group/{group}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_default_user_get(self, group, **kwargs):  # noqa: E501
        """Query all users for a group  # noqa: E501

        Query all users for a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_default_user_get(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: the name of the group (required)
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_default_user_get_with_http_info(group, **kwargs)  # noqa: E501
        else:
            (data) = self.group_default_user_get_with_http_info(group, **kwargs)  # noqa: E501
            return data

    def group_default_user_get_with_http_info(self, group, **kwargs):  # noqa: E501
        """Query all users for a group  # noqa: E501

        Query all users for a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_default_user_get_with_http_info(group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: the name of the group (required)
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_default_user_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `group_default_user_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/group/{group}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Users',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_delete(self, service_name, group, **kwargs):  # noqa: E501
        """Delete a group  # noqa: E501

        Delete a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_delete(service_name, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_delete_with_http_info(service_name, group, **kwargs)  # noqa: E501
        else:
            (data) = self.group_delete_with_http_info(service_name, group, **kwargs)  # noqa: E501
            return data

    def group_delete_with_http_info(self, service_name, group, **kwargs):  # noqa: E501
        """Delete a group  # noqa: E501

        Delete a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_delete_with_http_info(service_name, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `group_delete`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/group/{group}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_post(self, service_name, group, **kwargs):  # noqa: E501
        """Add a group  # noqa: E501

        Add a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_post(service_name, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_post_with_http_info(service_name, group, **kwargs)  # noqa: E501
        else:
            (data) = self.group_post_with_http_info(service_name, group, **kwargs)  # noqa: E501
            return data

    def group_post_with_http_info(self, service_name, group, **kwargs):  # noqa: E501
        """Add a group  # noqa: E501

        Add a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_post_with_http_info(service_name, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `group_post`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `group_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/group/{group}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_user_get(self, service_name, group, **kwargs):  # noqa: E501
        """Query all users for a group  # noqa: E501

        Query all users for a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_user_get(service_name, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str group: the name of the group (required)
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_user_get_with_http_info(service_name, group, **kwargs)  # noqa: E501
        else:
            (data) = self.group_user_get_with_http_info(service_name, group, **kwargs)  # noqa: E501
            return data

    def group_user_get_with_http_info(self, service_name, group, **kwargs):  # noqa: E501
        """Query all users for a group  # noqa: E501

        Query all users for a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_user_get_with_http_info(service_name, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str group: the name of the group (required)
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_user_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `group_user_get`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `group_user_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/group/{group}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Users',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_default_get(self, **kwargs):  # noqa: E501
        """Query all groups  # noqa: E501

        Query all groups in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_default_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_default_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.groups_default_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def groups_default_get_with_http_info(self, **kwargs):  # noqa: E501
        """Query all groups  # noqa: E501

        Query all groups in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_default_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_default_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/groups/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_get(self, service_name, **kwargs):  # noqa: E501
        """Query all groups  # noqa: E501

        Query all groups in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_get(service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the group group service (required)
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_get_with_http_info(service_name, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_get_with_http_info(service_name, **kwargs)  # noqa: E501
            return data

    def groups_get_with_http_info(self, service_name, **kwargs):  # noqa: E501
        """Query all groups  # noqa: E501

        Query all groups in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_get_with_http_info(service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the group group service (required)
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/groups/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_default_delete(self, user, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

        Delete a user in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_default_delete(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_default_delete_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_default_delete_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def user_default_delete_with_http_info(self, user, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

        Delete a user in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_default_delete_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_default_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_default_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/user/{user}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_default_group_get(self, user, **kwargs):  # noqa: E501
        """Query all groups for a user  # noqa: E501

        Query all groups for a user in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_default_group_get(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_default_group_get_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_default_group_get_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def user_default_group_get_with_http_info(self, user, **kwargs):  # noqa: E501
        """Query all groups for a user  # noqa: E501

        Query all groups for a user in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_default_group_get_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_default_group_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_default_group_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/user/{user}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_default_post(self, user, user_default_post_body, **kwargs):  # noqa: E501
        """Modify a user  # noqa: E501

        Modify a user in the default user/group service, unspecified fields remain unchanged.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_default_post(user, user_default_post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :param User user_default_post_body: the new user's details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_default_post_with_http_info(user, user_default_post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_default_post_with_http_info(user, user_default_post_body, **kwargs)  # noqa: E501
            return data

    def user_default_post_with_http_info(self, user, user_default_post_body, **kwargs):  # noqa: E501
        """Modify a user  # noqa: E501

        Modify a user in the default user/group service, unspecified fields remain unchanged.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_default_post_with_http_info(user, user_default_post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :param User user_default_post_body: the new user's details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'user_default_post_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_default_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_default_post`")  # noqa: E501
        # verify the required parameter 'user_default_post_body' is set
        if self.api_client.client_side_validation and ('user_default_post_body' not in params or
                                                       params['user_default_post_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_default_post_body` when calling `user_default_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_default_post_body' in params:
            body_params = params['user_default_post_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/user/{user}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_delete(self, service_name, user, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

        Delete a user in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete(service_name, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_delete_with_http_info(service_name, user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_delete_with_http_info(service_name, user, **kwargs)  # noqa: E501
            return data

    def user_delete_with_http_info(self, service_name, user, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

        Delete a user in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete_with_http_info(service_name, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `user_delete`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/user/{user}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_default_delete(self, user, group, **kwargs):  # noqa: E501
        """Unassociate a user from a group  # noqa: E501

        Unassociate a user from a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_default_delete(user, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_group_default_delete_with_http_info(user, group, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_default_delete_with_http_info(user, group, **kwargs)  # noqa: E501
            return data

    def user_group_default_delete_with_http_info(self, user, group, **kwargs):  # noqa: E501
        """Unassociate a user from a group  # noqa: E501

        Unassociate a user from a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_default_delete_with_http_info(user, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_default_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_group_default_delete`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `user_group_default_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/user/{user}/group/{group}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_default_post(self, user, group, **kwargs):  # noqa: E501
        """Associate a user with a group  # noqa: E501

        Associate a user with a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_default_post(user, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_group_default_post_with_http_info(user, group, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_default_post_with_http_info(user, group, **kwargs)  # noqa: E501
            return data

    def user_group_default_post_with_http_info(self, user, group, **kwargs):  # noqa: E501
        """Associate a user with a group  # noqa: E501

        Associate a user with a group in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_default_post_with_http_info(user, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: the name of the user (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_default_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_group_default_post`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `user_group_default_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/user/{user}/group/{group}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_delete(self, service_name, user, group, **kwargs):  # noqa: E501
        """Unassociate a user from a group  # noqa: E501

        Unassociate a user from a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_delete(service_name, user, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_group_delete_with_http_info(service_name, user, group, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_delete_with_http_info(service_name, user, group, **kwargs)  # noqa: E501
            return data

    def user_group_delete_with_http_info(self, service_name, user, group, **kwargs):  # noqa: E501
        """Unassociate a user from a group  # noqa: E501

        Unassociate a user from a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_delete_with_http_info(service_name, user, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'user', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `user_group_delete`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_group_delete`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `user_group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/user/{user}/group/{group}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_get(self, service_name, user, **kwargs):  # noqa: E501
        """Query all groups for a user  # noqa: E501

        Query all groups for a user in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_get(service_name, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_group_get_with_http_info(service_name, user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_get_with_http_info(service_name, user, **kwargs)  # noqa: E501
            return data

    def user_group_get_with_http_info(self, service_name, user, **kwargs):  # noqa: E501
        """Query all groups for a user  # noqa: E501

        Query all groups for a user in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_get_with_http_info(service_name, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :return: Groups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `user_group_get`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_group_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/user/{user}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Groups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_post(self, service_name, user, group, **kwargs):  # noqa: E501
        """Associate a user with a group  # noqa: E501

        Associate a user with a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_post(service_name, user, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_group_post_with_http_info(service_name, user, group, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_post_with_http_info(service_name, user, group, **kwargs)  # noqa: E501
            return data

    def user_group_post_with_http_info(self, service_name, user, group, **kwargs):  # noqa: E501
        """Associate a user with a group  # noqa: E501

        Associate a user with a group in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_group_post_with_http_info(service_name, user, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :param str group: the name of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'user', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `user_group_post`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_group_post`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `user_group_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/user/{user}/group/{group}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_post(self, service_name, user, user_post_body, **kwargs):  # noqa: E501
        """Modify a user  # noqa: E501

        Modify a user in a particular user/group service, unspecified fields remain unchanged.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_post(service_name, user, user_post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :param User user_post_body: the new user's details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_post_with_http_info(service_name, user, user_post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_post_with_http_info(service_name, user, user_post_body, **kwargs)  # noqa: E501
            return data

    def user_post_with_http_info(self, service_name, user, user_post_body, **kwargs):  # noqa: E501
        """Modify a user  # noqa: E501

        Modify a user in a particular user/group service, unspecified fields remain unchanged.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_post_with_http_info(service_name, user, user_post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param str user: the name of the user (required)
        :param User user_post_body: the new user's details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'user', 'user_post_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `user_post`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_post`")  # noqa: E501
        # verify the required parameter 'user_post_body' is set
        if self.api_client.client_side_validation and ('user_post_body' not in params or
                                                       params['user_post_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_post_body` when calling `user_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_post_body' in params:
            body_params = params['user_post_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/user/{user}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_default_get(self, **kwargs):  # noqa: E501
        """Query all users  # noqa: E501

        Query all users in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_default_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_default_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_default_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_default_get_with_http_info(self, **kwargs):  # noqa: E501
        """Query all users  # noqa: E501

        Query all users in the default user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_default_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_default_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Users',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_default_post(self, users_default_post_body, **kwargs):  # noqa: E501
        """Add a new user  # noqa: E501

        Add a new user to the default user/group service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_default_post(users_default_post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param User users_default_post_body: the new user's details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_default_post_with_http_info(users_default_post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_default_post_with_http_info(users_default_post_body, **kwargs)  # noqa: E501
            return data

    def users_default_post_with_http_info(self, users_default_post_body, **kwargs):  # noqa: E501
        """Add a new user  # noqa: E501

        Add a new user to the default user/group service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_default_post_with_http_info(users_default_post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param User users_default_post_body: the new user's details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['users_default_post_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_default_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'users_default_post_body' is set
        if self.api_client.client_side_validation and ('users_default_post_body' not in params or
                                                       params['users_default_post_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `users_default_post_body` when calling `users_default_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'users_default_post_body' in params:
            body_params = params['users_default_post_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/users/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_get(self, service_name, **kwargs):  # noqa: E501
        """Query all users  # noqa: E501

        Query all users in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get(service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_get_with_http_info(service_name, **kwargs)  # noqa: E501
        else:
            (data) = self.users_get_with_http_info(service_name, **kwargs)  # noqa: E501
            return data

    def users_get_with_http_info(self, service_name, **kwargs):  # noqa: E501
        """Query all users  # noqa: E501

        Query all users in a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_with_http_info(service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `users_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Users',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_post(self, service_name, users_post_body, **kwargs):  # noqa: E501
        """Add a new user  # noqa: E501

        Add a new user to a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_post(service_name, users_post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param User users_post_body: the new user's details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_post_with_http_info(service_name, users_post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_post_with_http_info(service_name, users_post_body, **kwargs)  # noqa: E501
            return data

    def users_post_with_http_info(self, service_name, users_post_body, **kwargs):  # noqa: E501
        """Add a new user  # noqa: E501

        Add a new user to a particular user/group service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_post_with_http_info(service_name, users_post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: the name of the user/group service (required)
        :param User users_post_body: the new user's details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'users_post_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if self.api_client.client_side_validation and ('service_name' not in params or
                                                       params['service_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_name` when calling `users_post`")  # noqa: E501
        # verify the required parameter 'users_post_body' is set
        if self.api_client.client_side_validation and ('users_post_body' not in params or
                                                       params['users_post_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `users_post_body` when calling `users_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'users_post_body' in params:
            body_params = params['users_post_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usergroup/service/{serviceName}/users/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
