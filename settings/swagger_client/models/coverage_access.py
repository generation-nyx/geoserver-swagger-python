# coding: utf-8

"""
    GeoServer Settings

    The Settings area shows global configuration for the server  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CoverageAccess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_pool_size': 'float',
        'core_pool_size': 'float',
        'keep_alilve_time': 'float',
        'queue_type': 'str',
        'image_io_cache_threshold': 'float'
    }

    attribute_map = {
        'max_pool_size': 'maxPoolSize',
        'core_pool_size': 'corePoolSize',
        'keep_alilve_time': 'keepAlilveTime',
        'queue_type': 'queueType',
        'image_io_cache_threshold': 'imageIOCacheThreshold'
    }

    def __init__(self, max_pool_size=None, core_pool_size=None, keep_alilve_time=None, queue_type=None, image_io_cache_threshold=None, _configuration=None):  # noqa: E501
        """CoverageAccess - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._max_pool_size = None
        self._core_pool_size = None
        self._keep_alilve_time = None
        self._queue_type = None
        self._image_io_cache_threshold = None
        self.discriminator = None

        if max_pool_size is not None:
            self.max_pool_size = max_pool_size
        if core_pool_size is not None:
            self.core_pool_size = core_pool_size
        if keep_alilve_time is not None:
            self.keep_alilve_time = keep_alilve_time
        if queue_type is not None:
            self.queue_type = queue_type
        if image_io_cache_threshold is not None:
            self.image_io_cache_threshold = image_io_cache_threshold

    @property
    def max_pool_size(self):
        """Gets the max_pool_size of this CoverageAccess.  # noqa: E501

        Maximum number of threads that the Java ThreadPoolExecutor will create  # noqa: E501

        :return: The max_pool_size of this CoverageAccess.  # noqa: E501
        :rtype: float
        """
        return self._max_pool_size

    @max_pool_size.setter
    def max_pool_size(self, max_pool_size):
        """Sets the max_pool_size of this CoverageAccess.

        Maximum number of threads that the Java ThreadPoolExecutor will create  # noqa: E501

        :param max_pool_size: The max_pool_size of this CoverageAccess.  # noqa: E501
        :type: float
        """

        self._max_pool_size = max_pool_size

    @property
    def core_pool_size(self):
        """Gets the core_pool_size of this CoverageAccess.  # noqa: E501

        Number of threads that the Java ThreadPoolExecutor will create  # noqa: E501

        :return: The core_pool_size of this CoverageAccess.  # noqa: E501
        :rtype: float
        """
        return self._core_pool_size

    @core_pool_size.setter
    def core_pool_size(self, core_pool_size):
        """Sets the core_pool_size of this CoverageAccess.

        Number of threads that the Java ThreadPoolExecutor will create  # noqa: E501

        :param core_pool_size: The core_pool_size of this CoverageAccess.  # noqa: E501
        :type: float
        """

        self._core_pool_size = core_pool_size

    @property
    def keep_alilve_time(self):
        """Gets the keep_alilve_time of this CoverageAccess.  # noqa: E501

        Timeout for threads to be terminated if they are idle and more than the core pool number exist.  # noqa: E501

        :return: The keep_alilve_time of this CoverageAccess.  # noqa: E501
        :rtype: float
        """
        return self._keep_alilve_time

    @keep_alilve_time.setter
    def keep_alilve_time(self, keep_alilve_time):
        """Sets the keep_alilve_time of this CoverageAccess.

        Timeout for threads to be terminated if they are idle and more than the core pool number exist.  # noqa: E501

        :param keep_alilve_time: The keep_alilve_time of this CoverageAccess.  # noqa: E501
        :type: float
        """

        self._keep_alilve_time = keep_alilve_time

    @property
    def queue_type(self):
        """Gets the queue_type of this CoverageAccess.  # noqa: E501

        Type of Blocking Queue to managed submitted tasks. Can be either UNBOUNDED or DIRECT.  # noqa: E501

        :return: The queue_type of this CoverageAccess.  # noqa: E501
        :rtype: str
        """
        return self._queue_type

    @queue_type.setter
    def queue_type(self, queue_type):
        """Sets the queue_type of this CoverageAccess.

        Type of Blocking Queue to managed submitted tasks. Can be either UNBOUNDED or DIRECT.  # noqa: E501

        :param queue_type: The queue_type of this CoverageAccess.  # noqa: E501
        :type: str
        """

        self._queue_type = queue_type

    @property
    def image_io_cache_threshold(self):
        """Gets the image_io_cache_threshold of this CoverageAccess.  # noqa: E501

        Threshold size to choose between file-based cache and memory-based cach  # noqa: E501

        :return: The image_io_cache_threshold of this CoverageAccess.  # noqa: E501
        :rtype: float
        """
        return self._image_io_cache_threshold

    @image_io_cache_threshold.setter
    def image_io_cache_threshold(self, image_io_cache_threshold):
        """Sets the image_io_cache_threshold of this CoverageAccess.

        Threshold size to choose between file-based cache and memory-based cach  # noqa: E501

        :param image_io_cache_threshold: The image_io_cache_threshold of this CoverageAccess.  # noqa: E501
        :type: float
        """

        self._image_io_cache_threshold = image_io_cache_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoverageAccess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoverageAccess):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoverageAccess):
            return True

        return self.to_dict() != other.to_dict()
