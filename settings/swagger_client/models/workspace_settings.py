# coding: utf-8

"""
    GeoServer Settings

    The Settings area shows global configuration for the server  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WorkspaceSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact': 'WorkspaceContact',
        'charset': 'str',
        'num_decimals': 'float',
        'online_resource': 'str',
        'verbose': 'bool',
        'verbose_exceptions': 'bool',
        'local_workspace_includes_prefix': 'bool'
    }

    attribute_map = {
        'contact': 'contact',
        'charset': 'charset',
        'num_decimals': 'numDecimals',
        'online_resource': 'onlineResource',
        'verbose': 'verbose',
        'verbose_exceptions': 'verboseExceptions',
        'local_workspace_includes_prefix': 'localWorkspaceIncludesPrefix'
    }

    def __init__(self, contact=None, charset=None, num_decimals=None, online_resource=None, verbose=None, verbose_exceptions=None, local_workspace_includes_prefix=None, _configuration=None):  # noqa: E501
        """WorkspaceSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contact = None
        self._charset = None
        self._num_decimals = None
        self._online_resource = None
        self._verbose = None
        self._verbose_exceptions = None
        self._local_workspace_includes_prefix = None
        self.discriminator = None

        if contact is not None:
            self.contact = contact
        if charset is not None:
            self.charset = charset
        if num_decimals is not None:
            self.num_decimals = num_decimals
        if online_resource is not None:
            self.online_resource = online_resource
        if verbose is not None:
            self.verbose = verbose
        if verbose_exceptions is not None:
            self.verbose_exceptions = verbose_exceptions
        if local_workspace_includes_prefix is not None:
            self.local_workspace_includes_prefix = local_workspace_includes_prefix

    @property
    def contact(self):
        """Gets the contact of this WorkspaceSettings.  # noqa: E501


        :return: The contact of this WorkspaceSettings.  # noqa: E501
        :rtype: WorkspaceContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this WorkspaceSettings.


        :param contact: The contact of this WorkspaceSettings.  # noqa: E501
        :type: WorkspaceContact
        """

        self._contact = contact

    @property
    def charset(self):
        """Gets the charset of this WorkspaceSettings.  # noqa: E501

        Character set to use for encoding (such as UTF-8)  # noqa: E501

        :return: The charset of this WorkspaceSettings.  # noqa: E501
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this WorkspaceSettings.

        Character set to use for encoding (such as UTF-8)  # noqa: E501

        :param charset: The charset of this WorkspaceSettings.  # noqa: E501
        :type: str
        """

        self._charset = charset

    @property
    def num_decimals(self):
        """Gets the num_decimals of this WorkspaceSettings.  # noqa: E501

        Maximum nuber of decimal places to use (GML and GeoJSON output)  # noqa: E501

        :return: The num_decimals of this WorkspaceSettings.  # noqa: E501
        :rtype: float
        """
        return self._num_decimals

    @num_decimals.setter
    def num_decimals(self, num_decimals):
        """Sets the num_decimals of this WorkspaceSettings.

        Maximum nuber of decimal places to use (GML and GeoJSON output)  # noqa: E501

        :param num_decimals: The num_decimals of this WorkspaceSettings.  # noqa: E501
        :type: float
        """

        self._num_decimals = num_decimals

    @property
    def online_resource(self):
        """Gets the online_resource of this WorkspaceSettings.  # noqa: E501

        Server admin URL  # noqa: E501

        :return: The online_resource of this WorkspaceSettings.  # noqa: E501
        :rtype: str
        """
        return self._online_resource

    @online_resource.setter
    def online_resource(self, online_resource):
        """Sets the online_resource of this WorkspaceSettings.

        Server admin URL  # noqa: E501

        :param online_resource: The online_resource of this WorkspaceSettings.  # noqa: E501
        :type: str
        """

        self._online_resource = online_resource

    @property
    def verbose(self):
        """Gets the verbose of this WorkspaceSettings.  # noqa: E501

        Return XML with newlines and indents  # noqa: E501

        :return: The verbose of this WorkspaceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose):
        """Sets the verbose of this WorkspaceSettings.

        Return XML with newlines and indents  # noqa: E501

        :param verbose: The verbose of this WorkspaceSettings.  # noqa: E501
        :type: bool
        """

        self._verbose = verbose

    @property
    def verbose_exceptions(self):
        """Gets the verbose_exceptions of this WorkspaceSettings.  # noqa: E501

        Return service exceptions with full Java stack traces  # noqa: E501

        :return: The verbose_exceptions of this WorkspaceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._verbose_exceptions

    @verbose_exceptions.setter
    def verbose_exceptions(self, verbose_exceptions):
        """Sets the verbose_exceptions of this WorkspaceSettings.

        Return service exceptions with full Java stack traces  # noqa: E501

        :param verbose_exceptions: The verbose_exceptions of this WorkspaceSettings.  # noqa: E501
        :type: bool
        """

        self._verbose_exceptions = verbose_exceptions

    @property
    def local_workspace_includes_prefix(self):
        """Gets the local_workspace_includes_prefix of this WorkspaceSettings.  # noqa: E501

        Show namespace prefix when using virtual service  # noqa: E501

        :return: The local_workspace_includes_prefix of this WorkspaceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._local_workspace_includes_prefix

    @local_workspace_includes_prefix.setter
    def local_workspace_includes_prefix(self, local_workspace_includes_prefix):
        """Sets the local_workspace_includes_prefix of this WorkspaceSettings.

        Show namespace prefix when using virtual service  # noqa: E501

        :param local_workspace_includes_prefix: The local_workspace_includes_prefix of this WorkspaceSettings.  # noqa: E501
        :type: bool
        """

        self._local_workspace_includes_prefix = local_workspace_includes_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkspaceSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceSettings):
            return True

        return self.to_dict() != other.to_dict()
