# coding: utf-8

"""
    GeoServer Settings

    The Settings area shows global configuration for the server  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ModelGlobal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'settings': 'Settings',
        'jai': 'JAI',
        'coverage_access': 'CoverageAccess',
        'update_sequence': 'float',
        'feature_type_cache_size': 'float',
        'global_services': 'bool',
        'xml_post_request_log_buffer_size': 'float'
    }

    attribute_map = {
        'settings': 'settings',
        'jai': 'jai',
        'coverage_access': 'coverageAccess',
        'update_sequence': 'updateSequence',
        'feature_type_cache_size': 'featureTypeCacheSize',
        'global_services': 'globalServices',
        'xml_post_request_log_buffer_size': 'xmlPostRequestLogBufferSize'
    }

    def __init__(self, settings=None, jai=None, coverage_access=None, update_sequence=None, feature_type_cache_size=None, global_services=None, xml_post_request_log_buffer_size=None, _configuration=None):  # noqa: E501
        """ModelGlobal - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._settings = None
        self._jai = None
        self._coverage_access = None
        self._update_sequence = None
        self._feature_type_cache_size = None
        self._global_services = None
        self._xml_post_request_log_buffer_size = None
        self.discriminator = None

        if settings is not None:
            self.settings = settings
        if jai is not None:
            self.jai = jai
        if coverage_access is not None:
            self.coverage_access = coverage_access
        if update_sequence is not None:
            self.update_sequence = update_sequence
        if feature_type_cache_size is not None:
            self.feature_type_cache_size = feature_type_cache_size
        if global_services is not None:
            self.global_services = global_services
        if xml_post_request_log_buffer_size is not None:
            self.xml_post_request_log_buffer_size = xml_post_request_log_buffer_size

    @property
    def settings(self):
        """Gets the settings of this ModelGlobal.  # noqa: E501


        :return: The settings of this ModelGlobal.  # noqa: E501
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ModelGlobal.


        :param settings: The settings of this ModelGlobal.  # noqa: E501
        :type: Settings
        """

        self._settings = settings

    @property
    def jai(self):
        """Gets the jai of this ModelGlobal.  # noqa: E501


        :return: The jai of this ModelGlobal.  # noqa: E501
        :rtype: JAI
        """
        return self._jai

    @jai.setter
    def jai(self, jai):
        """Sets the jai of this ModelGlobal.


        :param jai: The jai of this ModelGlobal.  # noqa: E501
        :type: JAI
        """

        self._jai = jai

    @property
    def coverage_access(self):
        """Gets the coverage_access of this ModelGlobal.  # noqa: E501


        :return: The coverage_access of this ModelGlobal.  # noqa: E501
        :rtype: CoverageAccess
        """
        return self._coverage_access

    @coverage_access.setter
    def coverage_access(self, coverage_access):
        """Sets the coverage_access of this ModelGlobal.


        :param coverage_access: The coverage_access of this ModelGlobal.  # noqa: E501
        :type: CoverageAccess
        """

        self._coverage_access = coverage_access

    @property
    def update_sequence(self):
        """Gets the update_sequence of this ModelGlobal.  # noqa: E501

        Number of times the server configuration has been modified  # noqa: E501

        :return: The update_sequence of this ModelGlobal.  # noqa: E501
        :rtype: float
        """
        return self._update_sequence

    @update_sequence.setter
    def update_sequence(self, update_sequence):
        """Sets the update_sequence of this ModelGlobal.

        Number of times the server configuration has been modified  # noqa: E501

        :param update_sequence: The update_sequence of this ModelGlobal.  # noqa: E501
        :type: float
        """

        self._update_sequence = update_sequence

    @property
    def feature_type_cache_size(self):
        """Gets the feature_type_cache_size of this ModelGlobal.  # noqa: E501

        Maximum number of datastore connections and schemas that can be kept in memory  # noqa: E501

        :return: The feature_type_cache_size of this ModelGlobal.  # noqa: E501
        :rtype: float
        """
        return self._feature_type_cache_size

    @feature_type_cache_size.setter
    def feature_type_cache_size(self, feature_type_cache_size):
        """Sets the feature_type_cache_size of this ModelGlobal.

        Maximum number of datastore connections and schemas that can be kept in memory  # noqa: E501

        :param feature_type_cache_size: The feature_type_cache_size of this ModelGlobal.  # noqa: E501
        :type: float
        """

        self._feature_type_cache_size = feature_type_cache_size

    @property
    def global_services(self):
        """Gets the global_services of this ModelGlobal.  # noqa: E501

        Allow access to both global services and virtual services  # noqa: E501

        :return: The global_services of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._global_services

    @global_services.setter
    def global_services(self, global_services):
        """Sets the global_services of this ModelGlobal.

        Allow access to both global services and virtual services  # noqa: E501

        :param global_services: The global_services of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._global_services = global_services

    @property
    def xml_post_request_log_buffer_size(self):
        """Gets the xml_post_request_log_buffer_size of this ModelGlobal.  # noqa: E501

        With more verbose logging levels, sets the size of the buffer GeoServer will use to log the body of POST requests  # noqa: E501

        :return: The xml_post_request_log_buffer_size of this ModelGlobal.  # noqa: E501
        :rtype: float
        """
        return self._xml_post_request_log_buffer_size

    @xml_post_request_log_buffer_size.setter
    def xml_post_request_log_buffer_size(self, xml_post_request_log_buffer_size):
        """Sets the xml_post_request_log_buffer_size of this ModelGlobal.

        With more verbose logging levels, sets the size of the buffer GeoServer will use to log the body of POST requests  # noqa: E501

        :param xml_post_request_log_buffer_size: The xml_post_request_log_buffer_size of this ModelGlobal.  # noqa: E501
        :type: float
        """

        self._xml_post_request_log_buffer_size = xml_post_request_log_buffer_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelGlobal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelGlobal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelGlobal):
            return True

        return self.to_dict() != other.to_dict()
