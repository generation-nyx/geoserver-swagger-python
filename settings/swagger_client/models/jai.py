# coding: utf-8

"""
    GeoServer Settings

    The Settings area shows global configuration for the server  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class JAI(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_interpolation': 'bool',
        'recycling': 'bool',
        'tile_priority': 'float',
        'tile_threads': 'float',
        'memory_capacity': 'float',
        'memory_threshold': 'float',
        'image_io_cache': 'bool',
        'png_acceleration': 'bool',
        'jpeg_acceleration': 'bool',
        'allow_native_mosaic': 'bool',
        'allow_native_warp': 'bool'
    }

    attribute_map = {
        'allow_interpolation': 'allowInterpolation',
        'recycling': 'recycling',
        'tile_priority': 'tilePriority',
        'tile_threads': 'tileThreads',
        'memory_capacity': 'memoryCapacity',
        'memory_threshold': 'memoryThreshold',
        'image_io_cache': 'imageIOCache',
        'png_acceleration': 'pngAcceleration',
        'jpeg_acceleration': 'jpegAcceleration',
        'allow_native_mosaic': 'allowNativeMosaic',
        'allow_native_warp': 'allowNativeWarp'
    }

    def __init__(self, allow_interpolation=None, recycling=None, tile_priority=None, tile_threads=None, memory_capacity=None, memory_threshold=None, image_io_cache=None, png_acceleration=None, jpeg_acceleration=None, allow_native_mosaic=None, allow_native_warp=None, _configuration=None):  # noqa: E501
        """JAI - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_interpolation = None
        self._recycling = None
        self._tile_priority = None
        self._tile_threads = None
        self._memory_capacity = None
        self._memory_threshold = None
        self._image_io_cache = None
        self._png_acceleration = None
        self._jpeg_acceleration = None
        self._allow_native_mosaic = None
        self._allow_native_warp = None
        self.discriminator = None

        if allow_interpolation is not None:
            self.allow_interpolation = allow_interpolation
        if recycling is not None:
            self.recycling = recycling
        if tile_priority is not None:
            self.tile_priority = tile_priority
        if tile_threads is not None:
            self.tile_threads = tile_threads
        if memory_capacity is not None:
            self.memory_capacity = memory_capacity
        if memory_threshold is not None:
            self.memory_threshold = memory_threshold
        if image_io_cache is not None:
            self.image_io_cache = image_io_cache
        if png_acceleration is not None:
            self.png_acceleration = png_acceleration
        if jpeg_acceleration is not None:
            self.jpeg_acceleration = jpeg_acceleration
        if allow_native_mosaic is not None:
            self.allow_native_mosaic = allow_native_mosaic
        if allow_native_warp is not None:
            self.allow_native_warp = allow_native_warp

    @property
    def allow_interpolation(self):
        """Gets the allow_interpolation of this JAI.  # noqa: E501

        No longer used  # noqa: E501

        :return: The allow_interpolation of this JAI.  # noqa: E501
        :rtype: bool
        """
        return self._allow_interpolation

    @allow_interpolation.setter
    def allow_interpolation(self, allow_interpolation):
        """Sets the allow_interpolation of this JAI.

        No longer used  # noqa: E501

        :param allow_interpolation: The allow_interpolation of this JAI.  # noqa: E501
        :type: bool
        """

        self._allow_interpolation = allow_interpolation

    @property
    def recycling(self):
        """Gets the recycling of this JAI.  # noqa: E501

        Tile recycling  # noqa: E501

        :return: The recycling of this JAI.  # noqa: E501
        :rtype: bool
        """
        return self._recycling

    @recycling.setter
    def recycling(self, recycling):
        """Sets the recycling of this JAI.

        Tile recycling  # noqa: E501

        :param recycling: The recycling of this JAI.  # noqa: E501
        :type: bool
        """

        self._recycling = recycling

    @property
    def tile_priority(self):
        """Gets the tile_priority of this JAI.  # noqa: E501

        Tile thread priority  # noqa: E501

        :return: The tile_priority of this JAI.  # noqa: E501
        :rtype: float
        """
        return self._tile_priority

    @tile_priority.setter
    def tile_priority(self, tile_priority):
        """Sets the tile_priority of this JAI.

        Tile thread priority  # noqa: E501

        :param tile_priority: The tile_priority of this JAI.  # noqa: E501
        :type: float
        """

        self._tile_priority = tile_priority

    @property
    def tile_threads(self):
        """Gets the tile_threads of this JAI.  # noqa: E501

        Tile threads  # noqa: E501

        :return: The tile_threads of this JAI.  # noqa: E501
        :rtype: float
        """
        return self._tile_threads

    @tile_threads.setter
    def tile_threads(self, tile_threads):
        """Sets the tile_threads of this JAI.

        Tile threads  # noqa: E501

        :param tile_threads: The tile_threads of this JAI.  # noqa: E501
        :type: float
        """

        self._tile_threads = tile_threads

    @property
    def memory_capacity(self):
        """Gets the memory_capacity of this JAI.  # noqa: E501

        Memory capacity  # noqa: E501

        :return: The memory_capacity of this JAI.  # noqa: E501
        :rtype: float
        """
        return self._memory_capacity

    @memory_capacity.setter
    def memory_capacity(self, memory_capacity):
        """Sets the memory_capacity of this JAI.

        Memory capacity  # noqa: E501

        :param memory_capacity: The memory_capacity of this JAI.  # noqa: E501
        :type: float
        """

        self._memory_capacity = memory_capacity

    @property
    def memory_threshold(self):
        """Gets the memory_threshold of this JAI.  # noqa: E501

        Memory threshold  # noqa: E501

        :return: The memory_threshold of this JAI.  # noqa: E501
        :rtype: float
        """
        return self._memory_threshold

    @memory_threshold.setter
    def memory_threshold(self, memory_threshold):
        """Sets the memory_threshold of this JAI.

        Memory threshold  # noqa: E501

        :param memory_threshold: The memory_threshold of this JAI.  # noqa: E501
        :type: float
        """

        self._memory_threshold = memory_threshold

    @property
    def image_io_cache(self):
        """Gets the image_io_cache of this JAI.  # noqa: E501

        Enables Image IO cache  # noqa: E501

        :return: The image_io_cache of this JAI.  # noqa: E501
        :rtype: bool
        """
        return self._image_io_cache

    @image_io_cache.setter
    def image_io_cache(self, image_io_cache):
        """Sets the image_io_cache of this JAI.

        Enables Image IO cache  # noqa: E501

        :param image_io_cache: The image_io_cache of this JAI.  # noqa: E501
        :type: bool
        """

        self._image_io_cache = image_io_cache

    @property
    def png_acceleration(self):
        """Gets the png_acceleration of this JAI.  # noqa: E501

        Enable JAI PNG native acceleration  # noqa: E501

        :return: The png_acceleration of this JAI.  # noqa: E501
        :rtype: bool
        """
        return self._png_acceleration

    @png_acceleration.setter
    def png_acceleration(self, png_acceleration):
        """Sets the png_acceleration of this JAI.

        Enable JAI PNG native acceleration  # noqa: E501

        :param png_acceleration: The png_acceleration of this JAI.  # noqa: E501
        :type: bool
        """

        self._png_acceleration = png_acceleration

    @property
    def jpeg_acceleration(self):
        """Gets the jpeg_acceleration of this JAI.  # noqa: E501

        Enable JAI JPEG native acceleration  # noqa: E501

        :return: The jpeg_acceleration of this JAI.  # noqa: E501
        :rtype: bool
        """
        return self._jpeg_acceleration

    @jpeg_acceleration.setter
    def jpeg_acceleration(self, jpeg_acceleration):
        """Sets the jpeg_acceleration of this JAI.

        Enable JAI JPEG native acceleration  # noqa: E501

        :param jpeg_acceleration: The jpeg_acceleration of this JAI.  # noqa: E501
        :type: bool
        """

        self._jpeg_acceleration = jpeg_acceleration

    @property
    def allow_native_mosaic(self):
        """Gets the allow_native_mosaic of this JAI.  # noqa: E501

        Enable JAI mosaic native acceleration  # noqa: E501

        :return: The allow_native_mosaic of this JAI.  # noqa: E501
        :rtype: bool
        """
        return self._allow_native_mosaic

    @allow_native_mosaic.setter
    def allow_native_mosaic(self, allow_native_mosaic):
        """Sets the allow_native_mosaic of this JAI.

        Enable JAI mosaic native acceleration  # noqa: E501

        :param allow_native_mosaic: The allow_native_mosaic of this JAI.  # noqa: E501
        :type: bool
        """

        self._allow_native_mosaic = allow_native_mosaic

    @property
    def allow_native_warp(self):
        """Gets the allow_native_warp of this JAI.  # noqa: E501

        Enable JAI native warp acceleration  # noqa: E501

        :return: The allow_native_warp of this JAI.  # noqa: E501
        :rtype: bool
        """
        return self._allow_native_warp

    @allow_native_warp.setter
    def allow_native_warp(self, allow_native_warp):
        """Sets the allow_native_warp of this JAI.

        Enable JAI native warp acceleration  # noqa: E501

        :param allow_native_warp: The allow_native_warp of this JAI.  # noqa: E501
        :type: bool
        """

        self._allow_native_warp = allow_native_warp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JAI, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JAI):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JAI):
            return True

        return self.to_dict() != other.to_dict()
