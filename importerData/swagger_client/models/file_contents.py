# coding: utf-8

"""
    GeoServer Importer Extension - Data

    The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The data endpoint controls uploading layer data to specific import jobs. The importer extension is an optional install and may not be available on all deployments of GeoServer  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FileContents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'href': 'str',
        'prj': 'str',
        'other': 'list[str]'
    }

    attribute_map = {
        'file': 'file',
        'href': 'href',
        'prj': 'prj',
        'other': 'other'
    }

    def __init__(self, file=None, href=None, prj=None, other=None, _configuration=None):  # noqa: E501
        """FileContents - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._file = None
        self._href = None
        self._prj = None
        self._other = None
        self.discriminator = None

        if file is not None:
            self.file = file
        if href is not None:
            self.href = href
        if prj is not None:
            self.prj = prj
        if other is not None:
            self.other = other

    @property
    def file(self):
        """Gets the file of this FileContents.  # noqa: E501

        Name of the file  # noqa: E501

        :return: The file of this FileContents.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FileContents.

        Name of the file  # noqa: E501

        :param file: The file of this FileContents.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def href(self):
        """Gets the href of this FileContents.  # noqa: E501

        URL to the file endpoint  # noqa: E501

        :return: The href of this FileContents.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this FileContents.

        URL to the file endpoint  # noqa: E501

        :param href: The href of this FileContents.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def prj(self):
        """Gets the prj of this FileContents.  # noqa: E501

        Name of the .prj file, if applicable  # noqa: E501

        :return: The prj of this FileContents.  # noqa: E501
        :rtype: str
        """
        return self._prj

    @prj.setter
    def prj(self, prj):
        """Sets the prj of this FileContents.

        Name of the .prj file, if applicable  # noqa: E501

        :param prj: The prj of this FileContents.  # noqa: E501
        :type: str
        """

        self._prj = prj

    @property
    def other(self):
        """Gets the other of this FileContents.  # noqa: E501

        List of other files that comprise this spatial file.  # noqa: E501

        :return: The other of this FileContents.  # noqa: E501
        :rtype: list[str]
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this FileContents.

        List of other files that comprise this spatial file.  # noqa: E501

        :param other: The other of this FileContents.  # noqa: E501
        :type: list[str]
        """

        self._other = other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileContents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileContents):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileContents):
            return True

        return self.to_dict() != other.to_dict()
