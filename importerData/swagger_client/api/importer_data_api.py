# coding: utf-8

"""
    GeoServer Importer Extension - Data

    The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The data endpoint controls uploading layer data to specific import jobs. The importer extension is an optional install and may not be available on all deployments of GeoServer  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ImporterDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_import_data_file(self, **kwargs):  # noqa: E501
        """Remove a specific file with id {filename} from the import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_import_data_file(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_import_data_file_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_import_data_file_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_import_data_file_with_http_info(self, **kwargs):  # noqa: E501
        """Remove a specific file with id {filename} from the import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_import_data_file_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_import_data_file" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/data/files/{filename}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_task_data_file(self, **kwargs):  # noqa: E501
        """Remove a specific file with id {filename} from the task with id {taskId} within import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_task_data_file(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_task_data_file_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_task_data_file_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_task_data_file_with_http_info(self, **kwargs):  # noqa: E501
        """Remove a specific file with id {filename} from the task with id {taskId} within import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_task_data_file_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_task_data_file" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/data/files/{filename}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data(self, import_id, **kwargs):  # noqa: E501
        """Retrieve the database connection parameters for an import with id {importId}. Only applies to database imports.  # noqa: E501

        Get import data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data(import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Database
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_with_http_info(import_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_with_http_info(import_id, **kwargs)  # noqa: E501
            return data

    def get_data_with_http_info(self, import_id, **kwargs):  # noqa: E501
        """Retrieve the database connection parameters for an import with id {importId}. Only applies to database imports.  # noqa: E501

        Get import data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_with_http_info(import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Database
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `get_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Database',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_file(self, import_id, filename, **kwargs):  # noqa: E501
        """Retrieve information about the file with id {fileId} from the data of an import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_file(import_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str filename: The filename (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_file_with_http_info(import_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_file_with_http_info(import_id, filename, **kwargs)  # noqa: E501
            return data

    def get_data_file_with_http_info(self, import_id, filename, **kwargs):  # noqa: E501
        """Retrieve information about the file with id {fileId} from the data of an import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_file_with_http_info(import_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str filename: The filename (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'filename', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `get_data_file`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if self.api_client.client_side_validation and ('filename' not in params or
                                                       params['filename'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filename` when calling `get_data_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/data/files/{filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_files(self, import_id, **kwargs):  # noqa: E501
        """Retrieve the list of files for an import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_files(import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Directory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_files_with_http_info(import_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_files_with_http_info(import_id, **kwargs)  # noqa: E501
            return data

    def get_data_files_with_http_info(self, import_id, **kwargs):  # noqa: E501
        """Retrieve the list of files for an import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_files_with_http_info(import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Directory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `get_data_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/data/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Directory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_data(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the table description for a task with id {taskId} within import with id {importId}. Only applies to database imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_data_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_data_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_task_data_with_http_info(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the table description for a task with id {taskId} within import with id {importId}. Only applies to database imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data_with_http_info(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `get_task_data`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `get_task_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Table',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_data_file(self, import_id, task_id, filename, **kwargs):  # noqa: E501
        """Retrieve information about the file with id {fileId} from the data of a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data_file(import_id, task_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str filename: The filename (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_data_file_with_http_info(import_id, task_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_data_file_with_http_info(import_id, task_id, filename, **kwargs)  # noqa: E501
            return data

    def get_task_data_file_with_http_info(self, import_id, task_id, filename, **kwargs):  # noqa: E501
        """Retrieve information about the file with id {fileId} from the data of a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data_file_with_http_info(import_id, task_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str filename: The filename (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'filename', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_data_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `get_task_data_file`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `get_task_data_file`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if self.api_client.client_side_validation and ('filename' not in params or
                                                       params['filename'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filename` when calling `get_task_data_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/data/files/{filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_data_files(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the list of files for a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data_files(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Directory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_data_files_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_data_files_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_task_data_files_with_http_info(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the list of files for a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data_files_with_http_info(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Directory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_data_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if self.api_client.client_side_validation and ('import_id' not in params or
                                                       params['import_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_id` when calling `get_task_data_files`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `get_task_data_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/data/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Directory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
