# coding: utf-8

"""
    GeoServer Layer Groups

    A layer group is a group of layers that can be referenced as a single layer as part of a WMS request. A layer group can also be used as a container for layers.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LayerGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_layergroup(self, layergroup_name, **kwargs):  # noqa: E501
        """Delete layer group  # noqa: E501

        Deletes a layer group from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layergroup(layergroup_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layergroup_name: The name of the layer group to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_layergroup_with_http_info(layergroup_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_layergroup_with_http_info(layergroup_name, **kwargs)  # noqa: E501
            return data

    def delete_layergroup_with_http_info(self, layergroup_name, **kwargs):  # noqa: E501
        """Delete layer group  # noqa: E501

        Deletes a layer group from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layergroup_with_http_info(layergroup_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layergroup_name: The name of the layer group to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layergroup_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_layergroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layergroup_name' is set
        if self.api_client.client_side_validation and ('layergroup_name' not in params or
                                                       params['layergroup_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup_name` when calling `delete_layergroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layergroup_name' in params:
            path_params['layergroupName'] = params['layergroup_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layergroups/{layergroupName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_layergroups(self, **kwargs):  # noqa: E501
        """delete_layergroups  # noqa: E501

        Invalid. Use /layergroups/{layergroup} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layergroups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_layergroups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_layergroups_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_layergroups_with_http_info(self, **kwargs):  # noqa: E501
        """delete_layergroups  # noqa: E501

        Invalid. Use /layergroups/{layergroup} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layergroups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_layergroups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layergroups', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workspace_layergroup(self, layergroup, workspace, **kwargs):  # noqa: E501
        """Delete layer group  # noqa: E501

        Deletes a layer group from the server in the given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_layergroup(layergroup, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layergroup: The name of the layer group to delete. (required)
        :param str workspace: The name of the workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workspace_layergroup_with_http_info(layergroup, workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_layergroup_with_http_info(layergroup, workspace, **kwargs)  # noqa: E501
            return data

    def delete_workspace_layergroup_with_http_info(self, layergroup, workspace, **kwargs):  # noqa: E501
        """Delete layer group  # noqa: E501

        Deletes a layer group from the server in the given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_layergroup_with_http_info(layergroup, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layergroup: The name of the layer group to delete. (required)
        :param str workspace: The name of the workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layergroup', 'workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workspace_layergroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layergroup' is set
        if self.api_client.client_side_validation and ('layergroup' not in params or
                                                       params['layergroup'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup` when calling `delete_workspace_layergroup`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_workspace_layergroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layergroup' in params:
            path_params['layergroup'] = params['layergroup']  # noqa: E501
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/layergroups/{layergroup}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workspace_layergroups(self, **kwargs):  # noqa: E501
        """delete_workspace_layergroups  # noqa: E501

        Invalid. Use /workspaces/{workspace}/layergroups/{layergroup} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_layergroups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workspace_layergroups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_layergroups_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_workspace_layergroups_with_http_info(self, **kwargs):  # noqa: E501
        """delete_workspace_layergroups  # noqa: E501

        Invalid. Use /workspaces/{workspace}/layergroups/{layergroup} instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_layergroups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workspace_layergroups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/layergroups', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layergroup(self, layergroup_name, **kwargs):  # noqa: E501
        """Retrieve a layer group  # noqa: E501

        Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layergroup(layergroup_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layergroup_name: The name of the layer group to retrieve. (required)
        :return: Layergroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layergroup_with_http_info(layergroup_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layergroup_with_http_info(layergroup_name, **kwargs)  # noqa: E501
            return data

    def get_layergroup_with_http_info(self, layergroup_name, **kwargs):  # noqa: E501
        """Retrieve a layer group  # noqa: E501

        Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layergroup_with_http_info(layergroup_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layergroup_name: The name of the layer group to retrieve. (required)
        :return: Layergroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layergroup_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layergroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layergroup_name' is set
        if self.api_client.client_side_validation and ('layergroup_name' not in params or
                                                       params['layergroup_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup_name` when calling `get_layergroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layergroup_name' in params:
            path_params['layergroupName'] = params['layergroup_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layergroups/{layergroupName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layergroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layergroups(self, **kwargs):  # noqa: E501
        """Get a list of layer groups  # noqa: E501

        Displays a list of all layer groups on the server not otherwise in a workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layergroups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LayergroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layergroups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_layergroups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_layergroups_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of layer groups  # noqa: E501

        Displays a list of all layer groups on the server not otherwise in a workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layergroups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LayergroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layergroups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layergroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayergroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspace_layergroup(self, workspace, layergroup, **kwargs):  # noqa: E501
        """Retrieve a layer group  # noqa: E501

        Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_layergroup(workspace, layergroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str layergroup: The name of the layer group to retrieve. (required)
        :return: Layergroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspace_layergroup_with_http_info(workspace, layergroup, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_layergroup_with_http_info(workspace, layergroup, **kwargs)  # noqa: E501
            return data

    def get_workspace_layergroup_with_http_info(self, workspace, layergroup, **kwargs):  # noqa: E501
        """Retrieve a layer group  # noqa: E501

        Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_layergroup_with_http_info(workspace, layergroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str layergroup: The name of the layer group to retrieve. (required)
        :return: Layergroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'layergroup']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_layergroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_workspace_layergroup`")  # noqa: E501
        # verify the required parameter 'layergroup' is set
        if self.api_client.client_side_validation and ('layergroup' not in params or
                                                       params['layergroup'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup` when calling `get_workspace_layergroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'layergroup' in params:
            path_params['layergroup'] = params['layergroup']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/layergroups/{layergroup}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layergroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspace_layergroups(self, workspace, **kwargs):  # noqa: E501
        """Get a list of layer groups in a workspace  # noqa: E501

        Displays a list of all layer groups in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_layergroups(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :return: LayergroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspace_layergroups_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_layergroups_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_workspace_layergroups_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """Get a list of layer groups in a workspace  # noqa: E501

        Displays a list of all layer groups in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_layergroups_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :return: LayergroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_layergroups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_workspace_layergroups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/layergroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayergroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_layergroup(self, **kwargs):  # noqa: E501
        """post_layergroup  # noqa: E501

        Invalid. Use PUT to edit a layer group definition, or POST with /layergroups to add a new definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_layergroup(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_layergroup_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_layergroup_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_layergroup_with_http_info(self, **kwargs):  # noqa: E501
        """post_layergroup  # noqa: E501

        Invalid. Use PUT to edit a layer group definition, or POST with /layergroups to add a new definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_layergroup_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_layergroup" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layergroups/{layergroupName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_layergroups(self, layergroup_body, **kwargs):  # noqa: E501
        """Add a new layer group  # noqa: E501

        Adds a new layer group entry to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_layergroups(layergroup_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layergroup layergroup_body: The layer group body information to upload. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_layergroups_with_http_info(layergroup_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_layergroups_with_http_info(layergroup_body, **kwargs)  # noqa: E501
            return data

    def post_layergroups_with_http_info(self, layergroup_body, **kwargs):  # noqa: E501
        """Add a new layer group  # noqa: E501

        Adds a new layer group entry to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_layergroups_with_http_info(layergroup_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layergroup layergroup_body: The layer group body information to upload. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layergroup_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_layergroups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layergroup_body' is set
        if self.api_client.client_side_validation and ('layergroup_body' not in params or
                                                       params['layergroup_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup_body` when calling `post_layergroups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layergroup_body' in params:
            body_params = params['layergroup_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layergroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workspace_layergroup(self, **kwargs):  # noqa: E501
        """post_workspace_layergroup  # noqa: E501

        Invalid. Use PUT to edit a layer group definition, or POST with /workspaces/{workspace}/layergroups to add a new definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_layergroup(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workspace_layergroup_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_layergroup_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_workspace_layergroup_with_http_info(self, **kwargs):  # noqa: E501
        """post_workspace_layergroup  # noqa: E501

        Invalid. Use PUT to edit a layer group definition, or POST with /workspaces/{workspace}/layergroups to add a new definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_layergroup_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workspace_layergroup" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/layergroups/{layergroup}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workspace_layergroups(self, layergroup_body, **kwargs):  # noqa: E501
        """Add a new layer group  # noqa: E501

        Adds a new layer group entry to the server in the specified workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_layergroups(layergroup_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layergroup layergroup_body: The layer group body information to upload. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workspace_layergroups_with_http_info(layergroup_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_layergroups_with_http_info(layergroup_body, **kwargs)  # noqa: E501
            return data

    def post_workspace_layergroups_with_http_info(self, layergroup_body, **kwargs):  # noqa: E501
        """Add a new layer group  # noqa: E501

        Adds a new layer group entry to the server in the specified workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_layergroups_with_http_info(layergroup_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layergroup layergroup_body: The layer group body information to upload. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layergroup_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workspace_layergroups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layergroup_body' is set
        if self.api_client.client_side_validation and ('layergroup_body' not in params or
                                                       params['layergroup_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup_body` when calling `post_workspace_layergroups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layergroup_body' in params:
            body_params = params['layergroup_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/layergroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_layergroup(self, layergroup_name, layergroup_body, **kwargs):  # noqa: E501
        """Modify a layer group.  # noqa: E501

        Modifies an existing layer group on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_layergroup(layergroup_name, layergroup_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layergroup_name: The name of the layer group to modify. (required)
        :param Layergroup layergroup_body: The updated layer group definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_layergroup_with_http_info(layergroup_name, layergroup_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_layergroup_with_http_info(layergroup_name, layergroup_body, **kwargs)  # noqa: E501
            return data

    def put_layergroup_with_http_info(self, layergroup_name, layergroup_body, **kwargs):  # noqa: E501
        """Modify a layer group.  # noqa: E501

        Modifies an existing layer group on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_layergroup_with_http_info(layergroup_name, layergroup_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layergroup_name: The name of the layer group to modify. (required)
        :param Layergroup layergroup_body: The updated layer group definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layergroup_name', 'layergroup_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_layergroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layergroup_name' is set
        if self.api_client.client_side_validation and ('layergroup_name' not in params or
                                                       params['layergroup_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup_name` when calling `put_layergroup`")  # noqa: E501
        # verify the required parameter 'layergroup_body' is set
        if self.api_client.client_side_validation and ('layergroup_body' not in params or
                                                       params['layergroup_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup_body` when calling `put_layergroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layergroup_name' in params:
            path_params['layergroupName'] = params['layergroup_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layergroup_body' in params:
            body_params = params['layergroup_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layergroups/{layergroupName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_layergroups(self, **kwargs):  # noqa: E501
        """put_layergroups  # noqa: E501

        Invalid. Use POST for adding a new layer group, or PUT on /layergroups/{layergroup} to edit an existing layer group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_layergroups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_layergroups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_layergroups_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_layergroups_with_http_info(self, **kwargs):  # noqa: E501
        """put_layergroups  # noqa: E501

        Invalid. Use POST for adding a new layer group, or PUT on /layergroups/{layergroup} to edit an existing layer group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_layergroups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_layergroups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/layergroups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workspace_layergroup(self, workspace, layergroup, layergroup_body, **kwargs):  # noqa: E501
        """Modify a layer group.  # noqa: E501

        Modifies an existing layer group on the server in the given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_layergroup(workspace, layergroup, layergroup_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str layergroup: The name of the layer group to modify. (required)
        :param Layergroup layergroup_body: The updated layer group definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workspace_layergroup_with_http_info(workspace, layergroup, layergroup_body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_layergroup_with_http_info(workspace, layergroup, layergroup_body, **kwargs)  # noqa: E501
            return data

    def put_workspace_layergroup_with_http_info(self, workspace, layergroup, layergroup_body, **kwargs):  # noqa: E501
        """Modify a layer group.  # noqa: E501

        Modifies an existing layer group on the server in the given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_layergroup_with_http_info(workspace, layergroup, layergroup_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str layergroup: The name of the layer group to modify. (required)
        :param Layergroup layergroup_body: The updated layer group definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'layergroup', 'layergroup_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workspace_layergroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `put_workspace_layergroup`")  # noqa: E501
        # verify the required parameter 'layergroup' is set
        if self.api_client.client_side_validation and ('layergroup' not in params or
                                                       params['layergroup'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup` when calling `put_workspace_layergroup`")  # noqa: E501
        # verify the required parameter 'layergroup_body' is set
        if self.api_client.client_side_validation and ('layergroup_body' not in params or
                                                       params['layergroup_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layergroup_body` when calling `put_workspace_layergroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'layergroup' in params:
            path_params['layergroup'] = params['layergroup']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layergroup_body' in params:
            body_params = params['layergroup_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/layergroups/{layergroup}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workspace_layergroups(self, **kwargs):  # noqa: E501
        """put_workspace_layergroups  # noqa: E501

        Invalid. Use POST for adding a new layer group to a workspace, or PUT on /workspaces/{workspace}/layergroups/{layergroup} to edit an existing layer group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_layergroups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workspace_layergroups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_layergroups_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_workspace_layergroups_with_http_info(self, **kwargs):  # noqa: E501
        """put_workspace_layergroups  # noqa: E501

        Invalid. Use POST for adding a new layer group to a workspace, or PUT on /workspaces/{workspace}/layergroups/{layergroup} to edit an existing layer group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_layergroups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workspace_layergroups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/layergroups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
